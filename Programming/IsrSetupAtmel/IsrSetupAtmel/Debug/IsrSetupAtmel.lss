
IsrSetupAtmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000031c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000031f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007b1  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e2  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000428  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000188  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030e  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004d6  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  88:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinSetup>:
    }
}

void pinSetup(void)
{
		DDRC |= (1 << VCC_BIT);
  90:	3a 9a       	sbi	0x07, 2	; 7
		DDRC |= (1 << GND_BIT);		// set pins to output
  92:	3b 9a       	sbi	0x07, 3	; 7
		
		PORTC |= _BV(VCC_BIT);		// set VCC pin to high
  94:	42 9a       	sbi	0x08, 2	; 8
		PORTC &= ~(_BV(GND_BIT));	// set GND pin to low
  96:	43 98       	cbi	0x08, 3	; 8
  98:	08 95       	ret

0000009a <main>:
};


int main(void)
{
	pinSetup();	// setup VCC, GND and LED pins
  9a:	0e 94 48 00 	call	0x90	; 0x90 <pinSetup>
	//i2c_init();	// setup TWI
	spi_init_bitbanging();
  9e:	0e 94 c9 00 	call	0x192	; 0x192 <spi_init_bitbanging>
	sei();			// enable global interrupts
  a2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	89 e6       	ldi	r24, 0x69	; 105
  a8:	98 e1       	ldi	r25, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x10>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x1a>
  b4:	00 00       	nop
	_delay_ms(1000);
    while (1) 
    {
		//i2c_start();
		spiData[0]=0x31;
  b6:	c3 e0       	ldi	r28, 0x03	; 3
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	11 e3       	ldi	r17, 0x31	; 49
  bc:	18 83       	st	Y, r17
		spiData[1]=0x00;
  be:	19 82       	std	Y+1, r1	; 0x01
		spi_send16Bits_bitbanging(spiData);
  c0:	ce 01       	movw	r24, r28
  c2:	0e 94 2d 01 	call	0x25a	; 0x25a <spi_send16Bits_bitbanging>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x30>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x36>
  d0:	00 00       	nop
  d2:	f4 cf       	rjmp	.-24     	; 0xbc <main+0x22>

000000d4 <__vector_24>:
		PORTC &= ~(_BV(GND_BIT));	// set GND pin to low
}


ISR(TWI_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	static uint8_t i2cDataTemp[2];
	if((TWSR & 0xF8) == TW_START)					// start condition successfully transmitted
  ec:	80 91 b9 00 	lds	r24, 0x00B9
  f0:	88 7f       	andi	r24, 0xF8	; 248
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	39 f4       	brne	.+14     	; 0x104 <__vector_24+0x30>
	{
		TWDR = 0b10011011;							// load address(1001101x) and read(1) into data register
  f6:	8b e9       	ldi	r24, 0x9B	; 155
  f8:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);				// start transmission of address
  fc:	85 e8       	ldi	r24, 0x85	; 133
  fe:	80 93 bc 00 	sts	0x00BC, r24
 102:	3b c0       	rjmp	.+118    	; 0x17a <__vector_24+0xa6>
	}
	else if ( ((TW_STATUS & 0xF8) == TW_MT_SLA_ACK) || ((TW_STATUS & 0xF8) == TW_MR_SLA_ACK) ) // address+read/write acknowledged
 104:	80 91 b9 00 	lds	r24, 0x00B9
 108:	88 7f       	andi	r24, 0xF8	; 248
 10a:	88 31       	cpi	r24, 0x18	; 24
 10c:	29 f0       	breq	.+10     	; 0x118 <__vector_24+0x44>
 10e:	80 91 b9 00 	lds	r24, 0x00B9
 112:	88 7f       	andi	r24, 0xF8	; 248
 114:	80 34       	cpi	r24, 0x40	; 64
 116:	21 f4       	brne	.+8      	; 0x120 <__vector_24+0x4c>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE); // start TWI module and acknowledge data after reception
 118:	85 ec       	ldi	r24, 0xC5	; 197
 11a:	80 93 bc 00 	sts	0x00BC, r24
 11e:	2d c0       	rjmp	.+90     	; 0x17a <__vector_24+0xa6>
	}
	else /*if((TW_STATUS & 0xF8) == TW_MR_DATA_ACK)*/			// data received and acknowledge sent
	{
		static uint8_t byteNumber=0;
		i2cDataTemp[byteNumber] = TWDR;	// data structure from sensor, B1: 0 0 0 0  b10 b9 b8 b7       B2: b6 b5 b4 b3  b2 b1 x x
 120:	80 91 02 01 	lds	r24, 0x0102
 124:	90 91 bb 00 	lds	r25, 0x00BB
 128:	e8 2f       	mov	r30, r24
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	90 83       	st	Z, r25
		byteNumber++;
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 02 01 	sts	0x0102, r24
		if(byteNumber == 2)							// 2nd byte was sent -> send STOP
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	e1 f4       	brne	.+56     	; 0x174 <__vector_24+0xa0>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	// transmit STOP condition. disable with endless data acquiry
 13c:	84 e9       	ldi	r24, 0x94	; 148
 13e:	80 93 bc 00 	sts	0x00BC, r24
			//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE); // endless data acquiry enable, request 1st byte again
			byteNumber = 0;							// overwrite data the next time
 142:	10 92 02 01 	sts	0x0102, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 146:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON)			// write i2cData into global array
			{
				i2cData[0]=(0x3F & (i2cDataTemp[0]/4))|((uint8_t)(i2cDataTemp[1]*64));	// store data in right format
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	8c 91       	ld	r24, X
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	e5 e0       	ldi	r30, 0x05	; 5
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	9c 91       	ld	r25, X
 158:	96 95       	lsr	r25
 15a:	96 95       	lsr	r25
 15c:	28 2f       	mov	r18, r24
 15e:	22 95       	swap	r18
 160:	22 0f       	add	r18, r18
 162:	22 0f       	add	r18, r18
 164:	20 7c       	andi	r18, 0xC0	; 192
 166:	92 2b       	or	r25, r18
 168:	90 83       	st	Z, r25
				i2cData[1]=i2cDataTemp[1]/4;
 16a:	86 95       	lsr	r24
 16c:	86 95       	lsr	r24
 16e:	81 83       	std	Z+1, r24	; 0x01
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 170:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 172:	03 c0       	rjmp	.+6      	; 0x17a <__vector_24+0xa6>
			}
			
		}
		else	// after transmission of 1st data byte
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE); // start TWI module for 2nd byte and NACK data after reception (signals end of reception)
 174:	85 e8       	ldi	r24, 0x85	; 133
 176:	80 93 bc 00 	sts	0x00BC, r24
		}
	}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <spi_init_bitbanging>:
void spi_selectSlave(void);
void spi_unselectSlave(void);

void spi_init_bitbanging(void)
{
	DDRD |=  ((1 << MOSI) | (1<<CLK)) ;	// set MOSI, CLK as output
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	83 60       	ori	r24, 0x03	; 3
 196:	8a b9       	out	0x0a, r24	; 10
	DDRB |=  (1 << nSS); // set nSS as output
 198:	26 9a       	sbi	0x04, 6	; 4
	DDRD &= (~(1 << MISO)); // set MISO as input
 19a:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~((1 << MOSI) | (1 << CLK));	// set MOSI and CLK as idle low
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	8c 7f       	andi	r24, 0xFC	; 252
 1a0:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << nSS);	// set nSS to high (slave not selected)
 1a2:	26 9a       	sbi	0x04, 6	; 4
 1a4:	08 95       	ret

000001a6 <spi_send16Bits>:
	PORTD &= (~(1 << MOSI));	// set MOSI idle low
	return retData;
}

void spi_send16Bits(unsigned char* cData)
{
 1a6:	8f 92       	push	r8
 1a8:	9f 92       	push	r9
 1aa:	af 92       	push	r10
 1ac:	bf 92       	push	r11
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <spi_send16Bits+0x1a>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char retData[2];
	retData[0]=0;
 1c4:	19 82       	std	Y+1, r1	; 0x01
	retData[1]=0;
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	de 01       	movw	r26, r28
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	bc 01       	movw	r22, r24
 1ce:	6e 01       	movw	r12, r28
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	c8 0e       	add	r12, r24
 1d4:	d1 1c       	adc	r13, r1
	PORTD &= (~(1 << MOSI));	// set MOSI idle low
	return retData;
}

void spi_send16Bits(unsigned char* cData)
{
 1d6:	68 94       	set
 1d8:	aa 24       	eor	r10, r10
 1da:	a3 f8       	bld	r10, 3
 1dc:	b1 2c       	mov	r11, r1
 1de:	24 c0       	rjmp	.+72     	; 0x228 <spi_send16Bits+0x82>
	retData[1]=0;
	for(int j=0 ; j<2 ; j++)
	{
		for(int i = 0; i<8; i++)
		{
			PORTD |= (1 << CLK);	// clock high (leading edge)
 1e0:	58 9a       	sbi	0x0b, 0	; 11
 1e2:	84 01       	movw	r16, r8
			// set data bit
			if(cData[j] & 0b10000000)
 1e4:	fb 01       	movw	r30, r22
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	14 f4       	brge	.+4      	; 0x1f0 <spi_send16Bits+0x4a>
				PORTD |= (1 << MOSI);
 1ec:	59 9a       	sbi	0x0b, 1	; 11
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <spi_send16Bits+0x4c>
			else
				PORTD &= (~(1 << MOSI));
 1f0:	59 98       	cbi	0x0b, 1	; 11
			cData[j] = (unsigned char) (cData[j] * 2);	// set pointer to next data bit
 1f2:	f4 01       	movw	r30, r8
 1f4:	80 81       	ld	r24, Z
 1f6:	88 0f       	add	r24, r24
 1f8:	80 83       	st	Z, r24
			PORTD &= (~(1 << CLK));	// clock low (sampling edge)
 1fa:	58 98       	cbi	0x0b, 0	; 11
 1fc:	7a 01       	movw	r14, r20
			retData[j] = retData[j] * 2;
 1fe:	9c 91       	ld	r25, X
 200:	99 0f       	add	r25, r25
 202:	9c 93       	st	X, r25
			if((PIND & (1 << MISO)))	// set retData bit according to MISO state
 204:	4b 9b       	sbis	0x09, 3	; 9
 206:	03 c0       	rjmp	.+6      	; 0x20e <spi_send16Bits+0x68>
				retData[j] ++;
 208:	9f 5f       	subi	r25, 0xFF	; 255
 20a:	fa 01       	movw	r30, r20
 20c:	90 83       	st	Z, r25
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	31 09       	sbc	r19, r1
	unsigned char retData[2];
	retData[0]=0;
	retData[1]=0;
	for(int j=0 ; j<2 ; j++)
	{
		for(int i = 0; i<8; i++)
 212:	31 f7       	brne	.-52     	; 0x1e0 <spi_send16Bits+0x3a>
 214:	11 96       	adiw	r26, 0x01	; 1
			PORTD &= (~(1 << CLK));	// clock low (sampling edge)
			retData[j] = retData[j] * 2;
			if((PIND & (1 << MISO)))	// set retData bit according to MISO state
				retData[j] ++;
		}
		cData[j]=retData[j];
 216:	f7 01       	movw	r30, r14
 218:	80 81       	ld	r24, Z
 21a:	f8 01       	movw	r30, r16
 21c:	80 83       	st	Z, r24
 21e:	6f 5f       	subi	r22, 0xFF	; 255
 220:	7f 4f       	sbci	r23, 0xFF	; 255
void spi_send16Bits(unsigned char* cData)
{
	unsigned char retData[2];
	retData[0]=0;
	retData[1]=0;
	for(int j=0 ; j<2 ; j++)
 222:	ac 15       	cp	r26, r12
 224:	bd 05       	cpc	r27, r13
 226:	29 f0       	breq	.+10     	; 0x232 <spi_send16Bits+0x8c>
	PORTD &= (~(1 << MOSI));	// set MOSI idle low
	return retData;
}

void spi_send16Bits(unsigned char* cData)
{
 228:	2a 2d       	mov	r18, r10
 22a:	3b 2d       	mov	r19, r11
 22c:	4b 01       	movw	r8, r22
 22e:	ad 01       	movw	r20, r26
 230:	d7 cf       	rjmp	.-82     	; 0x1e0 <spi_send16Bits+0x3a>
			if((PIND & (1 << MISO)))	// set retData bit according to MISO state
				retData[j] ++;
		}
		cData[j]=retData[j];
	}
	PORTD &= (~(1 << MOSI));	// set MOSI idle low
 232:	59 98       	cbi	0x0b, 1	; 11
}
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	df 90       	pop	r13
 246:	cf 90       	pop	r12
 248:	bf 90       	pop	r11
 24a:	af 90       	pop	r10
 24c:	9f 90       	pop	r9
 24e:	8f 90       	pop	r8
 250:	08 95       	ret

00000252 <spi_selectSlave>:



void spi_selectSlave(void)
{
	PORTB &= (~(1 << nSS));	// select slave
 252:	2e 98       	cbi	0x05, 6	; 5
 254:	08 95       	ret

00000256 <spi_unselectSlave>:
}

void spi_unselectSlave(void)
{
	PORTB |= (1 << nSS);	// unselect slave
 256:	2e 9a       	sbi	0x05, 6	; 5
 258:	08 95       	ret

0000025a <spi_send16Bits_bitbanging>:
	}
	spi_unselectSlave();
}

void spi_send16Bits_bitbanging(unsigned char* cData) // MSB first, clk idle low and MOSI idle low
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
	spi_selectSlave();
 260:	0e 94 29 01 	call	0x252	; 0x252 <spi_selectSlave>
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <spi_send16Bits_bitbanging+0xc>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <spi_send16Bits_bitbanging+0x12>
	_delay_us(1);
	spi_send16Bits(cData);
 26c:	ce 01       	movw	r24, r28
 26e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <spi_send16Bits>
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <spi_send16Bits_bitbanging+0x1a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <spi_send16Bits_bitbanging+0x20>
	_delay_us(1);
	spi_unselectSlave();
 27a:	0e 94 2b 01 	call	0x256	; 0x256 <spi_unselectSlave>
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
