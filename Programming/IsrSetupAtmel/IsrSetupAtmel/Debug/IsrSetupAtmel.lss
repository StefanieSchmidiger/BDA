
IsrSetupAtmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000731  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003db  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043b  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d1  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  88:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <i2c_init>:
#include <util/twi.h>
#include <avr/interrupt.h>

void i2c_init(void)
{
	OSCCAL = 0xFF;				// select  highest possible frequency with RC generator
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 93 66 00 	sts	0x0066, r24
	CLKPR = 0b10000000;
  96:	e1 e6       	ldi	r30, 0x61	; 97
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	80 83       	st	Z, r24
	CLKPR = 0b10000000;
  9e:	80 83       	st	Z, r24
	TWBR = 10;		// SCL frequency 400kHz
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	80 93 b8 00 	sts	0x00B8, r24
	sei();			// global interrupt enable
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <i2c_start>:
}

void i2c_start(void)
{
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
  aa:	85 ea       	ldi	r24, 0xA5	; 165
  ac:	80 93 bc 00 	sts	0x00BC, r24
  b0:	08 95       	ret

000000b2 <pinSetup>:
    }
}

void pinSetup(void)
{
		DDRC |= (1 << VCC_BIT);
  b2:	3a 9a       	sbi	0x07, 2	; 7
		DDRC |= (1 << GND_BIT);		// set pins to output
  b4:	3b 9a       	sbi	0x07, 3	; 7
		
		PORTC |= _BV(VCC_BIT);		// set VCC pin to high
  b6:	42 9a       	sbi	0x08, 2	; 8
		PORTC &= ~(_BV(GND_BIT));	// set GND pin to low
  b8:	43 98       	cbi	0x08, 3	; 8
  ba:	08 95       	ret

000000bc <main>:
uint8_t i2cData[2];
uint8_t spiData[2];

int main(void)
{
	pinSetup();	// setup VCC, GND and LED pins
  bc:	0e 94 59 00 	call	0xb2	; 0xb2 <pinSetup>
	i2c_init();	// setup TWI
  c0:	0e 94 48 00 	call	0x90	; 0x90 <i2c_init>
	spi_init_bitbanging();
  c4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <spi_init_bitbanging>
	sei();			// enable global interrupts
  c8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x1e>
  da:	00 00       	nop
	_delay_ms(1000);
    while (1) 
    {
		i2c_start();
		spiData[0]=0x49;
  dc:	c3 e0       	ldi	r28, 0x03	; 3
  de:	d1 e0       	ldi	r29, 0x01	; 1
  e0:	09 e4       	ldi	r16, 0x49	; 73
		spiData[1]=0x10;
  e2:	10 e1       	ldi	r17, 0x10	; 16
	spi_init_bitbanging();
	sei();			// enable global interrupts
	_delay_ms(1000);
    while (1) 
    {
		i2c_start();
  e4:	0e 94 55 00 	call	0xaa	; 0xaa <i2c_start>
		spiData[0]=0x49;
  e8:	08 83       	st	Y, r16
		spiData[1]=0x10;
  ea:	19 83       	std	Y+1, r17	; 0x01
		spi_sendBytes_bitbanging(spiData, 2);
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	ce 01       	movw	r24, r28
  f2:	0e 94 05 01 	call	0x20a	; 0x20a <spi_sendBytes_bitbanging>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	87 e5       	ldi	r24, 0x57	; 87
  f8:	92 e0       	ldi	r25, 0x02	; 2
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x3e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x44>
 100:	00 00       	nop
 102:	f0 cf       	rjmp	.-32     	; 0xe4 <main+0x28>

00000104 <__vector_24>:
		PORTC &= ~(_BV(GND_BIT));	// set GND pin to low
}


ISR(TWI_vect)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	static uint8_t i2cDataTemp[2];
	if((TWSR & 0xF8) == TW_START)					// start condition successfully transmitted
 11c:	80 91 b9 00 	lds	r24, 0x00B9
 120:	88 7f       	andi	r24, 0xF8	; 248
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	39 f4       	brne	.+14     	; 0x134 <__vector_24+0x30>
	{
		TWDR = 0b10011011;							// load address(1001101x) and read(1) into data register
 126:	8b e9       	ldi	r24, 0x9B	; 155
 128:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);				// start transmission of address
 12c:	85 e8       	ldi	r24, 0x85	; 133
 12e:	80 93 bc 00 	sts	0x00BC, r24
 132:	3b c0       	rjmp	.+118    	; 0x1aa <__vector_24+0xa6>
	}
	else if ( ((TW_STATUS & 0xF8) == TW_MT_SLA_ACK) || ((TW_STATUS & 0xF8) == TW_MR_SLA_ACK) ) // address+read/write acknowledged
 134:	80 91 b9 00 	lds	r24, 0x00B9
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	88 31       	cpi	r24, 0x18	; 24
 13c:	29 f0       	breq	.+10     	; 0x148 <__vector_24+0x44>
 13e:	80 91 b9 00 	lds	r24, 0x00B9
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	80 34       	cpi	r24, 0x40	; 64
 146:	21 f4       	brne	.+8      	; 0x150 <__vector_24+0x4c>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE); // start TWI module and acknowledge data after reception
 148:	85 ec       	ldi	r24, 0xC5	; 197
 14a:	80 93 bc 00 	sts	0x00BC, r24
 14e:	2d c0       	rjmp	.+90     	; 0x1aa <__vector_24+0xa6>
	}
	else /*if((TW_STATUS & 0xF8) == TW_MR_DATA_ACK)*/			// data received and acknowledge sent
	{
		static uint8_t byteNumber=0;
		i2cDataTemp[byteNumber] = TWDR;	// data structure from sensor, B1: 0 0 0 0  b10 b9 b8 b7       B2: b6 b5 b4 b3  b2 b1 x x
 150:	80 91 02 01 	lds	r24, 0x0102
 154:	90 91 bb 00 	lds	r25, 0x00BB
 158:	e8 2f       	mov	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	90 83       	st	Z, r25
		byteNumber++;
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 02 01 	sts	0x0102, r24
		if(byteNumber == 2)							// 2nd byte was sent -> send STOP
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	e1 f4       	brne	.+56     	; 0x1a4 <__vector_24+0xa0>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	// transmit STOP condition. disable with endless data acquiry
 16c:	84 e9       	ldi	r24, 0x94	; 148
 16e:	80 93 bc 00 	sts	0x00BC, r24
			//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE); // endless data acquiry enable, request 1st byte again
			byteNumber = 0;							// overwrite data the next time
 172:	10 92 02 01 	sts	0x0102, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 176:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON)			// write i2cData into global array
			{
				i2cData[0]=(0x3F & (i2cDataTemp[0]/4))|((uint8_t)(i2cDataTemp[1]*64));	// store data in right format
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	8c 91       	ld	r24, X
 180:	11 97       	sbiw	r26, 0x01	; 1
 182:	e5 e0       	ldi	r30, 0x05	; 5
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	9c 91       	ld	r25, X
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	28 2f       	mov	r18, r24
 18e:	22 95       	swap	r18
 190:	22 0f       	add	r18, r18
 192:	22 0f       	add	r18, r18
 194:	20 7c       	andi	r18, 0xC0	; 192
 196:	92 2b       	or	r25, r18
 198:	90 83       	st	Z, r25
				i2cData[1]=i2cDataTemp[1]/4;
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	81 83       	std	Z+1, r24	; 0x01
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 1a0:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <__vector_24+0xa6>
			}
			
		}
		else	// after transmission of 1st data byte
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE); // start TWI module for 2nd byte and NACK data after reception (signals end of reception)
 1a4:	85 e8       	ldi	r24, 0x85	; 133
 1a6:	80 93 bc 00 	sts	0x00BC, r24
		}
	}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <spi_init_bitbanging>:
unsigned char spi_sendSingleByte(unsigned char cData);


void spi_init_bitbanging(void)
{
	DDRD |=  ((1 << MOSI) | (1<<CLK)) ;	// set MOSI, CLK as output
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	83 60       	ori	r24, 0x03	; 3
 1c6:	8a b9       	out	0x0a, r24	; 10
	DDRB |=  (1 << nSS); // set nSS as output
 1c8:	26 9a       	sbi	0x04, 6	; 4
	DDRD &= (~(1 << MISO)); // set MISO as input
 1ca:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~((1 << MOSI) | (1 << CLK));	// set MOSI and CLK as idle low
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8c 7f       	andi	r24, 0xFC	; 252
 1d0:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << nSS);	// set nSS to high (slave not selected)
 1d2:	26 9a       	sbi	0x04, 6	; 4
 1d4:	08 95       	ret

000001d6 <spi_sendSingleByte>:
	spi_unselectSlave();
	return retData;
}

unsigned char spi_sendSingleByte(unsigned char cData)
{
 1d6:	28 e0       	ldi	r18, 0x08	; 8
 1d8:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char retData = 0x00;
 1da:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i<8; i++)
	{
		PORTD |= (1 << CLK);	// clock high (leading edge)
 1dc:	58 9a       	sbi	0x0b, 0	; 11
 1de:	00 00       	nop
		_delay_us(1);
		// set data bit
		if(cData & 0b10000000)
 1e0:	88 23       	and	r24, r24
 1e2:	14 f4       	brge	.+4      	; 0x1e8 <spi_sendSingleByte+0x12>
		PORTD |= (1 << MOSI);
 1e4:	59 9a       	sbi	0x0b, 1	; 11
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <spi_sendSingleByte+0x14>
		else
		PORTD &= (~(1 << MOSI));
 1e8:	59 98       	cbi	0x0b, 1	; 11
		cData = (unsigned char) (cData * 2);	// set pointer to next data bit
 1ea:	88 0f       	add	r24, r24
		PORTD &= (~(1 << CLK));	// clock low (sampling edge)
 1ec:	58 98       	cbi	0x0b, 0	; 11
		retData = retData * 2;
 1ee:	99 0f       	add	r25, r25
		if((PIND & (1 << MISO)))	// set retData bit according to MISO state
 1f0:	4b 99       	sbic	0x09, 3	; 9
		retData ++;
 1f2:	9f 5f       	subi	r25, 0xFF	; 255
 1f4:	00 00       	nop
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	31 09       	sbc	r19, r1
}

unsigned char spi_sendSingleByte(unsigned char cData)
{
	unsigned char retData = 0x00;
	for(int i = 0; i<8; i++)
 1fa:	81 f7       	brne	.-32     	; 0x1dc <spi_sendSingleByte+0x6>
		retData = retData * 2;
		if((PIND & (1 << MISO)))	// set retData bit according to MISO state
		retData ++;
		_delay_us(1);
	}
	PORTD &= (~(1 << MOSI));	// set MOSI idle low
 1fc:	59 98       	cbi	0x0b, 1	; 11
	return retData;
}
 1fe:	89 2f       	mov	r24, r25
 200:	08 95       	ret

00000202 <spi_selectSlave>:



void spi_selectSlave(void)
{
	PORTB &= (~(1 << nSS));	// select slave
 202:	2e 98       	cbi	0x05, 6	; 5
 204:	08 95       	ret

00000206 <spi_unselectSlave>:
}

void spi_unselectSlave(void)
{
	PORTB |= (1 << nSS);	// unselect slave
 206:	2e 9a       	sbi	0x05, 6	; 5
 208:	08 95       	ret

0000020a <spi_sendBytes_bitbanging>:
	spi_unselectSlave();
	return retData;
}

unsigned char* spi_sendBytes_bitbanging(unsigned char* cData, int length) // MSB first, clk idle low and MOSI idle low
{
 20a:	6f 92       	push	r6
 20c:	7f 92       	push	r7
 20e:	8f 92       	push	r8
 210:	9f 92       	push	r9
 212:	af 92       	push	r10
 214:	bf 92       	push	r11
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	3c 01       	movw	r6, r24
 22c:	5b 01       	movw	r10, r22
		retData[i] = cData[i];
		_delay_us(10);
	}
	spi_unselectSlave();
	return retData;
}
 22e:	8d b6       	in	r8, 0x3d	; 61
 230:	9e b6       	in	r9, 0x3e	; 62
	return retData;
}

unsigned char* spi_sendBytes_bitbanging(unsigned char* cData, int length) // MSB first, clk idle low and MOSI idle low
{
	unsigned char retData[length];
 232:	8d b7       	in	r24, 0x3d	; 61
 234:	9e b7       	in	r25, 0x3e	; 62
 236:	86 1b       	sub	r24, r22
 238:	97 0b       	sbc	r25, r23
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	9e bf       	out	0x3e, r25	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	8d bf       	out	0x3d, r24	; 61
 244:	ed b7       	in	r30, 0x3d	; 61
 246:	fe b7       	in	r31, 0x3e	; 62
 248:	31 96       	adiw	r30, 0x01	; 1
 24a:	6f 01       	movw	r12, r30
	spi_selectSlave();
 24c:	0e 94 01 01 	call	0x202	; 0x202 <spi_selectSlave>
 250:	00 00       	nop
	_delay_us(1);
	for(int i=0; i<length; i++)
 252:	1a 14       	cp	r1, r10
 254:	1b 04       	cpc	r1, r11
 256:	ac f4       	brge	.+42     	; 0x282 <spi_sendBytes_bitbanging+0x78>
 258:	83 01       	movw	r16, r6
 25a:	76 01       	movw	r14, r12
 25c:	a6 0c       	add	r10, r6
 25e:	b7 1c       	adc	r11, r7
	{
		cData[i] = spi_sendSingleByte(cData[i]);
 260:	f8 01       	movw	r30, r16
 262:	80 81       	ld	r24, Z
 264:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <spi_sendSingleByte>
 268:	f8 01       	movw	r30, r16
 26a:	81 93       	st	Z+, r24
 26c:	8f 01       	movw	r16, r30
		retData[i] = cData[i];
 26e:	f7 01       	movw	r30, r14
 270:	81 93       	st	Z+, r24
 272:	7f 01       	movw	r14, r30
 274:	f3 e0       	ldi	r31, 0x03	; 3
 276:	fa 95       	dec	r31
 278:	f1 f7       	brne	.-4      	; 0x276 <spi_sendBytes_bitbanging+0x6c>
 27a:	00 00       	nop
unsigned char* spi_sendBytes_bitbanging(unsigned char* cData, int length) // MSB first, clk idle low and MOSI idle low
{
	unsigned char retData[length];
	spi_selectSlave();
	_delay_us(1);
	for(int i=0; i<length; i++)
 27c:	0a 15       	cp	r16, r10
 27e:	1b 05       	cpc	r17, r11
 280:	79 f7       	brne	.-34     	; 0x260 <spi_sendBytes_bitbanging+0x56>
	{
		cData[i] = spi_sendSingleByte(cData[i]);
		retData[i] = cData[i];
		_delay_us(10);
	}
	spi_unselectSlave();
 282:	0e 94 03 01 	call	0x206	; 0x206 <spi_unselectSlave>
	return retData;
}
 286:	c6 01       	movw	r24, r12
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	9e be       	out	0x3e, r9	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	8d be       	out	0x3d, r8	; 61
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	df 90       	pop	r13
 2a0:	cf 90       	pop	r12
 2a2:	bf 90       	pop	r11
 2a4:	af 90       	pop	r10
 2a6:	9f 90       	pop	r9
 2a8:	8f 90       	pop	r8
 2aa:	7f 90       	pop	r7
 2ac:	6f 90       	pop	r6
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
