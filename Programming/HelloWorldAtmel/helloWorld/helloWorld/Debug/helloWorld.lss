
helloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7a  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051a  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061c  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3e  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  80:	e8 eb       	ldi	r30, 0xB8	; 184
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8a ef       	ldi	r24, 0xFA	; 250
#define Prescaler 12
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
  86:	80 83       	st	Z, r24
	OSCCAL = 0xFF;				// select  highest possible frequency with RC generator
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 93 66 00 	sts	0x0066, r24
	CLKPR = 0b10000000;
  8e:	a1 e6       	ldi	r26, 0x61	; 97
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	8c 93       	st	X, r24
	CLKPR = 0b10000000;
  96:	8c 93       	st	X, r24
	TWBR = 12;		// SCL frequency 300kHz
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	80 83       	st	Z, r24
  9c:	08 95       	ret

0000009e <ioInit>:
* #define GND_BIT PC3
* #define VCC_BIT PC2
*/
void ioInit(void)
{
		DDRC |= (1 << VCC_BIT);
  9e:	3a 9a       	sbi	0x07, 2	; 7
		DDRC |= (1 << GND_BIT);		// set pins to output
  a0:	3b 9a       	sbi	0x07, 3	; 7
		
		PORTC |= _BV(VCC_BIT);		// set VCC pin to high
  a2:	42 9a       	sbi	0x08, 2	; 8
		PORTC &= ~(_BV(GND_BIT));	// set GND pin to low
  a4:	43 98       	cbi	0x08, 3	; 8
  a6:	08 95       	ret

000000a8 <main>:
//#define LED_LOW PORTC &= ~(_BV(LED_BIT))

void ioInit(void);

void main(void) 
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <main+0x6>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	//uint8_t* data;
	//(uint8_t*) malloc(sizeof(uint8_t) * 2);
	uint8_t data[2];
	ioInit();
  b2:	0e 94 4f 00 	call	0x9e	; 0x9e <ioInit>
	i2c_init();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
	spi_init_bitbanging();
  ba:	0e 94 95 00 	call	0x12a	; 0x12a <spi_init_bitbanging>
	spi_init();
  be:	0e 94 74 00 	call	0xe8	; 0xe8 <spi_init>
	while (1) 
	{
		//i2c_receive(0b10011010,data, 2);	// get 2 bytes of sensor data
		//i2c_stop();						// single conversion
		spi_selectSlave();
		data[0]=0x31;
  c2:	11 e3       	ldi	r17, 0x31	; 49
	
	while (1) 
	{
		//i2c_receive(0b10011010,data, 2);	// get 2 bytes of sensor data
		//i2c_stop();						// single conversion
		spi_selectSlave();
  c4:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_selectSlave>
		data[0]=0x31;
  c8:	19 83       	std	Y+1, r17	; 0x01
		data[1]= 0x00;
  ca:	1a 82       	std	Y+2, r1	; 0x02
		spi_writeBytes(data, 2);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 7d 00 	call	0xfa	; 0xfa <spi_writeBytes>
		spi_unselectSlave();
  d6:	0e 94 a1 00 	call	0x142	; 0x142 <spi_unselectSlave>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e1       	ldi	r24, 0x1F	; 31
  dc:	9e e4       	ldi	r25, 0x4E	; 78
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x36>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x3c>
  e4:	00 00       	nop
  e6:	ee cf       	rjmp	.-36     	; 0xc4 <main+0x1c>

000000e8 <spi_init>:
#define SCL	PB5


void  spi_init( ) 
{
	DDRB |=  ((1<<MOSI) | (1<<SCL) | (1<<nSS)) ;	// set MOSI, SCL, SS as output
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	8c 62       	ori	r24, 0x2C	; 44
  ec:	84 b9       	out	0x04, r24	; 4
	DDRB &=  (~(1<<MISO));	// set MISO as input
  ee:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X)|(1<<SPR0)|(1<<CPHA);    // setup SPI: Master mode, SCK phase low, SCK idle low, SCK = fcpu/2
  f0:	85 e5       	ldi	r24, 0x55	; 85
  f2:	8c bd       	out	0x2c, r24	; 44
	//SPCR &= ~((1<<CPOL) | (1<<DORD) | (1<<SPR1));				// setup SPI: MSB first, SCK idle low
	SPSR = 0x00;
  f4:	1d bc       	out	0x2d, r1	; 45
	PORTB |= _BV(nSS);		// set SS to high -> slave not selected
  f6:	2a 9a       	sbi	0x05, 2	; 5
  f8:	08 95       	ret

000000fa <spi_writeBytes>:
	return SPDR;						// read data -> clear SPIF
}

void spi_writeBytes(uint8_t* cData, uint8_t numOfBytes)
{
	PORTB &= ~(_BV(nSS));		// set SS to low -> slave selected
  fa:	2a 98       	cbi	0x05, 2	; 5
	SPCR |= (1<<MSTR);
  fc:	2c b5       	in	r18, 0x2c	; 44
  fe:	20 61       	ori	r18, 0x10	; 16
 100:	2c bd       	out	0x2c, r18	; 44
	int i;
	for(i=0;i<numOfBytes;i++)
 102:	66 23       	and	r22, r22
 104:	81 f0       	breq	.+32     	; 0x126 <spi_writeBytes+0x2c>
 106:	fc 01       	movw	r30, r24
 108:	9c 01       	movw	r18, r24
 10a:	26 0f       	add	r18, r22
 10c:	31 1d       	adc	r19, r1
 10e:	df 01       	movw	r26, r30
	{
		SPDR = cData[i];
 110:	90 81       	ld	r25, Z
 112:	9e bd       	out	0x2e, r25	; 46
		while ( !(SPSR & (1<<SPIF)));		// wait for transmission to complete
 114:	0d b4       	in	r0, 0x2d	; 45
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <spi_writeBytes+0x1a>
		cData[i] = SPDR;					// read data -> clear SPIF
 11a:	9e b5       	in	r25, 0x2e	; 46
 11c:	9c 93       	st	X, r25
 11e:	31 96       	adiw	r30, 0x01	; 1
void spi_writeBytes(uint8_t* cData, uint8_t numOfBytes)
{
	PORTB &= ~(_BV(nSS));		// set SS to low -> slave selected
	SPCR |= (1<<MSTR);
	int i;
	for(i=0;i<numOfBytes;i++)
 120:	e2 17       	cp	r30, r18
 122:	f3 07       	cpc	r31, r19
 124:	a1 f7       	brne	.-24     	; 0x10e <spi_writeBytes+0x14>
	{
		SPDR = cData[i];
		while ( !(SPSR & (1<<SPIF)));		// wait for transmission to complete
		cData[i] = SPDR;					// read data -> clear SPIF
	}
	PORTB |= _BV(nSS);		// set SS to high -> slave not selected
 126:	2a 9a       	sbi	0x05, 2	; 5
 128:	08 95       	ret

0000012a <spi_init_bitbanging>:
unsigned char spi_sendSingleByte(unsigned char cData);


void spi_init_bitbanging(void)
{
	DDRD |=  ((1 << MOSI) | (1<<CLK)) ;	// set MOSI, CLK as output
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	8a b9       	out	0x0a, r24	; 10
	DDRB |=  (1 << nSS); // set nSS as output
 130:	26 9a       	sbi	0x04, 6	; 4
	DDRD &= (~(1 << MISO)); // set MISO as input
 132:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~((1 << MOSI) | (1 << CLK));	// set MOSI and CLK as idle low
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8c 7f       	andi	r24, 0xFC	; 252
 138:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << nSS);	// set nSS to high (slave not selected)
 13a:	26 9a       	sbi	0x04, 6	; 4
 13c:	08 95       	ret

0000013e <spi_selectSlave>:



void spi_selectSlave(void)
{
	PORTB &= (~(1 << nSS));	// select slave
 13e:	2e 98       	cbi	0x05, 6	; 5
 140:	08 95       	ret

00000142 <spi_unselectSlave>:
}

void spi_unselectSlave(void)
{
	PORTB |= (1 << nSS);	// unselect slave
 142:	2e 9a       	sbi	0x05, 6	; 5
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
