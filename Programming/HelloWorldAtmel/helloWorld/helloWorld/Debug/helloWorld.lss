
helloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037e  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000418  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000743  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  80:	e8 eb       	ldi	r30, 0xB8	; 184
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8a ef       	ldi	r24, 0xFA	; 250
#define Prescaler 12
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
  86:	80 83       	st	Z, r24
	OSCCAL = 0xFF;				// select  highest possible frequency with RC generator
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 93 66 00 	sts	0x0066, r24
	CLKPR = 0b10000000;
  8e:	a1 e6       	ldi	r26, 0x61	; 97
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	8c 93       	st	X, r24
	CLKPR = 0b10000000;
  96:	8c 93       	st	X, r24
	TWBR = 12;		// SCL frequency 300kHz
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	80 83       	st	Z, r24
  9c:	08 95       	ret

0000009e <main>:
//#define LED_LOW PORTC &= ~(_BV(LED_BIT))



void main(void) 
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	//uint8_t* data;
	//(uint8_t*) malloc(sizeof(uint8_t) * 2);
	uint8_t data[2];
	
	i2c_init();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
	spi_init();
  ac:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_init>
	DDRC |= (1 << LED_BIT);
  b0:	3a 9a       	sbi	0x07, 2	; 7
	DDRC |= (1 << VCC_BIT);
  b2:	39 9a       	sbi	0x07, 1	; 7
	DDRB |= (1 << GND_BIT);		// set pins to output
  b4:	26 9a       	sbi	0x04, 6	; 4
	
	PORTC |= _BV(VCC_BIT);		// set VCC pin to high
  b6:	41 9a       	sbi	0x08, 1	; 8
	PORTB &= ~(_BV(GND_BIT));	// set GND pin to low
  b8:	2e 98       	cbi	0x05, 6	; 5
		//i2c_stop();							// single conversion
		PORTC ^= _BV(LED_BIT);				// toggle LED
		_delay_ms(1);
		*/
		
		data[0]=0x49;
  ba:	09 e4       	ldi	r16, 0x49	; 73
		spi_writeBytes(data, 2);
		//data[0]=0x00;
		//data[1]=0x00;
		//spi_writeBytes(data, 2);
		
		PORTC ^= _BV(LED_BIT);				// toggle LED
  bc:	14 e0       	ldi	r17, 0x04	; 4
		//i2c_stop();							// single conversion
		PORTC ^= _BV(LED_BIT);				// toggle LED
		_delay_ms(1);
		*/
		
		data[0]=0x49;
  be:	09 83       	std	Y+1, r16	; 0x01
		data[1]=0x00;
  c0:	1a 82       	std	Y+2, r1	; 0x02
		spi_writeSingle(0xFF);
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	0e 94 7e 00 	call	0xfc	; 0xfc <spi_writeSingle>
		spi_writeBytes(data, 2);
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 84 00 	call	0x108	; 0x108 <spi_writeBytes>
		//data[0]=0x00;
		//data[1]=0x00;
		//spi_writeBytes(data, 2);
		
		PORTC ^= _BV(LED_BIT);				// toggle LED
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	81 27       	eor	r24, r17
  d6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x3e>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x44>
  e2:	00 00       	nop
  e4:	ec cf       	rjmp	.-40     	; 0xbe <main+0x20>

000000e6 <spi_init>:
#define DD_SCL	PB5


void  spi_init( ) 
{
	DDRB |=  ((1<<DD_MOSI) | (1<<DD_SCL) | (1<<DD_nSS)) ;	// set MOSI, SCL, SS as output
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	8c 62       	ori	r24, 0x2C	; 44
  ea:	84 b9       	out	0x04, r24	; 4
	DDRB &=  ~(1<<DD_MISO) ;	// set MISO as input
  ec:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X)|(1<<SPR0)|(1<<CPHA);    // setup SPI: Master mode, SCK phase low, SCK idle low, SCK = fcpu/2
  ee:	85 e5       	ldi	r24, 0x55	; 85
  f0:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1<<CPOL) | (1<<DORD) | (1<<SPR1));				// setup SPI: MSB first, SCK idle low
  f2:	8c b5       	in	r24, 0x2c	; 44
  f4:	85 7d       	andi	r24, 0xD5	; 213
  f6:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00;
  f8:	1d bc       	out	0x2d, r1	; 45
  fa:	08 95       	ret

000000fc <spi_writeSingle>:
}

uint8_t spi_writeSingle(uint8_t cData) 
{
	SPDR = cData;
  fc:	8e bd       	out	0x2e, r24	; 46
	while ( !(SPSR & (1<<SPIF)));		// wait for transmission to complete
  fe:	0d b4       	in	r0, 0x2d	; 45
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <spi_writeSingle+0x2>
	return SPDR;						// read data -> clear SPIF
 104:	8e b5       	in	r24, 0x2e	; 46
}
 106:	08 95       	ret

00000108 <spi_writeBytes>:

void spi_writeBytes(uint8_t* cData, uint8_t numOfBytes)
{
	SPCR |= (1<<MSTR);
 108:	2c b5       	in	r18, 0x2c	; 44
 10a:	20 61       	ori	r18, 0x10	; 16
 10c:	2c bd       	out	0x2c, r18	; 44
	int i;
	for(i=0;i<numOfBytes;i++)
 10e:	66 23       	and	r22, r22
 110:	81 f0       	breq	.+32     	; 0x132 <spi_writeBytes+0x2a>
 112:	fc 01       	movw	r30, r24
 114:	9c 01       	movw	r18, r24
 116:	26 0f       	add	r18, r22
 118:	31 1d       	adc	r19, r1
 11a:	df 01       	movw	r26, r30
	{
		SPDR = cData[i];
 11c:	90 81       	ld	r25, Z
 11e:	9e bd       	out	0x2e, r25	; 46
		while ( !(SPSR & (1<<SPIF)));		// wait for transmission to complete
 120:	0d b4       	in	r0, 0x2d	; 45
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <spi_writeBytes+0x18>
		cData[i] = SPDR;					// read data -> clear SPIF
 126:	9e b5       	in	r25, 0x2e	; 46
 128:	9c 93       	st	X, r25
 12a:	31 96       	adiw	r30, 0x01	; 1

void spi_writeBytes(uint8_t* cData, uint8_t numOfBytes)
{
	SPCR |= (1<<MSTR);
	int i;
	for(i=0;i<numOfBytes;i++)
 12c:	e2 17       	cp	r30, r18
 12e:	f3 07       	cpc	r31, r19
 130:	a1 f7       	brne	.-24     	; 0x11a <spi_writeBytes+0x12>
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
