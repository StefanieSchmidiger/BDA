
helloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a5  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000443  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000512  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009fb  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  80:	e8 eb       	ldi	r30, 0xB8	; 184
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8a ef       	ldi	r24, 0xFA	; 250
#define Prescaler 12
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
  86:	80 83       	st	Z, r24
	OSCCAL = 0xFF;				// select  highest possible frequency with RC generator
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 93 66 00 	sts	0x0066, r24
	CLKPR = 0b10000000;
  8e:	a1 e6       	ldi	r26, 0x61	; 97
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	8c 93       	st	X, r24
	CLKPR = 0b10000000;
  96:	8c 93       	st	X, r24
	TWBR = 12;		// SCL frequency 300kHz
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	80 83       	st	Z, r24
  9c:	08 95       	ret

0000009e <main>:
//#define LED_LOW PORTC &= ~(_BV(LED_BIT))



void main(void) 
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	//uint8_t* data;
	//(uint8_t*) malloc(sizeof(uint8_t) * 2);
	uint8_t data[2];
	
	i2c_init();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
	spi_init_bitbanging();
  ac:	0e 94 7d 00 	call	0xfa	; 0xfa <spi_init_bitbanging>
	
	DDRC |= (1 << VCC_BIT);
  b0:	3a 9a       	sbi	0x07, 2	; 7
	DDRC |= (1 << GND_BIT);		// set pins to output
  b2:	3b 9a       	sbi	0x07, 3	; 7
	
	
	PORTC |= _BV(VCC_BIT);		// set VCC pin to high
  b4:	42 9a       	sbi	0x08, 2	; 8
	PORTC &= ~(_BV(GND_BIT));	// set GND pin to low
  b6:	43 98       	cbi	0x08, 3	; 8
		i2c_receive(0b10011010,data, 2);	// get 2 bytes of sensor data
		//i2c_stop();							// single conversion
		PORTC ^= _BV(LED_BIT);				// toggle LED
		_delay_ms(1);
		*/
		data[0]=0x04;
  b8:	68 94       	set
  ba:	ff 24       	eor	r15, r15
  bc:	f2 f8       	bld	r15, 2
		data[1]= 0x09;
  be:	09 e0       	ldi	r16, 0x09	; 9
		spi_sendBytes_bitbanging(data, 2);
		_delay_us(500);
		spi_sendBytes_bitbanging(data, 2);
		data[0] = 0x49;
  c0:	19 e4       	ldi	r17, 0x49	; 73
		i2c_receive(0b10011010,data, 2);	// get 2 bytes of sensor data
		//i2c_stop();							// single conversion
		PORTC ^= _BV(LED_BIT);				// toggle LED
		_delay_ms(1);
		*/
		data[0]=0x04;
  c2:	f9 82       	std	Y+1, r15	; 0x01
		data[1]= 0x09;
  c4:	0a 83       	std	Y+2, r16	; 0x02
		spi_sendBytes_bitbanging(data, 2);
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 a1 00 	call	0x142	; 0x142 <spi_sendBytes_bitbanging>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	87 ee       	ldi	r24, 0xE7	; 231
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x38>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3e>
  dc:	00 00       	nop
		_delay_us(500);
		spi_sendBytes_bitbanging(data, 2);
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 a1 00 	call	0x142	; 0x142 <spi_sendBytes_bitbanging>
		data[0] = 0x49;
  ea:	19 83       	std	Y+1, r17	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e1       	ldi	r24, 0x1F	; 31
  ee:	9e e4       	ldi	r25, 0x4E	; 78
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x52>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x58>
  f6:	00 00       	nop
  f8:	e4 cf       	rjmp	.-56     	; 0xc2 <main+0x24>

000000fa <spi_init_bitbanging>:
unsigned char spi_sendSingleByte(unsigned char cData);


void spi_init_bitbanging(void)
{
	DDRD |=  ((1 << MOSI) | (1<<CLK)) ;	// set MOSI, CLK as output
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	8a b9       	out	0x0a, r24	; 10
	DDRB |=  (1 << nSS); // set nSS as output
 100:	26 9a       	sbi	0x04, 6	; 4
	DDRD &= (~(1 << MISO)); // set MISO as input
 102:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~((1 << MOSI) | (1 << CLK));	// set MOSI and CLK as idle low
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << nSS);	// set nSS to high (slave not selected)
 10a:	26 9a       	sbi	0x04, 6	; 4
 10c:	08 95       	ret

0000010e <spi_sendSingleByte>:
	spi_unselectSlave();
	return retData;
}

unsigned char spi_sendSingleByte(unsigned char cData)
{
 10e:	28 e0       	ldi	r18, 0x08	; 8
 110:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char retData = 0x00;
 112:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i<8; i++)
	{
		PORTD |= (1 << CLK);	// clock high (leading edge)
 114:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	00 00       	nop
		_delay_us(1);
		// set data bit
		if(cData & 0b10000000)
 118:	88 23       	and	r24, r24
 11a:	14 f4       	brge	.+4      	; 0x120 <spi_sendSingleByte+0x12>
		PORTD |= (1 << MOSI);
 11c:	59 9a       	sbi	0x0b, 1	; 11
 11e:	01 c0       	rjmp	.+2      	; 0x122 <spi_sendSingleByte+0x14>
		else
		PORTD &= (~(1 << MOSI));
 120:	59 98       	cbi	0x0b, 1	; 11
		cData = (unsigned char) (cData * 2);	// set pointer to next data bit
 122:	88 0f       	add	r24, r24
		PORTD &= (~(1 << CLK));	// clock low (sampling edge)
 124:	58 98       	cbi	0x0b, 0	; 11
		retData = retData * 2;
 126:	99 0f       	add	r25, r25
		if((PIND & (1 << MISO)))	// set retData bit according to MISO state
 128:	4b 99       	sbic	0x09, 3	; 9
		retData ++;
 12a:	9f 5f       	subi	r25, 0xFF	; 255
 12c:	00 00       	nop
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	31 09       	sbc	r19, r1
}

unsigned char spi_sendSingleByte(unsigned char cData)
{
	unsigned char retData = 0x00;
	for(int i = 0; i<8; i++)
 132:	81 f7       	brne	.-32     	; 0x114 <spi_sendSingleByte+0x6>
		retData = retData * 2;
		if((PIND & (1 << MISO)))	// set retData bit according to MISO state
		retData ++;
		_delay_us(1);
	}
	PORTD &= (~(1 << MOSI));	// set MOSI idle low
 134:	59 98       	cbi	0x0b, 1	; 11
	return retData;
}
 136:	89 2f       	mov	r24, r25
 138:	08 95       	ret

0000013a <spi_selectSlave>:



void spi_selectSlave(void)
{
	PORTB &= (~(1 << nSS));	// select slave
 13a:	2e 98       	cbi	0x05, 6	; 5
 13c:	08 95       	ret

0000013e <spi_unselectSlave>:
}

void spi_unselectSlave(void)
{
	PORTB |= (1 << nSS);	// unselect slave
 13e:	2e 9a       	sbi	0x05, 6	; 5
 140:	08 95       	ret

00000142 <spi_sendBytes_bitbanging>:
	spi_unselectSlave();
	return retData;
}

unsigned char* spi_sendBytes_bitbanging(unsigned char* cData, int length) // MSB first, clk idle low and MOSI idle low
{
 142:	6f 92       	push	r6
 144:	7f 92       	push	r7
 146:	8f 92       	push	r8
 148:	9f 92       	push	r9
 14a:	af 92       	push	r10
 14c:	bf 92       	push	r11
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	3c 01       	movw	r6, r24
 164:	5b 01       	movw	r10, r22
		retData[i] = cData[i];
		_delay_us(10);
	}
	spi_unselectSlave();
	return retData;
}
 166:	8d b6       	in	r8, 0x3d	; 61
 168:	9e b6       	in	r9, 0x3e	; 62
	return retData;
}

unsigned char* spi_sendBytes_bitbanging(unsigned char* cData, int length) // MSB first, clk idle low and MOSI idle low
{
	unsigned char retData[length];
 16a:	8d b7       	in	r24, 0x3d	; 61
 16c:	9e b7       	in	r25, 0x3e	; 62
 16e:	86 1b       	sub	r24, r22
 170:	97 0b       	sbc	r25, r23
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	9e bf       	out	0x3e, r25	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	8d bf       	out	0x3d, r24	; 61
 17c:	ed b7       	in	r30, 0x3d	; 61
 17e:	fe b7       	in	r31, 0x3e	; 62
 180:	31 96       	adiw	r30, 0x01	; 1
 182:	6f 01       	movw	r12, r30
	spi_selectSlave();
 184:	0e 94 9d 00 	call	0x13a	; 0x13a <spi_selectSlave>
 188:	00 00       	nop
	_delay_us(1);
	for(int i=0; i<length; i++)
 18a:	1a 14       	cp	r1, r10
 18c:	1b 04       	cpc	r1, r11
 18e:	ac f4       	brge	.+42     	; 0x1ba <spi_sendBytes_bitbanging+0x78>
 190:	83 01       	movw	r16, r6
 192:	76 01       	movw	r14, r12
 194:	a6 0c       	add	r10, r6
 196:	b7 1c       	adc	r11, r7
	{
		cData[i] = spi_sendSingleByte(cData[i]);
 198:	f8 01       	movw	r30, r16
 19a:	80 81       	ld	r24, Z
 19c:	0e 94 87 00 	call	0x10e	; 0x10e <spi_sendSingleByte>
 1a0:	f8 01       	movw	r30, r16
 1a2:	81 93       	st	Z+, r24
 1a4:	8f 01       	movw	r16, r30
		retData[i] = cData[i];
 1a6:	f7 01       	movw	r30, r14
 1a8:	81 93       	st	Z+, r24
 1aa:	7f 01       	movw	r14, r30
 1ac:	f3 e0       	ldi	r31, 0x03	; 3
 1ae:	fa 95       	dec	r31
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <spi_sendBytes_bitbanging+0x6c>
 1b2:	00 00       	nop
unsigned char* spi_sendBytes_bitbanging(unsigned char* cData, int length) // MSB first, clk idle low and MOSI idle low
{
	unsigned char retData[length];
	spi_selectSlave();
	_delay_us(1);
	for(int i=0; i<length; i++)
 1b4:	0a 15       	cp	r16, r10
 1b6:	1b 05       	cpc	r17, r11
 1b8:	79 f7       	brne	.-34     	; 0x198 <spi_sendBytes_bitbanging+0x56>
	{
		cData[i] = spi_sendSingleByte(cData[i]);
		retData[i] = cData[i];
		_delay_us(10);
	}
	spi_unselectSlave();
 1ba:	0e 94 9f 00 	call	0x13e	; 0x13e <spi_unselectSlave>
	return retData;
}
 1be:	c6 01       	movw	r24, r12
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	9e be       	out	0x3e, r9	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	8d be       	out	0x3d, r8	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	af 90       	pop	r10
 1de:	9f 90       	pop	r9
 1e0:	8f 90       	pop	r8
 1e2:	7f 90       	pop	r7
 1e4:	6f 90       	pop	r6
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
