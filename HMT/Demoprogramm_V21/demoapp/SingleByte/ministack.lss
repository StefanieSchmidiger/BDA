
ministack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000153a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001480  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800100  00800100  00001534  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .signature    00000003  00840000  00840000  00001537  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000800a  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013a7  00000000  00000000  000096a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000eb3  00000000  00000000  0000aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000258  00000000  00000000  0000b900  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002bb2  00000000  00000000  0000bb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001f04  00000000  00000000  0000e70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000180  00000000  00000000  0001060e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e8 c0       	rjmp	.+464    	; 0x1d2 <__ctors_end>
       2:	00 00       	nop
       4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c6       	rjmp	.+3244   	; 0xcbe <__vector_4>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ed c0       	rjmp	.+474    	; 0x20c <__bad_interrupt>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c1       	rjmp	.+838    	; 0x384 <__vector_15>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	d3 c0       	rjmp	.+422    	; 0x20c <__bad_interrupt>
      66:	00 00       	nop
      68:	d7 03       	fmuls	r21, r23
      6a:	ed 02       	muls	r30, r29
      6c:	ed 02       	muls	r30, r29
      6e:	94 02       	muls	r25, r20
      70:	a4 02       	muls	r26, r20
      72:	f3 02       	muls	r31, r19
      74:	1d 03       	fmul	r17, r21
      76:	62 03       	mulsu	r22, r18
      78:	89 03       	fmulsu	r16, r17
      7a:	89 03       	fmulsu	r16, r17
      7c:	b1 03       	fmuls	r19, r17
      7e:	c1 03       	fmuls	r20, r17
      80:	ff 04       	cpc	r15, r15
      82:	0a 04       	cpc	r0, r10
      84:	0a 04       	cpc	r0, r10
      86:	ec 03       	fmulsu	r22, r20
      88:	0c 04       	cpc	r0, r12
      8a:	48 04       	cpc	r4, r8
      8c:	72 04       	cpc	r7, r2
      8e:	b7 04       	cpc	r11, r7
      90:	d9 04       	cpc	r13, r9
      92:	d9 04       	cpc	r13, r9
      94:	d9 04       	cpc	r13, r9
      96:	e9 04       	cpc	r14, r9
      98:	29 06       	cpc	r2, r25
      9a:	32 05       	cpc	r19, r2
      9c:	32 05       	cpc	r19, r2
      9e:	14 05       	cpc	r17, r4
      a0:	34 05       	cpc	r19, r4
      a2:	70 05       	cpc	r23, r0
      a4:	9a 05       	cpc	r25, r10
      a6:	df 05       	cpc	r29, r15
      a8:	01 06       	cpc	r0, r17
      aa:	01 06       	cpc	r0, r17
      ac:	01 06       	cpc	r0, r17
      ae:	11 06       	cpc	r1, r17

000000b0 <__trampolines_end>:
      b0:	2d 3c       	cpi	r18, 0xCD	; 205
      b2:	0c 1d       	adc	r16, r12
      b4:	3f 2e       	mov	r3, r31
      b6:	1e 0f       	add	r17, r30
      b8:	0f 1e       	adc	r0, r31
      ba:	2e 3f       	cpi	r18, 0xFE	; 254
      bc:	1d 0c       	add	r1, r13
      be:	3c 2d       	mov	r19, r12
      c0:	39 28       	or	r3, r9
      c2:	18 09       	sbc	r17, r8
      c4:	2b 3a       	cpi	r18, 0xAB	; 171
      c6:	0a 1b       	sub	r16, r26
      c8:	1b 0a       	sbc	r1, r27
      ca:	3a 2b       	or	r19, r26
      cc:	09 18       	sub	r0, r9
      ce:	28 39       	cpi	r18, 0x98	; 152
      d0:	09 18       	sub	r0, r9
      d2:	28 39       	cpi	r18, 0x98	; 152
      d4:	1b 0a       	sbc	r1, r27
      d6:	3a 2b       	or	r19, r26
      d8:	2b 3a       	cpi	r18, 0xAB	; 171
      da:	0a 1b       	sub	r16, r26
      dc:	39 28       	or	r3, r9
      de:	18 09       	sbc	r17, r8
      e0:	1d 0c       	add	r1, r13
      e2:	3c 2d       	mov	r19, r12
      e4:	0f 1e       	adc	r0, r31
      e6:	2e 3f       	cpi	r18, 0xFE	; 254
      e8:	3f 2e       	mov	r3, r31
      ea:	1e 0f       	add	r17, r30
      ec:	2d 3c       	cpi	r18, 0xCD	; 205
      ee:	0c 1d       	adc	r16, r12
      f0:	35 24       	eor	r3, r5
      f2:	14 05       	cpc	r17, r4
      f4:	27 36       	cpi	r18, 0x67	; 103
      f6:	06 17       	cp	r16, r22
      f8:	17 06       	cpc	r1, r23
      fa:	36 27       	eor	r19, r22
      fc:	05 14       	cp	r0, r5
      fe:	24 35       	cpi	r18, 0x54	; 84
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	00 11       	cpse	r16, r0
     104:	33 22       	and	r3, r19
     106:	12 03       	mulsu	r17, r18
     108:	03 12       	cpse	r0, r19
     10a:	22 33       	cpi	r18, 0x32	; 50
     10c:	11 00       	.word	0x0011	; ????
     10e:	30 21       	and	r19, r0
     110:	11 00       	.word	0x0011	; ????
     112:	30 21       	and	r19, r0
     114:	03 12       	cpse	r0, r19
     116:	22 33       	cpi	r18, 0x32	; 50
     118:	33 22       	and	r3, r19
     11a:	12 03       	mulsu	r17, r18
     11c:	21 30       	cpi	r18, 0x01	; 1
     11e:	00 11       	cpse	r16, r0
     120:	05 14       	cp	r0, r5
     122:	24 35       	cpi	r18, 0x54	; 84
     124:	17 06       	cpc	r1, r23
     126:	36 27       	eor	r19, r22
     128:	27 36       	cpi	r18, 0x67	; 103
     12a:	06 17       	cp	r16, r22
     12c:	35 24       	eor	r3, r5
     12e:	14 05       	cpc	r17, r4
	...

000001b0 <_ZZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18configureStackBaseEvE19directDefaultConfig>:
     1b0:	00 00 14 00 11 48 08 01 a6 12 34 56 00 00 00 00     .....H....4V....
	...

000001d0 <__ctors_start>:
     1d0:	fc 06       	cpc	r15, r28

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d8 e0       	ldi	r29, 0x08	; 8
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_clear_bss>:
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a0 35       	cpi	r26, 0x50	; 80
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>

000001ee <__do_global_ctors>:
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c9 ee       	ldi	r28, 0xE9	; 233
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	04 c0       	rjmp	.+8      	; 0x1fe <__do_global_ctors+0x10>
     1f6:	21 97       	sbiw	r28, 0x01	; 1
     1f8:	fe 01       	movw	r30, r28
     1fa:	0e 94 2f 0a 	call	0x145e	; 0x145e <__tablejump2__>
     1fe:	c8 3e       	cpi	r28, 0xE8	; 232
     200:	d1 07       	cpc	r29, r17
     202:	c9 f7       	brne	.-14     	; 0x1f6 <__do_global_ctors+0x8>
     204:	0e 94 98 09 	call	0x1330	; 0x1330 <main>
     208:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>:
template <class T, int PDI, int PDO, class SpiSsHndlr>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::odRead(uint8_t channel, uint8_t address)
{
    uint8_t data;

    switch (channel)
     20e:	80 32       	cpi	r24, 0x20	; 32
     210:	19 f0       	breq	.+6      	; 0x218 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0xa>
     212:	80 34       	cpi	r24, 0x40	; 64
     214:	31 f0       	breq	.+12     	; 0x222 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x14>
     216:	0d c0       	rjmp	.+26     	; 0x232 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x24>
    {
    case IoLink::MC_CHNL_PAGE:  // Direct parameter page channel
        data = directParameter[address];
     218:	e6 2f       	mov	r30, r22
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ea 5d       	subi	r30, 0xDA	; 218
     21e:	fe 4f       	sbci	r31, 0xFE	; 254
     220:	06 c0       	rjmp	.+12     	; 0x22e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x20>
        break;

    case IoLink::MC_CHNL_DIAG:  // Diagnosis channel
        if (address > 6)
     222:	67 30       	cpi	r22, 0x07	; 7
     224:	38 f4       	brcc	.+14     	; 0x234 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x26>
            break;

        data = eventPage[address];
     226:	e6 2f       	mov	r30, r22
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	e2 5e       	subi	r30, 0xE2	; 226
     22c:	fe 4f       	sbci	r31, 0xFE	; 254
     22e:	90 81       	ld	r25, Z
     230:	01 c0       	rjmp	.+2      	; 0x234 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x26>
        break;

    default:            // SPDU and process data not handled
//        ASSERT(address == IoLink::MC_ADDR_ISDU_IDLE1 || address == IoLink::MC_ADDR_ISDU_IDLE2);
        data = 0;
     232:	90 e0       	ldi	r25, 0x00	; 0
    }

    return data;
}
     234:	89 2f       	mov	r24, r25
     236:	08 95       	ret

00000238 <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7>:
     * Restarts a stopped timer
     * 
     */
    void inline restartTimer()
    {
        if (TCCR0B == 0)
     238:	85 b5       	in	r24, 0x25	; 37
     23a:	81 11       	cpse	r24, r1
     23c:	03 c0       	rjmp	.+6      	; 0x244 <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7+0xc>
           TCCR0B = _tccr0bRecord;          
     23e:	80 91 1c 01 	lds	r24, 0x011C
     242:	85 bd       	out	0x25, r24	; 37
     244:	08 95       	ret

00000246 <_ZN6IoLink17calculateChecksumEhh>:
            0x11, 0x00, 0x30, 0x21, 0x03, 0x12, 0x22, 0x33, 0x33, 0x22, 0x12, 0x03, 0x21, 0x30, 0x00, 0x11,
            0x05, 0x14, 0x24, 0x35, 0x17, 0x06, 0x36, 0x27, 0x27, 0x36, 0x06, 0x17, 0x35, 0x24, 0x14, 0x05
        };

        // include CKT octet with Checksum bits (0..6) set to "0" (see A.1.6)
        ckt &= CKT_TYPE_MASK;
     246:	60 7c       	andi	r22, 0xC0	; 192
        checksum8 ^= ckt;
     248:	86 27       	eor	r24, r22

        // fold checksum8 at 0x80
        if (checksum8 >= 0x80)
     24a:	87 fd       	sbrc	r24, 7
        {
            checksum8 = ~checksum8;
     24c:	80 95       	com	r24
            checksum8 = ((checksum8 >> 1) & 0xf8) | (checksum8 & 0x07);
        }
#endif

        // calculate result checksum and combine with type bits (7..8) in original CKT
        ckt |=  pgm_read_byte(&checksum6[checksum8]);
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e0 55       	subi	r30, 0x50	; 80
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	84 91       	lpm	r24, Z

        return ckt;
    }
     258:	86 2b       	or	r24, r22
     25a:	08 95       	ret

0000025c <_ZN15StackSingleByte25handleFirstOperatingModesEv>:
uint8_t   eventPage[8];          //!< event buffer

StackSingleByte StackSingleByte::instance;
//------------------------------------------------------------------------------
StackSingleByte::HandlerResult StackSingleByte::handleFirstOperatingModes()
{
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	fc 01       	movw	r30, r24
    // 
    uint8_t status;

    //  state machine
    switch (_frameState)
     264:	82 89       	ldd	r24, Z+18	; 0x12
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	39 f0       	breq	.+14     	; 0x278 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x1c>
     26a:	08 f4       	brcc	.+2      	; 0x26e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x12>
     26c:	81 c0       	rjmp	.+258    	; 0x370 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x114>
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	09 f4       	brne	.+2      	; 0x274 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x18>
     272:	47 c0       	rjmp	.+142    	; 0x302 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xa6>
            }
        }
        break;
        
    default:
        return ResultIllegalMessageType;
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	82 c0       	rjmp	.+260    	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     278:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     27a:	80 e1       	ldi	r24, 0x10	; 16
     27c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x22>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     284:	ce b5       	in	r28, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     286:	ce bd       	out	0x2e, r28	; 46
        
    case FRAME_RCV_MC:      // expecting MC octet
        {
            // request MC octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     288:	8c 2f       	mov	r24, r28
     28a:	8c 70       	andi	r24, 0x0C	; 12
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	11 f0       	breq	.+4      	; 0x294 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
                return ResultChecksumError;
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	74 c0       	rjmp	.+232    	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     29a:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     29c:	2a 9a       	sbi	0x05, 2	; 5

            // get master sequence control (MC) octet
            _mc = registerReadLast();
     29e:	84 8b       	std	Z+20, r24	; 0x14

            // ensure that we are in IoLinkListen from here on
            if (_ddlMode < IoLink::DDL_MODE_STARTUP)
     2a0:	80 81       	ld	r24, Z
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	68 f4       	brcc	.+26     	; 0x2c0 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x64>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2a6:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2a8:	82 e8       	ldi	r24, 0x82	; 130
     2aa:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2ac:	0d b4       	in	r0, 0x2d	; 45
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x50>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2b2:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2b4:	88 e0       	ldi	r24, 0x08	; 8
     2b6:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2b8:	0d b4       	in	r0, 0x2d	; 45
     2ba:	07 fe       	sbrs	r0, 7
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x5c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2be:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2c0:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2c2:	83 e8       	ldi	r24, 0x83	; 131
     2c4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2c6:	0d b4       	in	r0, 0x2d	; 45
     2c8:	07 fe       	sbrs	r0, 7
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x6a>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2cc:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2d2:	0d b4       	in	r0, 0x2d	; 45
     2d4:	07 fe       	sbrs	r0, 7
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x76>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2d8:	2a 9a       	sbi	0x05, 2	; 5
            // signal ready to receive next byte
            registerWrite(REG_LINK, LINK_END);

            // precalculate the checksum, assuming no returned PD or OD frames
            _cks = IoLink::calculateChecksum(0, (_processDataIn.isValid ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     2da:	82 81       	ldd	r24, Z+2	; 0x02
     2dc:	81 11       	cpse	r24, r1
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x88>
     2e0:	60 e4       	ldi	r22, 0x40	; 64
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x8a>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 01       	movw	r16, r30
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	ad df       	rcall	.-166    	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     2ec:	f8 01       	movw	r30, r16
     2ee:	86 8b       	std	Z+22, r24	; 0x16
     2f0:	85 b5       	in	r24, 0x25	; 37

            // disable the cycle timer (Timer0): it will be restarted after this frame...
            _tccr0bRecord = TCCR0B;
     2f2:	83 8f       	std	Z+27, r24	; 0x1b
     2f4:	15 bc       	out	0x25, r1	; 37
            TCCR0B = 0;
     2f6:	85 b3       	in	r24, 0x15	; 21

            // ...and clear any outstanding timer interrupt requests
            TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     2f8:	87 60       	ori	r24, 0x07	; 7
     2fa:	85 bb       	out	0x15, r24	; 21
     2fc:	82 e0       	ldi	r24, 0x02	; 2

            // enter next state
            _frameState = FRAME_RCV_CKT;
     2fe:	82 8b       	std	Z+18, r24	; 0x12
     300:	2f c0       	rjmp	.+94     	; 0x360 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x104>
        }
        break;
     302:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     304:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     306:	8e bd       	out	0x2e, r24	; 46
     308:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     30a:	07 fe       	sbrs	r0, 7
     30c:	fd cf       	rjmp	.-6      	; 0x308 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xac>
     30e:	ce b5       	in	r28, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     310:	ce bd       	out	0x2e, r28	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     312:	8c 2f       	mov	r24, r28

    case FRAME_RCV_CKT: // expecting CKT octet in read access
        {
            // request CKT octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     314:	8c 70       	andi	r24, 0x0C	; 12
     316:	84 30       	cpi	r24, 0x04	; 4
     318:	09 f0       	breq	.+2      	; 0x31c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     31a:	ba cf       	rjmp	.-140    	; 0x290 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x34>
     31c:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     31e:	07 fe       	sbrs	r0, 7
     320:	fd cf       	rjmp	.-6      	; 0x31c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     322:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     324:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     326:	85 8b       	std	Z+21, r24	; 0x15
                return ResultChecksumError;

            // get CKT octet
            _ckt = registerReadLast();
     328:	94 89       	ldd	r25, Z+20	; 0x14

            // prepare checksum-8
            _checksum8 = _mc;
     32a:	97 8b       	std	Z+23, r25	; 0x17
     32c:	12 8e       	std	Z+26, r1	; 0x1a
            _i = 0;
     32e:	93 e0       	ldi	r25, 0x03	; 3

            // indicate continuation required
            _frameState     = FRAME_RCV_CKT_CONT;
     330:	92 8b       	std	Z+18, r25	; 0x12
     332:	91 e0       	ldi	r25, 0x01	; 1
            _frameTypeOk    = true;
     334:	94 8f       	std	Z+28, r25	; 0x1c
     336:	90 81       	ld	r25, Z
            _receiveDdlMode = _ddlMode; 
     338:	93 8b       	std	Z+19, r25	; 0x13
     33a:	80 7c       	andi	r24, 0xC0	; 192
     33c:	93 30       	cpi	r25, 0x03	; 3
            
            switch (_ddlMode)
     33e:	29 f0       	breq	.+10     	; 0x34a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     340:	94 30       	cpi	r25, 0x04	; 4
     342:	19 f4       	brne	.+6      	; 0x34a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     344:	80 38       	cpi	r24, 0x80	; 128
                if (frameType == IoLink::CKT_TYPE_2)
                    return true;                                   // TYPE_2_1-2_5
            }
            else if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE + PD_IN_SIZE <= 4))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     346:	19 f4       	brne	.+6      	; 0x34e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xf2>
     348:	15 c0       	rjmp	.+42     	; 0x374 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     34a:	88 23       	and	r24, r24
    switch (DDL_MODE)
    {
        // see table A.7
    case IoLink::DDL_MODE_IDLE:
    case IoLink::DDL_MODE_STARTUP:
        if (frameType == IoLink::CKT_TYPE_0) 
     34c:	99 f0       	breq	.+38     	; 0x374 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     34e:	14 8e       	std	Z+28, r1	; 0x1c
                 if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
                    return ResultSuccess;
                break;
            }
            
            _frameTypeOk    = false;
     350:	81 11       	cpse	r24, r1
     352:	02 c0       	rjmp	.+4      	; 0x358 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xfc>
     354:	82 e0       	ldi	r24, 0x02	; 2
            
            // look for a viable alternative
            if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_STARTUP;
     356:	03 c0       	rjmp	.+6      	; 0x35e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x102>
     358:	80 38       	cpi	r24, 0x80	; 128
                if (frameType == IoLink::CKT_TYPE_2)
                    return true;                                   // TYPE_2_1-2_5
            }
            else if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE + PD_IN_SIZE <= 4))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     35a:	71 f4       	brne	.+28     	; 0x378 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x11c>
     35c:	84 e0       	ldi	r24, 0x04	; 4
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else if (validateFrameType<IoLink::DDL_MODE_OPERATE>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
     35e:	83 8b       	std	Z+19, r24	; 0x13
     360:	8c 2f       	mov	r24, r28
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
     362:	80 95       	com	r24
     364:	88 1f       	adc	r24, r24
     366:	88 27       	eor	r24, r24
     368:	88 1f       	adc	r24, r24
     36a:	88 0f       	add	r24, r24
     36c:	88 0f       	add	r24, r24
     36e:	06 c0       	rjmp	.+12     	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     370:	84 e0       	ldi	r24, 0x04	; 4

    //  state machine
    switch (_frameState)
    {
    case FRAME_RESET:
        return ResultPhyReset;
     372:	04 c0       	rjmp	.+8      	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     374:	80 e0       	ldi	r24, 0x00	; 0
            
            switch (_ddlMode)
            {
            case IoLink::DDL_MODE_PREOPERATE:
                if (validateFrameType<IoLink::DDL_MODE_PREOPERATE>(_ckt))
                    return ResultSuccess;
     376:	02 c0       	rjmp	.+4      	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     378:	82 e0       	ldi	r24, 0x02	; 2
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else
            {
                _frameState     = FRAME_RCV_CKT;
     37a:	82 8b       	std	Z+18, r24	; 0x12
     37c:	cf 91       	pop	r28

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
}
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <__vector_15>:
     384:	1f 92       	push	r1
    }
}

// Interrupt on Timer0 compare match B
ISR(TIMER0_COMPB_vect)
{
     386:	0f 92       	push	r0
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	0f 92       	push	r0
     38c:	11 24       	eor	r1, r1
     38e:	2f 93       	push	r18
     390:	3f 93       	push	r19
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::onTimer0CompBInterrupt()
{
    // decrement hiZ timer
    if (_hiZCounter >= 0 && --_hiZCounter < 0)
     396:	80 91 07 01 	lds	r24, 0x0107
     39a:	87 fd       	sbrc	r24, 7
     39c:	1d c0       	rjmp	.+58     	; 0x3d8 <__vector_15+0x54>
     39e:	81 50       	subi	r24, 0x01	; 1
     3a0:	80 93 07 01 	sts	0x0107, r24
     3a4:	8f 3f       	cpi	r24, 0xFF	; 255
     3a6:	c1 f4       	brne	.+48     	; 0x3d8 <__vector_15+0x54>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3a8:	80 91 08 01 	lds	r24, 0x0108
     3ac:	80 fd       	sbrc	r24, 0
     3ae:	26 c0       	rjmp	.+76     	; 0x3fc <__vector_15+0x78>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	90 93 07 01 	sts	0x0107, r25
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	90 93 00 01 	sts	0x0100, r25
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
     3be:	8c 60       	ori	r24, 0x0C	; 12
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     3c0:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3c2:	92 e8       	ldi	r25, 0x82	; 130
     3c4:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3c6:	0d b4       	in	r0, 0x2d	; 45
     3c8:	07 fe       	sbrs	r0, 7
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <__vector_15+0x42>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     3cc:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3ce:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3d0:	0d b4       	in	r0, 0x2d	; 45
     3d2:	07 fe       	sbrs	r0, 7
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <__vector_15+0x4c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     3d6:	2a 9a       	sbi	0x05, 2	; 5
    {
        stack().setSioActive();
    }

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
     3d8:	20 91 0d 01 	lds	r18, 0x010D
     3dc:	30 91 0e 01 	lds	r19, 0x010E
     3e0:	80 91 12 01 	lds	r24, 0x0112
     3e4:	21 15       	cp	r18, r1
     3e6:	31 05       	cpc	r19, r1
     3e8:	59 f0       	breq	.+22     	; 0x400 <__vector_15+0x7c>
     3ea:	21 50       	subi	r18, 0x01	; 1
     3ec:	31 09       	sbc	r19, r1
     3ee:	30 93 0e 01 	sts	0x010E, r19
     3f2:	20 93 0d 01 	sts	0x010D, r18
     3f6:	23 2b       	or	r18, r19
     3f8:	39 f0       	breq	.+14     	; 0x408 <__vector_15+0x84>
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__vector_15+0x7c>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	d9 cf       	rjmp	.-78     	; 0x3b2 <__vector_15+0x2e>
        }
    }
    else
    {
        // too late for user code
        _runUserCode = false;
     400:	8e 7f       	andi	r24, 0xFE	; 254
     402:	80 93 12 01 	sts	0x0112, r24
     406:	33 c0       	rjmp	.+102    	; 0x46e <__vector_15+0xea>

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
    {
        // user code may run
        _runUserCode = true;
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	80 93 12 01 	sts	0x0112, r24

        // restart cycle timer
        _cycleTimer = _cyclePeriod;
     40e:	80 91 0b 01 	lds	r24, 0x010B
     412:	90 91 0c 01 	lds	r25, 0x010C
     416:	90 93 0e 01 	sts	0x010E, r25
     41a:	80 93 0d 01 	sts	0x010D, r24

        // advance the count of dead cycles
        if (_deadCycleCtr != 0xff)
     41e:	80 91 06 01 	lds	r24, 0x0106
     422:	8f 3f       	cpi	r24, 0xFF	; 255
     424:	19 f0       	breq	.+6      	; 0x42c <__vector_15+0xa8>
        {
            ++_deadCycleCtr;
     426:	8f 5f       	subi	r24, 0xFF	; 255
     428:	80 93 06 01 	sts	0x0106, r24
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
     42c:	80 91 11 01 	lds	r24, 0x0111
     430:	88 23       	and	r24, r24
     432:	29 f0       	breq	.+10     	; 0x43e <__vector_15+0xba>
     434:	81 50       	subi	r24, 0x01	; 1
     436:	80 93 11 01 	sts	0x0111, r24
     43a:	88 23       	and	r24, r24
     43c:	a9 f0       	breq	.+42     	; 0x468 <__vector_15+0xe4>
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
        }

        // update LED register if necessary
        if (_savedLedRegister != _ledRegister)
     43e:	80 91 10 01 	lds	r24, 0x0110
     442:	90 91 0f 01 	lds	r25, 0x010F
     446:	98 17       	cp	r25, r24
     448:	91 f0       	breq	.+36     	; 0x46e <__vector_15+0xea>
        {
            _savedLedRegister = _ledRegister;
     44a:	80 93 0f 01 	sts	0x010F, r24
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     44e:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     450:	96 e8       	ldi	r25, 0x86	; 134
     452:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     454:	0d b4       	in	r0, 0x2d	; 45
     456:	07 fe       	sbrs	r0, 7
     458:	fd cf       	rjmp	.-6      	; 0x454 <__vector_15+0xd0>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     45a:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     45c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     45e:	0d b4       	in	r0, 0x2d	; 45
     460:	07 fe       	sbrs	r0, 7
     462:	fd cf       	rjmp	.-6      	; 0x45e <__vector_15+0xda>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     464:	2a 9a       	sbi	0x05, 2	; 5
     466:	03 c0       	rjmp	.+6      	; 0x46e <__vector_15+0xea>
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
     468:	10 92 01 01 	sts	0x0101, r1
     46c:	e8 cf       	rjmp	.-48     	; 0x43e <__vector_15+0xba>
    StackSingleByte::instance.onTimer0CompBInterrupt();
}
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>:
}


//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
     480:	fc 01       	movw	r30, r24
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
     482:	15 82       	std	Z+5, r1	; 0x05

    // disable timer
    TCCR0B = 0;
     484:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
     486:	16 bc       	out	0x26, r1	; 38

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     488:	85 b3       	in	r24, 0x15	; 21
     48a:	87 60       	ori	r24, 0x07	; 7
     48c:	85 bb       	out	0x15, r24	; 21
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
     48e:	82 85       	ldd	r24, Z+10	; 0x0a
     490:	93 85       	ldd	r25, Z+11	; 0x0b
     492:	00 97       	sbiw	r24, 0x00	; 0
     494:	49 f5       	brne	.+82     	; 0x4e8 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x68>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     496:	20 81       	ld	r18, Z
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	21 f4       	brne	.+8      	; 0x4a4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x24>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     49c:	20 91 27 01 	lds	r18, 0x0127
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     4a0:	21 11       	cpse	r18, r1
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x28>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     4a4:	20 91 28 01 	lds	r18, 0x0128
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     4a8:	24 30       	cpi	r18, 0x04	; 4
     4aa:	e0 f0       	brcs	.+56     	; 0x4e4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4ac:	20 34       	cpi	r18, 0x40	; 64
     4ae:	18 f4       	brcc	.+6      	; 0x4b6 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x36>
     4b0:	82 2f       	mov	r24, r18
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	17 c0       	rjmp	.+46     	; 0x4e4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4b6:	32 2f       	mov	r19, r18
     4b8:	30 7c       	andi	r19, 0xC0	; 192
     4ba:	30 34       	cpi	r19, 0x40	; 64
     4bc:	49 f4       	brne	.+18     	; 0x4d0 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x50>
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	28 9f       	mul	r18, r24
     4c2:	90 01       	movw	r18, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	33 27       	eor	r19, r19
     4c8:	c9 01       	movw	r24, r18
     4ca:	80 5c       	subi	r24, 0xC0	; 192
     4cc:	9f 4f       	sbci	r25, 0xFF	; 255
     4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4d0:	30 38       	cpi	r19, 0x80	; 128
     4d2:	41 f4       	brne	.+16     	; 0x4e4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4d4:	2f 73       	andi	r18, 0x3F	; 63
     4d6:	80 e1       	ldi	r24, 0x10	; 16
     4d8:	28 9f       	mul	r18, r24
     4da:	90 01       	movw	r18, r0
     4dc:	11 24       	eor	r1, r1
     4de:	c9 01       	movw	r24, r18
     4e0:	80 5c       	subi	r24, 0xC0	; 192
     4e2:	9e 4f       	sbci	r25, 0xFE	; 254
     4e4:	93 87       	std	Z+11, r25	; 0x0b
     4e6:	82 87       	std	Z+10, r24	; 0x0a
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	6f 5f       	subi	r22, 0xFF	; 255
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	75 87       	std	Z+13, r23	; 0x0d
     4f0:	64 87       	std	Z+12, r22	; 0x0c

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	80 93 6e 00 	sts	0x006E, r24

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	84 bd       	out	0x24, r24	; 36

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
     4fc:	94 e6       	ldi	r25, 0x64	; 100
     4fe:	97 bd       	out	0x27, r25	; 39
     500:	98 bd       	out	0x28, r25	; 40
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
     502:	85 bd       	out	0x25, r24	; 37
     504:	08 95       	ret

00000506 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultSuccess;
}

//------------------------------------------------------------------------------
template <IoLink::DeviceDLMode DDL_MODE>
StackSingleByte::HandlerResult StackSingleByte::handleOperatingMode()
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     50c:	dc 01       	movw	r26, r24
     50e:	52 96       	adiw	r26, 0x12	; 18
     510:	ec 91       	ld	r30, X
     512:	4e 2f       	mov	r20, r30
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	4c 30       	cpi	r20, 0x0C	; 12
     518:	51 05       	cpc	r21, r1
     51a:	08 f0       	brcs	.+2      	; 0x51e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x18>
     51c:	5e c0       	rjmp	.+188    	; 0x5da <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd4>
     51e:	ec 01       	movw	r28, r24
     520:	fa 01       	movw	r30, r20
     522:	ec 5c       	subi	r30, 0xCC	; 204
     524:	ff 4f       	sbci	r31, 0xFF	; 255
     526:	9b c7       	rjmp	.+3894   	; 0x145e <__tablejump2__>
     528:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     52a:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     52c:	8e bd       	out	0x2e, r24	; 46
     52e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     530:	07 fe       	sbrs	r0, 7
     532:	fd cf       	rjmp	.-6      	; 0x52e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x28>
     534:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     536:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     538:	8e bd       	out	0x2e, r24	; 46
     53a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     53c:	07 fe       	sbrs	r0, 7
     53e:	fd cf       	rjmp	.-6      	; 0x53a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x34>
     540:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     542:	84 e0       	ldi	r24, 0x04	; 4
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
     544:	8a 8b       	std	Y+18, r24	; 0x12
     546:	31 c1       	rjmp	.+610    	; 0x7aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a4>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     548:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     54a:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     54c:	8e bd       	out	0x2e, r24	; 46
     54e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     550:	07 fe       	sbrs	r0, 7
     552:	fd cf       	rjmp	.-6      	; 0x54e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x48>
     554:	1e b5       	in	r17, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     556:	1e bd       	out	0x2e, r17	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     558:	81 2f       	mov	r24, r17
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     55a:	8c 70       	andi	r24, 0x0C	; 12
     55c:	84 30       	cpi	r24, 0x04	; 4
     55e:	11 f0       	breq	.+4      	; 0x564 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5e>
     560:	82 e0       	ldi	r24, 0x02	; 2
                return ResultChecksumError;
     562:	26 c1       	rjmp	.+588    	; 0x7b0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
     564:	ea 8d       	ldd	r30, Y+26	; 0x1a

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     56a:	07 fe       	sbrs	r0, 7
     56c:	fd cf       	rjmp	.-6      	; 0x568 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x62>
     56e:	9e b5       	in	r25, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     570:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     572:	ec 0f       	add	r30, r28
     574:	fd 1f       	adc	r31, r29
     576:	91 8f       	std	Z+25, r25	; 0x19
     578:	8f 89       	ldd	r24, Y+23	; 0x17
     57a:	89 27       	eor	r24, r25
     57c:	8f 8b       	std	Y+23, r24	; 0x17
     57e:	9a 8d       	ldd	r25, Y+26	; 0x1a
            
            if (++_i < pdOutSize) // get next PD octet
     580:	9f 5f       	subi	r25, 0xFF	; 255
     582:	9a 8f       	std	Y+26, r25	; 0x1a
     584:	91 11       	cpse	r25, r1
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x9c>
     588:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     58a:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     58c:	8e bd       	out	0x2e, r24	; 46
     58e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     590:	07 fe       	sbrs	r0, 7
     592:	fd cf       	rjmp	.-6      	; 0x58e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x88>
     594:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     596:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     598:	8e bd       	out	0x2e, r24	; 46
     59a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     59c:	07 fe       	sbrs	r0, 7
     59e:	fd cf       	rjmp	.-6      	; 0x59a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x94>
     5a0:	72 c0       	rjmp	.+228    	; 0x686 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x180>
     5a2:	9c 89       	ldd	r25, Y+20	; 0x14
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     5a4:	97 fd       	sbrc	r25, 7
     5a6:	11 c0       	rjmp	.+34     	; 0x5ca <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc4>
     5a8:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5aa:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5ac:	8e bd       	out	0x2e, r24	; 46
     5ae:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5b0:	07 fe       	sbrs	r0, 7
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa8>
     5b4:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5b8:	8e bd       	out	0x2e, r24	; 46
     5ba:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5bc:	07 fe       	sbrs	r0, 7
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb4>
     5c0:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     5c2:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	1a 8e       	std	Y+26, r1	; 0x1a
                _i = 0;
     5c8:	ee c0       	rjmp	.+476    	; 0x7a6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
     5ca:	6d 89       	ldd	r22, Y+21	; 0x15
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     5cc:	3c de       	rcall	.-904    	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     5ce:	9d 89       	ldd	r25, Y+21	; 0x15
     5d0:	89 13       	cpse	r24, r25
     5d2:	c6 cf       	rjmp	.-116    	; 0x560 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     5d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5d6:	81 11       	cpse	r24, r1
                    return ResultChecksumError;

                if (!_frameTypeOk)
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd8>
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	e9 c0       	rjmp	.+466    	; 0x7b0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
                    return ResultIllegalMessageType;                    
     5de:	89 8d       	ldd	r24, Y+25	; 0x19
     5e0:	8b 83       	std	Y+3, r24	; 0x03

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     5e2:	1a 8e       	std	Y+26, r1	; 0x1a
     5e4:	6f c0       	rjmp	.+222    	; 0x6c4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1be>

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     5e6:	2a 98       	cbi	0x05, 2	; 5
                goto frame_snd_od;
     5e8:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5ea:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5ec:	0d b4       	in	r0, 0x2d	; 45
     5ee:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xe6>
     5f2:	1e b5       	in	r17, 0x2e	; 46
     5f4:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5f6:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5f8:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	09 f0       	breq	.+2      	; 0x600 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xfa>
     5fe:	b0 cf       	rjmp	.-160    	; 0x560 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     600:	0d b4       	in	r0, 0x2d	; 45
     602:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     604:	fd cf       	rjmp	.-6      	; 0x600 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xfa>
     606:	9e b5       	in	r25, 0x2e	; 46
     608:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     60a:	98 8f       	std	Y+24, r25	; 0x18
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     60c:	8f 89       	ldd	r24, Y+23	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     60e:	89 27       	eor	r24, r25
     610:	8f 8b       	std	Y+23, r24	; 0x17
     612:	9a 8d       	ldd	r25, Y+26	; 0x1a
     614:	9f 5f       	subi	r25, 0xFF	; 255

            if (++_i < odCount) // get next OD octet
     616:	9a 8f       	std	Y+26, r25	; 0x1a
     618:	91 11       	cpse	r25, r1
     61a:	37 c0       	rjmp	.+110    	; 0x68a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x184>
     61c:	2a 98       	cbi	0x05, 2	; 5
     61e:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     620:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     622:	0d b4       	in	r0, 0x2d	; 45
     624:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     626:	fd cf       	rjmp	.-6      	; 0x622 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x11c>
     628:	8e b5       	in	r24, 0x2e	; 46
     62a:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     62c:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     62e:	0d b4       	in	r0, 0x2d	; 45
     630:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     632:	fd cf       	rjmp	.-6      	; 0x62e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x128>
     634:	2a 9a       	sbi	0x05, 2	; 5
     636:	86 e0       	ldi	r24, 0x06	; 6
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     638:	a2 c0       	rjmp	.+324    	; 0x77e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     63a:	2a 98       	cbi	0x05, 2	; 5
     63c:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     63e:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     640:	0d b4       	in	r0, 0x2d	; 45
     642:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     644:	fd cf       	rjmp	.-6      	; 0x640 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x13a>
     646:	1e b5       	in	r17, 0x2e	; 46
     648:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     64a:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     64c:	8c 70       	andi	r24, 0x0C	; 12

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     64e:	84 30       	cpi	r24, 0x04	; 4
     650:	09 f0       	breq	.+2      	; 0x654 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x14e>
     652:	86 cf       	rjmp	.-244    	; 0x560 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     654:	0d b4       	in	r0, 0x2d	; 45
     656:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     658:	fd cf       	rjmp	.-6      	; 0x654 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x14e>
     65a:	9e b5       	in	r25, 0x2e	; 46
     65c:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     65e:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     660:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     662:	8f 8b       	std	Y+23, r24	; 0x17
     664:	9a 8d       	ldd	r25, Y+26	; 0x1a
     666:	9f 5f       	subi	r25, 0xFF	; 255

            if (++_i < odCount) // get next PD octet
     668:	9a 8f       	std	Y+26, r25	; 0x1a
     66a:	91 11       	cpse	r25, r1
     66c:	0e c0       	rjmp	.+28     	; 0x68a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x184>
     66e:	2a 98       	cbi	0x05, 2	; 5
     670:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     672:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     674:	0d b4       	in	r0, 0x2d	; 45
     676:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     678:	fd cf       	rjmp	.-6      	; 0x674 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x16e>
     67a:	8e b5       	in	r24, 0x2e	; 46
     67c:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     67e:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     680:	0d b4       	in	r0, 0x2d	; 45
     682:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     684:	fd cf       	rjmp	.-6      	; 0x680 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17a>
     686:	2a 9a       	sbi	0x05, 2	; 5
     688:	8e c0       	rjmp	.+284    	; 0x7a6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     68a:	6d 89       	ldd	r22, Y+21	; 0x15
     68c:	dc dd       	rcall	.-1096   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     68e:	9d 89       	ldd	r25, Y+21	; 0x15
     690:	89 13       	cpse	r24, r25
     692:	66 cf       	rjmp	.-308    	; 0x560 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     694:	8c 8d       	ldd	r24, Y+28	; 0x1c
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x196>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     69a:	9f cf       	rjmp	.-194    	; 0x5da <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd4>
     69c:	8c 89       	ldd	r24, Y+20	; 0x14
     69e:	98 8d       	ldd	r25, Y+24	; 0x18
     6a0:	28 2f       	mov	r18, r24
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6a2:	20 76       	andi	r18, 0x60	; 96
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     6a4:	20 32       	cpi	r18, 0x20	; 32

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6a6:	41 f0       	breq	.+16     	; 0x6b8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b2>
     6a8:	89 89       	ldd	r24, Y+17	; 0x11

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     6aa:	8d 7f       	andi	r24, 0xFD	; 253
     6ac:	89 8b       	std	Y+17, r24	; 0x11
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     6ae:	89 8d       	ldd	r24, Y+25	; 0x19
     6b0:	8b 83       	std	Y+3, r24	; 0x03
     6b2:	1a 8e       	std	Y+26, r1	; 0x1a
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     6b4:	1f 8a       	std	Y+23, r1	; 0x17
     6b6:	2d c0       	rjmp	.+90     	; 0x712 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x20c>

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     6b8:	8f 71       	andi	r24, 0x1F	; 31
                _checksum8 = 0;
     6ba:	88 87       	std	Y+8, r24	; 0x08
                goto frame_snd_pd;
     6bc:	99 87       	std	Y+9, r25	; 0x09
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     6be:	89 89       	ldd	r24, Y+17	; 0x11
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     6c0:	82 60       	ori	r24, 0x02	; 2
        _parameterWrite.value = data;
     6c2:	f4 cf       	rjmp	.-24     	; 0x6ac <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1a6>
        _prmWriteAvailable = true;
     6c4:	1f 8a       	std	Y+23, r1	; 0x17
     6c6:	8c 89       	ldd	r24, Y+20	; 0x14
     6c8:	68 2f       	mov	r22, r24
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     6ca:	6f 71       	andi	r22, 0x1F	; 31

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6cc:	80 76       	andi	r24, 0x60	; 96
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     6ce:	9f dd       	rcall	.-1218   	; 0x20e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
     6d0:	2a 98       	cbi	0x05, 2	; 5

            // get the data
            uint8_t odIn = odRead(channel, address);
     6d2:	90 e9       	ldi	r25, 0x90	; 144
     6d4:	9e bd       	out	0x2e, r25	; 46
     6d6:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     6d8:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1d0>
     6dc:	1e b5       	in	r17, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6de:	8e bd       	out	0x2e, r24	; 46
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1da>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6e6:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6e8:	9f 89       	ldd	r25, Y+23	; 0x17
     6ea:	89 27       	eor	r24, r25
     6ec:	8f 8b       	std	Y+23, r24	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     6ee:	9a 81       	ldd	r25, Y+2	; 0x02

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     6f0:	91 11       	cpse	r25, r1
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f2>
     6f4:	60 e4       	ldi	r22, 0x40	; 64

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f4>
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	a5 dd       	rcall	.-1206   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     6fc:	8e 8b       	std	Y+22, r24	; 0x16
     6fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	8a 8f       	std	Y+26, r24	; 0x1a
     704:	81 11       	cpse	r24, r1

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     706:	02 c0       	rjmp	.+4      	; 0x70c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x206>
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	39 c0       	rjmp	.+114    	; 0x77e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
     70c:	1a 8e       	std	Y+26, r1	; 0x1a
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	36 c0       	rjmp	.+108    	; 0x77e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
            {
                _frameState = FRAME_SND_ODX;
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	88 23       	and	r24, r24
            }
            else
            {
                _i = 0;
     716:	31 f0       	breq	.+12     	; 0x724 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x21e>
                _frameState = FRAME_SND_PD;
     718:	8a 8d       	ldd	r24, Y+26	; 0x1a
     71a:	fe 01       	movw	r30, r28
frame_snd_pd:
        // with frame type 2, send the process data
        if (pdInSize > 0)
        {
            // get process data
            const uint8_t pd = _processDataIn.isValid ? _processDataIn.buffer[_i] : 0;
     71c:	e8 0f       	add	r30, r24
     71e:	f1 1d       	adc	r31, r1
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	01 c0       	rjmp	.+2      	; 0x726 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x220>
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	2a 98       	cbi	0x05, 2	; 5
     728:	80 e9       	ldi	r24, 0x90	; 144
     72a:	8e bd       	out	0x2e, r24	; 46
     72c:	0d b4       	in	r0, 0x2d	; 45
     72e:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     730:	fd cf       	rjmp	.-6      	; 0x72c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x226>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     732:	1e b5       	in	r17, 0x2e	; 46
     734:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
     73a:	fd cf       	rjmp	.-6      	; 0x736 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x230>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     73c:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     73e:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     740:	89 27       	eor	r24, r25
     742:	8f 8b       	std	Y+23, r24	; 0x17
     744:	9a 81       	ldd	r25, Y+2	; 0x02
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     746:	91 11       	cpse	r25, r1

            // send process data
            status = registerWrite(REG_FR0, pd);

            // update checksum-8
            _checksum8 ^= pd;
     748:	02 c0       	rjmp	.+4      	; 0x74e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x248>
     74a:	60 e4       	ldi	r22, 0x40	; 64
     74c:	01 c0       	rjmp	.+2      	; 0x750 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24a>

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	7a dd       	rcall	.-1292   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     752:	8e 8b       	std	Y+22, r24	; 0x16
     754:	8a 8d       	ldd	r24, Y+26	; 0x1a
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	8a 8f       	std	Y+26, r24	; 0x1a
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	21 f5       	brne	.+72     	; 0x7a6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>

            // update checksum-8
            _checksum8 ^= pd;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     75e:	8a e0       	ldi	r24, 0x0A	; 10
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            if (++_i == pdInSize)
     760:	0e c0       	rjmp	.+28     	; 0x77e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
     762:	8e 89       	ldd	r24, Y+22	; 0x16
     764:	2a 98       	cbi	0x05, 2	; 5
     766:	90 e9       	ldi	r25, 0x90	; 144
     768:	9e bd       	out	0x2e, r25	; 46
            {
                // enter next state
                _frameState = FRAME_SND_CKS;
     76a:	0d b4       	in	r0, 0x2d	; 45
     76c:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     76e:	fd cf       	rjmp	.-6      	; 0x76a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x264>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     770:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     772:	8e bd       	out	0x2e, r24	; 46
     774:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     776:	07 fe       	sbrs	r0, 7
     778:	fd cf       	rjmp	.-6      	; 0x774 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x26e>
     77a:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     77c:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     77e:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     780:	12 c0       	rjmp	.+36     	; 0x7a6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
     782:	2a 98       	cbi	0x05, 2	; 5
     784:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     786:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     788:	0d b4       	in	r0, 0x2d	; 45
     78a:	07 fe       	sbrs	r0, 7
        }
        break;
     78c:	fd cf       	rjmp	.-6      	; 0x788 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x282>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     78e:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     794:	0d b4       	in	r0, 0x2d	; 45
     796:	07 fe       	sbrs	r0, 7
     798:	fd cf       	rjmp	.-6      	; 0x794 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x28e>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     79a:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	ce 01       	movw	r24, r28
     7a4:	6d de       	rcall	.-806    	; 0x480 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7a6:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a8>
     7aa:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     7bc:	df 93       	push	r29
    else
        return ResultSuccess;
}
     7be:	dc 01       	movw	r26, r24
     7c0:	52 96       	adiw	r26, 0x12	; 18
     7c2:	ec 91       	ld	r30, X
     7c4:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	4c 30       	cpi	r20, 0x0C	; 12
     7ca:	51 05       	cpc	r21, r1
     7cc:	18 f5       	brcc	.+70     	; 0x814 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     7ce:	ec 01       	movw	r28, r24
     7d0:	fa 01       	movw	r30, r20
     7d2:	e0 5c       	subi	r30, 0xC0	; 192
     7d4:	ff 4f       	sbci	r31, 0xFF	; 255
     7d6:	43 c6       	rjmp	.+3206   	; 0x145e <__tablejump2__>
     7d8:	8c 89       	ldd	r24, Y+20	; 0x14
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     7da:	87 fd       	sbrc	r24, 7
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x46>
     7de:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     7e0:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7e2:	8e bd       	out	0x2e, r24	; 46
     7e4:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7e6:	07 fe       	sbrs	r0, 7
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     7ea:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7ee:	8e bd       	out	0x2e, r24	; 46
     7f0:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7f2:	07 fe       	sbrs	r0, 7
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x38>
     7f6:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7f8:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     7fa:	8a 8b       	std	Y+18, r24	; 0x12
     7fc:	fe c0       	rjmp	.+508    	; 0x9fa <__stack+0xfb>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     7fe:	6d 89       	ldd	r22, Y+21	; 0x15
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     800:	8f 89       	ldd	r24, Y+23	; 0x17
     802:	21 dd       	rcall	.-1470   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     804:	9d 89       	ldd	r25, Y+21	; 0x15
     806:	89 17       	cp	r24, r25
     808:	11 f0       	breq	.+4      	; 0x80e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x56>
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	f9 c0       	rjmp	.+498    	; 0xa00 <__stack+0x101>
                    return ResultChecksumError;
     80e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     810:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     812:	ad c0       	rjmp	.+346    	; 0x96e <__stack+0x6f>
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	f4 c0       	rjmp	.+488    	; 0xa00 <__stack+0x101>
                    return ResultIllegalMessageType;
     818:	2a 98       	cbi	0x05, 2	; 5
     81a:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     81c:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     81e:	0d b4       	in	r0, 0x2d	; 45
     820:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     822:	fd cf       	rjmp	.-6      	; 0x81e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x66>
     824:	1e b5       	in	r17, 0x2e	; 46
     826:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     828:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     82a:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	69 f7       	brne	.-38     	; 0x80a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     830:	ea 8d       	ldd	r30, Y+26	; 0x1a
     832:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     834:	0d b4       	in	r0, 0x2d	; 45
     836:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     838:	fd cf       	rjmp	.-6      	; 0x834 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     83a:	9e b5       	in	r25, 0x2e	; 46
     83c:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     83e:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     840:	fd 1f       	adc	r31, r29
     842:	91 8f       	std	Z+25, r25	; 0x19
     844:	8f 89       	ldd	r24, Y+23	; 0x17
     846:	89 27       	eor	r24, r25
     848:	8f 8b       	std	Y+23, r24	; 0x17
     84a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     84c:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     84e:	9a 8f       	std	Y+26, r25	; 0x1a
     850:	9c 89       	ldd	r25, Y+20	; 0x14
     852:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     854:	11 c0       	rjmp	.+34     	; 0x878 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     856:	2a 98       	cbi	0x05, 2	; 5
     858:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     85a:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     860:	fd cf       	rjmp	.-6      	; 0x85c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     862:	8e b5       	in	r24, 0x2e	; 46
     864:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     866:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     868:	0d b4       	in	r0, 0x2d	; 45
     86a:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     86c:	fd cf       	rjmp	.-6      	; 0x868 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     86e:	2a 9a       	sbi	0x05, 2	; 5
     870:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     872:	8a 8b       	std	Y+18, r24	; 0x12
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     874:	1a 8e       	std	Y+26, r1	; 0x1a
     876:	bf c0       	rjmp	.+382    	; 0x9f6 <__stack+0xf7>
                _i = 0;
     878:	6d 89       	ldd	r22, Y+21	; 0x15
     87a:	e5 dc       	rcall	.-1590   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     87c:	9d 89       	ldd	r25, Y+21	; 0x15
     87e:	89 13       	cpse	r24, r25
     880:	c4 cf       	rjmp	.-120    	; 0x80a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     882:	8c 8d       	ldd	r24, Y+28	; 0x1c
     884:	88 23       	and	r24, r24
     886:	31 f2       	breq	.-116    	; 0x814 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     888:	89 8d       	ldd	r24, Y+25	; 0x19
     88a:	8b 83       	std	Y+3, r24	; 0x03
     88c:	1a 8e       	std	Y+26, r1	; 0x1a
                    return ResultIllegalMessageType;                    

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     88e:	6f c0       	rjmp	.+222    	; 0x96e <__stack+0x6f>
     890:	2a 98       	cbi	0x05, 2	; 5

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     892:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     894:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     896:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     898:	07 fe       	sbrs	r0, 7
     89a:	fd cf       	rjmp	.-6      	; 0x896 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xde>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     89c:	1e b5       	in	r17, 0x2e	; 46
     89e:	1e bd       	out	0x2e, r17	; 46
     8a0:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8a2:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8a4:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     8a6:	09 f0       	breq	.+2      	; 0x8aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
     8a8:	b0 cf       	rjmp	.-160    	; 0x80a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     8aa:	0d b4       	in	r0, 0x2d	; 45
     8ac:	07 fe       	sbrs	r0, 7
     8ae:	fd cf       	rjmp	.-6      	; 0x8aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8b0:	9e b5       	in	r25, 0x2e	; 46
     8b2:	2a 9a       	sbi	0x05, 2	; 5
     8b4:	98 8f       	std	Y+24, r25	; 0x18
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8b6:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8b8:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     8ba:	8f 8b       	std	Y+23, r24	; 0x17
     8bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8be:	9f 5f       	subi	r25, 0xFF	; 255
     8c0:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next OD octet
     8c2:	91 11       	cpse	r25, r1
     8c4:	37 c0       	rjmp	.+110    	; 0x934 <__stack+0x35>
     8c6:	2a 98       	cbi	0x05, 2	; 5
     8c8:	83 e8       	ldi	r24, 0x83	; 131
     8ca:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8cc:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x114>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8d2:	8e b5       	in	r24, 0x2e	; 46
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8d8:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8da:	07 fe       	sbrs	r0, 7
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8de:	2a 9a       	sbi	0x05, 2	; 5
     8e0:	86 e0       	ldi	r24, 0x06	; 6
     8e2:	75 c0       	rjmp	.+234    	; 0x9ce <__stack+0xcf>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8e4:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     8e6:	80 e1       	ldi	r24, 0x10	; 16
     8e8:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8ea:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x132>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8f0:	1e b5       	in	r17, 0x2e	; 46
     8f2:	1e bd       	out	0x2e, r17	; 46
     8f4:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8f6:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8f8:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     8fa:	09 f0       	breq	.+2      	; 0x8fe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
     8fc:	86 cf       	rjmp	.-244    	; 0x80a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     8fe:	0d b4       	in	r0, 0x2d	; 45
     900:	07 fe       	sbrs	r0, 7
     902:	fd cf       	rjmp	.-6      	; 0x8fe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     904:	9e b5       	in	r25, 0x2e	; 46
     906:	2a 9a       	sbi	0x05, 2	; 5
     908:	8f 89       	ldd	r24, Y+23	; 0x17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     90a:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     90c:	8f 8b       	std	Y+23, r24	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     90e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     910:	9f 5f       	subi	r25, 0xFF	; 255
     912:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next PD octet
     914:	91 11       	cpse	r25, r1
     916:	0e c0       	rjmp	.+28     	; 0x934 <__stack+0x35>
     918:	2a 98       	cbi	0x05, 2	; 5
     91a:	83 e8       	ldi	r24, 0x83	; 131
     91c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     91e:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     920:	07 fe       	sbrs	r0, 7
     922:	fd cf       	rjmp	.-6      	; 0x91e <__stack+0x1f>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     924:	8e b5       	in	r24, 0x2e	; 46
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     92a:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <__stack+0x2b>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     930:	2a 9a       	sbi	0x05, 2	; 5
     932:	61 c0       	rjmp	.+194    	; 0x9f6 <__stack+0xf7>
     934:	6d 89       	ldd	r22, Y+21	; 0x15
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     936:	87 dc       	rcall	.-1778   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     938:	9d 89       	ldd	r25, Y+21	; 0x15
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     93a:	89 13       	cpse	r24, r25
     93c:	66 cf       	rjmp	.-308    	; 0x80a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     93e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     940:	88 23       	and	r24, r24
     942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
     944:	67 cf       	rjmp	.-306    	; 0x814 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     946:	8c 89       	ldd	r24, Y+20	; 0x14
     948:	98 8d       	ldd	r25, Y+24	; 0x18
     94a:	28 2f       	mov	r18, r24
     94c:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     94e:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     950:	41 f0       	breq	.+16     	; 0x962 <__stack+0x63>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     952:	89 89       	ldd	r24, Y+17	; 0x11
     954:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     956:	89 8b       	std	Y+17, r24	; 0x11
     958:	89 8d       	ldd	r24, Y+25	; 0x19
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     95a:	8b 83       	std	Y+3, r24	; 0x03
     95c:	1a 8e       	std	Y+26, r1	; 0x1a
     95e:	1f 8a       	std	Y+23, r1	; 0x17
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     960:	28 c0       	rjmp	.+80     	; 0x9b2 <__stack+0xb3>
     962:	8f 71       	andi	r24, 0x1F	; 31

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     964:	88 87       	std	Y+8, r24	; 0x08
                _checksum8 = 0;
     966:	99 87       	std	Y+9, r25	; 0x09
                goto frame_snd_pd;
     968:	89 89       	ldd	r24, Y+17	; 0x11
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     96a:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     96c:	f4 cf       	rjmp	.-24     	; 0x956 <__stack+0x57>
        _parameterWrite.value = data;
     96e:	1f 8a       	std	Y+23, r1	; 0x17
        _prmWriteAvailable = true;
     970:	8c 89       	ldd	r24, Y+20	; 0x14
     972:	68 2f       	mov	r22, r24
     974:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     976:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     978:	4a dc       	rcall	.-1900   	; 0x20e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     97a:	2a 98       	cbi	0x05, 2	; 5
     97c:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     97e:	9e bd       	out	0x2e, r25	; 46
     980:	0d b4       	in	r0, 0x2d	; 45
     982:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     984:	fd cf       	rjmp	.-6      	; 0x980 <__stack+0x81>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     986:	1e b5       	in	r17, 0x2e	; 46
     988:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     98a:	0d b4       	in	r0, 0x2d	; 45
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <__stack+0x8b>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     990:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     992:	9f 89       	ldd	r25, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     994:	89 27       	eor	r24, r25
     996:	8f 8b       	std	Y+23, r24	; 0x17
     998:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     99a:	55 dc       	rcall	.-1878   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     99c:	8e 8b       	std	Y+22, r24	; 0x16
     99e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9a0:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     9a2:	8a 8f       	std	Y+26, r24	; 0x1a
     9a4:	81 11       	cpse	r24, r1
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     9a8:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     9aa:	11 c0       	rjmp	.+34     	; 0x9ce <__stack+0xcf>
     9ac:	1a 8e       	std	Y+26, r1	; 0x1a
     9ae:	89 e0       	ldi	r24, 0x09	; 9
     9b0:	0e c0       	rjmp	.+28     	; 0x9ce <__stack+0xcf>
     9b2:	8e 89       	ldd	r24, Y+22	; 0x16
            {
                _frameState = FRAME_SND_ODX;
     9b4:	2a 98       	cbi	0x05, 2	; 5
     9b6:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     9b8:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     9ba:	0d b4       	in	r0, 0x2d	; 45
     9bc:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <__stack+0xbb>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9c0:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9c2:	8e bd       	out	0x2e, r24	; 46
     9c4:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9c6:	07 fe       	sbrs	r0, 7
     9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <__stack+0xc5>
     9ca:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9cc:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9ce:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__stack+0xf7>
     9d2:	2a 98       	cbi	0x05, 2	; 5
     9d4:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9d6:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     9d8:	0d b4       	in	r0, 0x2d	; 45
     9da:	07 fe       	sbrs	r0, 7
        }
        break;
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <__stack+0xd9>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9de:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9e4:	0d b4       	in	r0, 0x2d	; 45
     9e6:	07 fe       	sbrs	r0, 7
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <__stack+0xe5>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9ea:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	ce 01       	movw	r24, r28
     9f4:	45 dd       	rcall	.-1398   	; 0x480 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9f6:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__stack+0x101>
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     a04:	1f 91       	pop	r17
     a06:	08 95       	ret

00000a08 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     a0c:	df 93       	push	r29
    else
        return ResultSuccess;
}
     a0e:	dc 01       	movw	r26, r24
     a10:	52 96       	adiw	r26, 0x12	; 18
     a12:	ec 91       	ld	r30, X
     a14:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	4c 30       	cpi	r20, 0x0C	; 12
     a1a:	51 05       	cpc	r21, r1
     a1c:	18 f5       	brcc	.+70     	; 0xa64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     a1e:	ec 01       	movw	r28, r24
     a20:	fa 01       	movw	r30, r20
     a22:	e4 5b       	subi	r30, 0xB4	; 180
     a24:	ff 4f       	sbci	r31, 0xFF	; 255
     a26:	1b c5       	rjmp	.+2614   	; 0x145e <__tablejump2__>
     a28:	8c 89       	ldd	r24, Y+20	; 0x14
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     a2a:	87 fd       	sbrc	r24, 7
     a2c:	10 c0       	rjmp	.+32     	; 0xa4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x46>
     a2e:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a30:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a32:	8e bd       	out	0x2e, r24	; 46
     a34:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a36:	07 fe       	sbrs	r0, 7
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     a3a:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a3e:	8e bd       	out	0x2e, r24	; 46
     a40:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a42:	07 fe       	sbrs	r0, 7
     a44:	fd cf       	rjmp	.-6      	; 0xa40 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x38>
     a46:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a48:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     a4a:	8a 8b       	std	Y+18, r24	; 0x12
     a4c:	00 c1       	rjmp	.+512    	; 0xc4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x246>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     a4e:	6d 89       	ldd	r22, Y+21	; 0x15
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     a50:	8f 89       	ldd	r24, Y+23	; 0x17
     a52:	f9 db       	rcall	.-2062   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     a54:	9d 89       	ldd	r25, Y+21	; 0x15
     a56:	89 17       	cp	r24, r25
     a58:	11 f0       	breq	.+4      	; 0xa5e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x56>
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	fb c0       	rjmp	.+502    	; 0xc54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
                    return ResultChecksumError;
     a5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a60:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     a62:	ad c0       	rjmp	.+346    	; 0xbbe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b6>
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	f6 c0       	rjmp	.+492    	; 0xc54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
                    return ResultIllegalMessageType;
     a68:	2a 98       	cbi	0x05, 2	; 5
     a6a:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a6c:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a6e:	0d b4       	in	r0, 0x2d	; 45
     a70:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x66>
     a74:	1e b5       	in	r17, 0x2e	; 46
     a76:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a78:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a7a:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     a7c:	84 30       	cpi	r24, 0x04	; 4
     a7e:	69 f7       	brne	.-38     	; 0xa5a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     a80:	ea 8d       	ldd	r30, Y+26	; 0x1a
     a82:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     a84:	0d b4       	in	r0, 0x2d	; 45
     a86:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a88:	fd cf       	rjmp	.-6      	; 0xa84 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     a8a:	9e b5       	in	r25, 0x2e	; 46
     a8c:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a8e:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a90:	fd 1f       	adc	r31, r29
     a92:	91 8f       	std	Z+25, r25	; 0x19
     a94:	8f 89       	ldd	r24, Y+23	; 0x17
     a96:	89 27       	eor	r24, r25
     a98:	8f 8b       	std	Y+23, r24	; 0x17
     a9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a9c:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     a9e:	9a 8f       	std	Y+26, r25	; 0x1a
     aa0:	9c 89       	ldd	r25, Y+20	; 0x14
     aa2:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     aa4:	11 c0       	rjmp	.+34     	; 0xac8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     aa6:	2a 98       	cbi	0x05, 2	; 5
     aa8:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     aaa:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     aac:	0d b4       	in	r0, 0x2d	; 45
     aae:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     ab2:	8e b5       	in	r24, 0x2e	; 46
     ab4:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     ab6:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ab8:	0d b4       	in	r0, 0x2d	; 45
     aba:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     abe:	2a 9a       	sbi	0x05, 2	; 5
     ac0:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     ac2:	8a 8b       	std	Y+18, r24	; 0x12
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     ac4:	1a 8e       	std	Y+26, r1	; 0x1a
     ac6:	c1 c0       	rjmp	.+386    	; 0xc4a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
                _i = 0;
     ac8:	6d 89       	ldd	r22, Y+21	; 0x15
     aca:	bd db       	rcall	.-2182   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     acc:	9d 89       	ldd	r25, Y+21	; 0x15
     ace:	89 13       	cpse	r24, r25
     ad0:	c4 cf       	rjmp	.-120    	; 0xa5a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     ad2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ad4:	88 23       	and	r24, r24
     ad6:	31 f2       	breq	.-116    	; 0xa64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     ad8:	89 8d       	ldd	r24, Y+25	; 0x19
     ada:	8b 83       	std	Y+3, r24	; 0x03
     adc:	1a 8e       	std	Y+26, r1	; 0x1a
                    return ResultIllegalMessageType;                    

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     ade:	6f c0       	rjmp	.+222    	; 0xbbe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b6>
     ae0:	2a 98       	cbi	0x05, 2	; 5

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     ae2:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     ae4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     ae6:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xde>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     aec:	1e b5       	in	r17, 0x2e	; 46
     aee:	1e bd       	out	0x2e, r17	; 46
     af0:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     af2:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     af4:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     af6:	09 f0       	breq	.+2      	; 0xafa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
     af8:	b0 cf       	rjmp	.-160    	; 0xa5a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     afa:	0d b4       	in	r0, 0x2d	; 45
     afc:	07 fe       	sbrs	r0, 7
     afe:	fd cf       	rjmp	.-6      	; 0xafa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b00:	9e b5       	in	r25, 0x2e	; 46
     b02:	2a 9a       	sbi	0x05, 2	; 5
     b04:	98 8f       	std	Y+24, r25	; 0x18
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b06:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b08:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     b0a:	8f 8b       	std	Y+23, r24	; 0x17
     b0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b0e:	9f 5f       	subi	r25, 0xFF	; 255
     b10:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next OD octet
     b12:	91 11       	cpse	r25, r1
     b14:	37 c0       	rjmp	.+110    	; 0xb84 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17c>
     b16:	2a 98       	cbi	0x05, 2	; 5
     b18:	83 e8       	ldi	r24, 0x83	; 131
     b1a:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b1c:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b1e:	07 fe       	sbrs	r0, 7
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x114>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b22:	8e b5       	in	r24, 0x2e	; 46
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b28:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b2a:	07 fe       	sbrs	r0, 7
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b2e:	2a 9a       	sbi	0x05, 2	; 5
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	75 c0       	rjmp	.+234    	; 0xc1e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b34:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     b36:	80 e1       	ldi	r24, 0x10	; 16
     b38:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b3a:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b3c:	07 fe       	sbrs	r0, 7
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x132>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b40:	1e b5       	in	r17, 0x2e	; 46
     b42:	1e bd       	out	0x2e, r17	; 46
     b44:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b46:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b48:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     b4a:	09 f0       	breq	.+2      	; 0xb4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
     b4c:	86 cf       	rjmp	.-244    	; 0xa5a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b4e:	0d b4       	in	r0, 0x2d	; 45
     b50:	07 fe       	sbrs	r0, 7
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b54:	9e b5       	in	r25, 0x2e	; 46
     b56:	2a 9a       	sbi	0x05, 2	; 5
     b58:	8f 89       	ldd	r24, Y+23	; 0x17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b5a:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b5c:	8f 8b       	std	Y+23, r24	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     b5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b60:	9f 5f       	subi	r25, 0xFF	; 255
     b62:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next PD octet
     b64:	91 11       	cpse	r25, r1
     b66:	0e c0       	rjmp	.+28     	; 0xb84 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17c>
     b68:	2a 98       	cbi	0x05, 2	; 5
     b6a:	83 e8       	ldi	r24, 0x83	; 131
     b6c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b6e:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b70:	07 fe       	sbrs	r0, 7
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x166>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b74:	8e b5       	in	r24, 0x2e	; 46
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b7a:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b7c:	07 fe       	sbrs	r0, 7
     b7e:	fd cf       	rjmp	.-6      	; 0xb7a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x172>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b80:	2a 9a       	sbi	0x05, 2	; 5
     b82:	63 c0       	rjmp	.+198    	; 0xc4a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
     b84:	6d 89       	ldd	r22, Y+21	; 0x15
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b86:	5f db       	rcall	.-2370   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     b88:	9d 89       	ldd	r25, Y+21	; 0x15
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     b8a:	89 13       	cpse	r24, r25
     b8c:	66 cf       	rjmp	.-308    	; 0xa5a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b90:	88 23       	and	r24, r24
     b92:	09 f4       	brne	.+2      	; 0xb96 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x18e>
     b94:	67 cf       	rjmp	.-306    	; 0xa64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     b96:	8c 89       	ldd	r24, Y+20	; 0x14
     b98:	98 8d       	ldd	r25, Y+24	; 0x18
     b9a:	28 2f       	mov	r18, r24
     b9c:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     b9e:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     ba0:	41 f0       	breq	.+16     	; 0xbb2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1aa>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     ba2:	89 89       	ldd	r24, Y+17	; 0x11
     ba4:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     ba6:	89 8b       	std	Y+17, r24	; 0x11
     ba8:	89 8d       	ldd	r24, Y+25	; 0x19
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	1a 8e       	std	Y+26, r1	; 0x1a
     bae:	1f 8a       	std	Y+23, r1	; 0x17
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     bb0:	28 c0       	rjmp	.+80     	; 0xc02 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1fa>
     bb2:	8f 71       	andi	r24, 0x1F	; 31

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     bb4:	88 87       	std	Y+8, r24	; 0x08
                _checksum8 = 0;
     bb6:	99 87       	std	Y+9, r25	; 0x09
                goto frame_snd_pd;
     bb8:	89 89       	ldd	r24, Y+17	; 0x11
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     bba:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     bbc:	f4 cf       	rjmp	.-24     	; 0xba6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x19e>
        _parameterWrite.value = data;
     bbe:	1f 8a       	std	Y+23, r1	; 0x17
        _prmWriteAvailable = true;
     bc0:	8c 89       	ldd	r24, Y+20	; 0x14
     bc2:	68 2f       	mov	r22, r24
     bc4:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     bc6:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bc8:	22 db       	rcall	.-2492   	; 0x20e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     bca:	2a 98       	cbi	0x05, 2	; 5
     bcc:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     bce:	9e bd       	out	0x2e, r25	; 46
     bd0:	0d b4       	in	r0, 0x2d	; 45
     bd2:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     bd4:	fd cf       	rjmp	.-6      	; 0xbd0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1c8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bd6:	1e b5       	in	r17, 0x2e	; 46
     bd8:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bda:	0d b4       	in	r0, 0x2d	; 45
     bdc:	07 fe       	sbrs	r0, 7
     bde:	fd cf       	rjmp	.-6      	; 0xbda <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1d2>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     be0:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     be2:	9f 89       	ldd	r25, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     be4:	89 27       	eor	r24, r25
     be6:	8f 8b       	std	Y+23, r24	; 0x17
     be8:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     bea:	2d db       	rcall	.-2470   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     bec:	8e 8b       	std	Y+22, r24	; 0x16
     bee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bf0:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     bf2:	8a 8f       	std	Y+26, r24	; 0x1a
     bf4:	81 11       	cpse	r24, r1
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f4>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     bf8:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     bfa:	11 c0       	rjmp	.+34     	; 0xc1e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
     bfc:	1a 8e       	std	Y+26, r1	; 0x1a
     bfe:	89 e0       	ldi	r24, 0x09	; 9
     c00:	0e c0       	rjmp	.+28     	; 0xc1e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
     c02:	8e 89       	ldd	r24, Y+22	; 0x16
            {
                _frameState = FRAME_SND_ODX;
     c04:	2a 98       	cbi	0x05, 2	; 5
     c06:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     c08:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     c0a:	0d b4       	in	r0, 0x2d	; 45
     c0c:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     c0e:	fd cf       	rjmp	.-6      	; 0xc0a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x202>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c10:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c12:	8e bd       	out	0x2e, r24	; 46
     c14:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c16:	07 fe       	sbrs	r0, 7
     c18:	fd cf       	rjmp	.-6      	; 0xc14 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x20c>
     c1a:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c1c:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c1e:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
     c22:	2a 98       	cbi	0x05, 2	; 5
     c24:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c26:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     c28:	0d b4       	in	r0, 0x2d	; 45
     c2a:	07 fe       	sbrs	r0, 7
        }
        break;
     c2c:	fd cf       	rjmp	.-6      	; 0xc28 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x220>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c2e:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c34:	0d b4       	in	r0, 0x2d	; 45
     c36:	07 fe       	sbrs	r0, 7
     c38:	fd cf       	rjmp	.-6      	; 0xc34 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x22c>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c3a:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	88 83       	st	Y, r24
     c44:	60 e0       	ldi	r22, 0x00	; 0
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c46:	ce 01       	movw	r24, r28
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     c48:	1b dc       	rcall	.-1994   	; 0x480 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
     c4a:	17 ff       	sbrs	r17, 7

            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24a>
     c4e:	80 e0       	ldi	r24, 0x00	; 0
              
            // start user call-back timer
            startCallbackTimer();
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     c58:	1f 91       	pop	r17
     c5a:	08 95       	ret

00000c5c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     c5c:	fc 01       	movw	r30, r24
     c5e:	2a 98       	cbi	0x05, 2	; 5
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     c60:	80 e8       	ldi	r24, 0x80	; 128
    else
        return ResultSuccess;
}
     c62:	8e bd       	out	0x2e, r24	; 46
     c64:	0d b4       	in	r0, 0x2d	; 45
     c66:	07 fe       	sbrs	r0, 7
     c68:	fd cf       	rjmp	.-6      	; 0xc64 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c6a:	8c e0       	ldi	r24, 0x0C	; 12
     c6c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c6e:	0d b4       	in	r0, 0x2d	; 45
     c70:	07 fe       	sbrs	r0, 7
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x12>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c74:	82 e3       	ldi	r24, 0x32	; 50
     c76:	8e bd       	out	0x2e, r24	; 46
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     c78:	87 81       	ldd	r24, Z+7	; 0x07
     c7a:	80 fd       	sbrc	r24, 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x26>
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x28>
     c82:	92 e0       	ldi	r25, 0x02	; 2
    
    // REG_CTL
    StackBase::registerWriteNext(StackT::PHY_CTL_SCT | 
                                 StackT::PHY_CTL_MODE | 
                                 Phy::CTL_SIO_MODE | 
                                 driveModeBits());
     c84:	9c 60       	ori	r25, 0x0C	; 12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c86:	0d b4       	in	r0, 0x2d	; 45
     c88:	07 fe       	sbrs	r0, 7
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x2a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c8c:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c8e:	0d b4       	in	r0, 0x2d	; 45
     c90:	07 fe       	sbrs	r0, 7
     c92:	fd cf       	rjmp	.-6      	; 0xc8e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x32>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c94:	1e bc       	out	0x2e, r1	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c96:	0d b4       	in	r0, 0x2d	; 45
     c98:	07 fe       	sbrs	r0, 7
     c9a:	fd cf       	rjmp	.-6      	; 0xc96 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x3a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ca0:	0d b4       	in	r0, 0x2d	; 45
     ca2:	07 fe       	sbrs	r0, 7
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x44>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ca6:	1e bc       	out	0x2e, r1	; 46
    
    // REG_STATUS (HMT7742) / REG_TEMP (HMT7748) - (dummy write)
    Phy::registerWriteNext(0);        
    
    // LEDs
    StackBase::registerWriteNext(this->_ledRegister);        
     ca8:	87 85       	ldd	r24, Z+15	; 0x0f
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     caa:	0d b4       	in	r0, 0x2d	; 45
     cac:	07 fe       	sbrs	r0, 7
     cae:	fd cf       	rjmp	.-6      	; 0xcaa <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x4e>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     cb0:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     cb2:	0d b4       	in	r0, 0x2d	; 45
     cb4:	07 fe       	sbrs	r0, 7
     cb6:	fd cf       	rjmp	.-6      	; 0xcb2 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x56>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     cb8:	2a 9a       	sbi	0x05, 2	; 5
#endif

    registerWriteDone();

    // set the stack to SIO mode to be in sync with the PHY.
    _ddlMode = IoLink::DDL_MODE_IDLE;
     cba:	10 82       	st	Z, r1
     cbc:	08 95       	ret

00000cbe <__vector_4>:
Interrupt service routine for the PHY interrupt.

We immediately forward the call to onPhyInterrupt().
*/
ISR(PCINT1_vect)
{
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
    // 
    // (If INT isn't cleared after the handler, then the PHY state is probably
    //  out of sync with the one expected by the firmware. In that case, this
    //  ISR will never be called again. Looping the handler ensures we eventually
    //  resync before exiting the ISR)
    while (bit_is_set(PINC, PINC0))
     ce0:	30 9b       	sbis	0x06, 0	; 6
     ce2:	79 c0       	rjmp	.+242    	; 0xdd6 <__vector_4+0x118>

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     ce4:	80 91 13 01 	lds	r24, 0x0113
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	20 f4       	brcc	.+8      	; 0xcf4 <__vector_4+0x36>
    {
        result = handleFirstOperatingModes();
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	b5 da       	rcall	.-2710   	; 0x25c <_ZN15StackSingleByte25handleFirstOperatingModesEv>
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <__vector_4+0x38>
     cf4:	80 e0       	ldi	r24, 0x00	; 0

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     cf6:	90 91 13 01 	lds	r25, 0x0113
    {
        result = handleFirstOperatingModes();
    }
    
    if (_frameState > FRAME_RCV_CKT)
     cfa:	93 30       	cpi	r25, 0x03	; 3
     cfc:	88 f0       	brcs	.+34     	; 0xd20 <__vector_4+0x62>
     cfe:	80 91 14 01 	lds	r24, 0x0114
    {
        // call appropriate state handler
        switch (_receiveDdlMode)
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	31 f0       	breq	.+12     	; 0xd12 <__vector_4+0x54>
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	41 f4       	brne	.+16     	; 0xd1a <__vector_4+0x5c>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
        {
        case IoLink::DDL_MODE_OPERATE:    
            result = handleOperatingMode<IoLink::DDL_MODE_OPERATE>(); 
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	fb db       	rcall	.-2058   	; 0x506 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
     d10:	07 c0       	rjmp	.+14     	; 0xd20 <__vector_4+0x62>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	91 e0       	ldi	r25, 0x01	; 1
            break;
        case IoLink::DDL_MODE_PREOPERATE:
            result = handleOperatingMode<IoLink::DDL_MODE_PREOPERATE>();
     d16:	50 dd       	rcall	.-1376   	; 0x7b8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <__vector_4+0x62>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	74 de       	rcall	.-792    	; 0xa08 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
            break;
        default:                  
            result = handleOperatingMode<IoLink::DDL_MODE_STARTUP>(); 
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	19 f1       	breq	.+70     	; 0xd6a <__vector_4+0xac>
     d24:	84 30       	cpi	r24, 0x04	; 4
     d26:	c9 f1       	breq	.+114    	; 0xd9a <__vector_4+0xdc>
            break;
        }
    }

    // handle result codes
    switch (result)
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	09 f0       	breq	.+2      	; 0xd2e <__vector_4+0x70>
     d2c:	4a c0       	rjmp	.+148    	; 0xdc2 <__vector_4+0x104>
     d2e:	2a 99       	sbic	0x05, 2	; 5
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <__vector_4+0x7c>
     d32:	0d b4       	in	r0, 0x2d	; 45
     d34:	07 fe       	sbrs	r0, 7

//------------------------------------------------------------------------------
template <class SpiSsHndlr> 
void PhyDriver<SpiSsHndlr>::registerAbortAccess()
{
    if (_ssHndlr.asserted())
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <__vector_4+0x74>
     d38:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d3a:	2a 98       	cbi	0x05, 2	; 5
     d3c:	83 e8       	ldi	r24, 0x83	; 131
     d3e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     d40:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d42:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d44:	fd cf       	rjmp	.-6      	; 0xd40 <__vector_4+0x82>
     d46:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	9e bd       	out	0x2e, r25	; 46
     d4c:	0d b4       	in	r0, 0x2d	; 45
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d4e:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d50:	fd cf       	rjmp	.-6      	; 0xd4c <__vector_4+0x8e>
     d52:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d54:	81 ff       	sbrs	r24, 1
     d56:	31 c0       	rjmp	.+98     	; 0xdba <__vector_4+0xfc>
     d58:	80 91 01 01 	lds	r24, 0x0101
            registerAbortAccess();

            // bad data has been received, so decline to respond
            uint8_t status = registerWrite(REG_LINK, LINK_END);
        
            if ((status & STATUS_SSC) && (_ddlMode == IoLink::DDL_MODE_IDLE))
     d5c:	81 11       	cpse	r24, r1
     d5e:	2d c0       	rjmp	.+90     	; 0xdba <__vector_4+0xfc>
     d60:	6f e7       	ldi	r22, 0x7F	; 127
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	8c db       	rcall	.-2280   	; 0x480 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
            {
                // setIoLinkListen();
                
                // a possible WURQ has been received, go quiet
                startCallbackTimer(127);
     d68:	28 c0       	rjmp	.+80     	; 0xdba <__vector_4+0xfc>
     d6a:	2a 98       	cbi	0x05, 2	; 5
     d6c:	83 e8       	ldi	r24, 0x83	; 131
     d6e:	8e bd       	out	0x2e, r24	; 46
     d70:	0d b4       	in	r0, 0x2d	; 45
     d72:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d74:	fd cf       	rjmp	.-6      	; 0xd70 <__vector_4+0xb2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d76:	8e b5       	in	r24, 0x2e	; 46
     d78:	82 e0       	ldi	r24, 0x02	; 2
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d7a:	8e bd       	out	0x2e, r24	; 46
     d7c:	0d b4       	in	r0, 0x2d	; 45
     d7e:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d80:	fd cf       	rjmp	.-6      	; 0xd7c <__vector_4+0xbe>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d82:	2a 9a       	sbi	0x05, 2	; 5
     d84:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d86:	80 93 13 01 	sts	0x0113, r24
     d8a:	80 91 01 01 	lds	r24, 0x0101
    case ResultIllegalMessageType:
        // bad data has been received, so decline to respond
        registerWrite(REG_LINK, LINK_END);

        // reset state
        _frameState = FRAME_RCV_MC;
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	b8 f0       	brcs	.+46     	; 0xdc0 <__vector_4+0x102>
     d92:	82 e0       	ldi	r24, 0x02	; 2

        // revert to startup mode
        if (_ddlMode>IoLink::DDL_MODE_STARTUP)
     d94:	80 93 01 01 	sts	0x0101, r24
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <__vector_4+0x102>
     d9a:	2a 98       	cbi	0x05, 2	; 5
            _ddlMode = IoLink::DDL_MODE_STARTUP;
     d9c:	85 e8       	ldi	r24, 0x85	; 133
     d9e:	8e bd       	out	0x2e, r24	; 46
     da0:	0d b4       	in	r0, 0x2d	; 45
     da2:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     da4:	fd cf       	rjmp	.-6      	; 0xda0 <__vector_4+0xe2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     da6:	8e b5       	in	r24, 0x2e	; 46
     da8:	80 e8       	ldi	r24, 0x80	; 128
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     daa:	8e bd       	out	0x2e, r24	; 46
     dac:	0d b4       	in	r0, 0x2d	; 45
     dae:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     db0:	fd cf       	rjmp	.-6      	; 0xdac <__vector_4+0xee>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     db2:	2a 9a       	sbi	0x05, 2	; 5
     db4:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	51 df       	rcall	.-350    	; 0xc5c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv>
     dba:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     dbc:	80 93 13 01 	sts	0x0113, r24
        break;

    case ResultPhyReset:
        // reset the reset bit
        registerWrite(REG_STATUS, STATUS_RST);
        configurePhy();
     dc0:	3b da       	rcall	.-2954   	; 0x238 <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7>
     dc2:	80 91 13 01 	lds	r24, 0x0113

        // reset state
        _frameState = FRAME_RCV_MC;
     dc6:	88 50       	subi	r24, 0x08	; 8
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <__vector_4+0x112>
        
        // restart the timer
        restartTimer();
     dcc:	30 9b       	sbis	0x06, 0	; 6
     dce:	fe cf       	rjmp	.-4      	; 0xdcc <__vector_4+0x10e>

    // When sending, the UART transmission delay t2 (see A.3.4) must be less
    // than 3*Tbit (= 13us @ 230'400baud). We can't meet this timing constraint
    // if we wait for the next interrupt, so we loop until the last octet has
    // been sent, and immediately re-enter the ISR.
    switch (_frameState)
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	8b bb       	out	0x1b, r24	; 27
     dd4:	85 cf       	rjmp	.-246    	; 0xce0 <__vector_4+0x22>
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
    {
    case FRAME_SND_ODX:
    case FRAME_SND_PD:
    case FRAME_SND_CKS:
        // wait until byte sent (can be removed if MPU frequency 20Mhz)
        loop_until_bit_is_set(PINC, PINC0);
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
    while (bit_is_set(PINC, PINC0))
    {
        StackSingleByte::instance.onPhyInterrupt();

        // clear interrupt flag
        PCIFR = _BV(PCIF1);
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
    }
}
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <_GLOBAL__sub_I_directParameter>:
     df8:	e1 e0       	ldi	r30, 0x01	; 1
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	10 82       	st	Z, r1
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
     e00:	95 83       	std	Z+5, r25	; 0x05
     e02:	a8 e0       	ldi	r26, 0x08	; 8
     e04:	b1 e0       	ldi	r27, 0x01	; 1
    , _ledRegister(0)
    , _fallbackCounter(0)
    , _runUserCode(false)
    , _sioLevel(true)
    , _prmWriteAvailable(false)
    , _flag(false)
     e06:	8c 91       	ld	r24, X
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	13 86       	std	Z+11, r1	; 0x0b
     e0e:	12 86       	std	Z+10, r1	; 0x0a
     e10:	15 86       	std	Z+13, r1	; 0x0d
     e12:	14 86       	std	Z+12, r1	; 0x0c
     e14:	96 87       	std	Z+14, r25	; 0x0e
     e16:	17 86       	std	Z+15, r1	; 0x0f
     e18:	10 8a       	std	Z+16, r1	; 0x10
     e1a:	a2 e1       	ldi	r26, 0x12	; 18
     e1c:	b1 e0       	ldi	r27, 0x01	; 1
     e1e:	8c 91       	ld	r24, X
     e20:	8c 7f       	andi	r24, 0xFC	; 252
     e22:	8b 7f       	andi	r24, 0xFB	; 251
     e24:	8c 93       	st	X, r24
{
    _parameterWrite.address = IoLink::PAGE_NO_PARAMETER;
     e26:	90 87       	std	Z+8, r25	; 0x08
     * 
     * \note Use \c Stack::instance to access the stack instance
     */
    StackSingleByte() : _frameState(FRAME_RESET),
                        _tccr0bRecord(0),
                        _receiveDdlMode(IoLink::DDL_MODE_IDLE) {}
     e28:	12 8a       	std	Z+18, r1	; 0x12
     e2a:	13 8a       	std	Z+19, r1	; 0x13
     e2c:	13 8e       	std	Z+27, r1	; 0x1b
     e2e:	08 95       	ret

00000e30 <_ZN7DemoApp9configureEv>:

//------------------------------------------------------------------------------
void DemoApp::configure()
{
    // Configure a timer with 10ms cycle
    OCR2A   = F_CPU / 1024 / 100;
     e30:	8e e4       	ldi	r24, 0x4E	; 78
     e32:	80 93 b3 00 	sts	0x00B3, r24

    /* Start the timer
       WGM    = 3'b010  - clear timer on match
       COMxx  = 2'b0    - pins not used
       CS     = 3'b111   - divide by 1024 */
    TCCR2A = _BV(WGM21);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);
     e3c:	87 e0       	ldi	r24, 0x07	; 7
     e3e:	80 93 b1 00 	sts	0x00B1, r24

    // configure digital input
    DDRB &= ~_BV(DDB7);
     e42:	27 98       	cbi	0x04, 7	; 4
     e44:	08 95       	ret

00000e46 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>:
    updateProcessInputData();
}

//------------------------------------------------------------------------------
void DemoApp::handleParameterWrite(const Stack::Parameter* param)
{
     e46:	fb 01       	movw	r30, r22
    // (this is the location to intercept the write access if desired)
    bool commit = true;

    switch (param->address)
     e48:	80 81       	ld	r24, Z
     e4a:	81 31       	cpi	r24, 0x11	; 17
     e4c:	09 f4       	brne	.+2      	; 0xe50 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa>
     e4e:	7a c0       	rjmp	.+244    	; 0xf44 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	82 31       	cpi	r24, 0x12	; 18
     e54:	29 f0       	breq	.+10     	; 0xe60 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x1a>
     e56:	80 31       	cpi	r24, 0x10	; 16
     e58:	59 f4       	brne	.+22     	; 0xe70 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
    case IoLink::PAGE_DEVICE_SPECIFIC_1B:
    case IoLink::PAGE_DEVICE_SPECIFIC_1C:
    case IoLink::PAGE_DEVICE_SPECIFIC_1D:
    case IoLink::PAGE_DEVICE_SPECIFIC_1E:
    case IoLink::PAGE_DEVICE_SPECIFIC_1F:
        directParameter[address] = value;
     e5a:	90 93 37 01 	sts	0x0137, r25
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
        // read-only access => ignore
        commit = false;
        break;

    case VendorParamPidMode:  // process input data selection
        switch (param->value)
     e60:	91 30       	cpi	r25, 0x01	; 1
     e62:	31 f4       	brne	.+12     	; 0xe70 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
        {
        case PidAnalogInput:
            // configure ADC
            ADMUX = _BV(REFS0) | 7; 
     e64:	87 e4       	ldi	r24, 0x47	; 71
     e66:	80 93 7c 00 	sts	0x007C, r24
            ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADEN) | _BV(ADSC);
     e6a:	87 ec       	ldi	r24, 0xC7	; 199
     e6c:	80 93 7a 00 	sts	0x007A, r24
    }

    if (commit)
    {
        // commit to stack
        Stack::instance.parameterWrite(param->address, param->value);
     e70:	21 81       	ldd	r18, Z+1	; 0x01
     e72:	e0 81       	ld	r30, Z
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e74:	ec 30       	cpi	r30, 0x0C	; 12
     e76:	08 f0       	brcs	.+2      	; 0xe7a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x34>
     e78:	60 c0       	rjmp	.+192    	; 0xf3a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xf4>
     e7a:	e9 30       	cpi	r30, 0x09	; 9
     e7c:	50 f0       	brcs	.+20     	; 0xe92 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x4c>

    case IoLink::PAGE_REVISION_ID:
    case IoLink::PAGE_DEVICE_ID_1:
    case IoLink::PAGE_DEVICE_ID_2:
    case IoLink::PAGE_DEVICE_ID_3:
        if (_ddlMode == IoLink::DDL_MODE_STARTUP)
     e7e:	80 91 01 01 	lds	r24, 0x0101
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	09 f0       	breq	.+2      	; 0xe88 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
     e86:	5e c0       	rjmp	.+188    	; 0xf44 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
        {
            directParameter[address] = value;
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	ea 5d       	subi	r30, 0xDA	; 218
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	20 83       	st	Z, r18
     e90:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e92:	e1 30       	cpi	r30, 0x01	; 1
     e94:	69 f5       	brne	.+90     	; 0xef0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xaa>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     e96:	80 91 01 01 	lds	r24, 0x0101
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	21 f4       	brne	.+8      	; 0xea6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x60>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     e9e:	80 91 27 01 	lds	r24, 0x0127
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     ea2:	81 11       	cpse	r24, r1
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x64>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     ea6:	80 91 28 01 	lds	r24, 0x0128
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	d0 f0       	brcs	.+52     	; 0xee2 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x9c>
     eae:	80 34       	cpi	r24, 0x40	; 64
     eb0:	10 f4       	brcc	.+4      	; 0xeb6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x70>
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	18 c0       	rjmp	.+48     	; 0xee6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     eb6:	98 2f       	mov	r25, r24
     eb8:	90 7c       	andi	r25, 0xC0	; 192
     eba:	90 34       	cpi	r25, 0x40	; 64
     ebc:	41 f4       	brne	.+16     	; 0xece <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x88>
     ebe:	34 e0       	ldi	r19, 0x04	; 4
     ec0:	83 9f       	mul	r24, r19
     ec2:	c0 01       	movw	r24, r0
     ec4:	11 24       	eor	r1, r1
     ec6:	99 27       	eor	r25, r25
     ec8:	80 5c       	subi	r24, 0xC0	; 192
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	0c c0       	rjmp	.+24     	; 0xee6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     ece:	90 38       	cpi	r25, 0x80	; 128
     ed0:	41 f4       	brne	.+16     	; 0xee2 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x9c>
     ed2:	8f 73       	andi	r24, 0x3F	; 63
     ed4:	30 e1       	ldi	r19, 0x10	; 16
     ed6:	83 9f       	mul	r24, r19
     ed8:	c0 01       	movw	r24, r0
     eda:	11 24       	eor	r1, r1
     edc:	80 5c       	subi	r24, 0xC0	; 192
     ede:	9e 4f       	sbci	r25, 0xFE	; 254
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	90 93 0c 01 	sts	0x010C, r25
     eea:	80 93 0b 01 	sts	0x010B, r24
     eee:	cc cf       	rjmp	.-104    	; 0xe88 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     ef0:	e1 30       	cpi	r30, 0x01	; 1
     ef2:	f8 f4       	brcc	.+62     	; 0xf32 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xec>
    {
    case IoLink::PAGE_MASTER_CMD:
        switch (value)
     ef4:	28 39       	cpi	r18, 0x98	; 152
     ef6:	a1 f0       	breq	.+40     	; 0xf20 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xda>
     ef8:	28 f4       	brcc	.+10     	; 0xf04 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xbe>
     efa:	2a 35       	cpi	r18, 0x5A	; 90
     efc:	b1 f0       	breq	.+44     	; 0xf2a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xe4>
     efe:	27 39       	cpi	r18, 0x97	; 151
     f00:	31 f0       	breq	.+12     	; 0xf0e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xc8>
     f02:	08 95       	ret
     f04:	29 39       	cpi	r18, 0x99	; 153
     f06:	49 f0       	breq	.+18     	; 0xf1a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xd4>
     f08:	2a 39       	cpi	r18, 0x9A	; 154
     f0a:	19 f0       	breq	.+6      	; 0xf12 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xcc>
     f0c:	08 95       	ret
        {
        case IoLink::MCMD_DEVICE_STARTUP:   
            _ddlMode = IoLink::DDL_MODE_STARTUP;  
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_DEVICE_PREOPERATE:
            _ddlMode = IoLink::DDL_MODE_PREOPERATE; 
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	80 93 01 01 	sts	0x0101, r24
     f18:	08 95       	ret
            break;
        case IoLink::MCMD_DEVICE_OPERATE:   
            _processDataOut.isValid = false;
     f1a:	10 92 05 01 	sts	0x0105, r1
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xe0>
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
            break;
        case IoLink::MCMD_PD_OUT_OPERATE:   // Process output data valid
            _processDataOut.isValid = true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 05 01 	sts	0x0105, r24
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	f5 cf       	rjmp	.-22     	; 0xf14 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_FALLBACK:
            // switch to SIO mode after 3 cycles
            _fallbackCounter = 3;
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	80 93 11 01 	sts	0x0111, r24
     f30:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     f32:	e4 30       	cpi	r30, 0x04	; 4
     f34:	09 f4       	brne	.+2      	; 0xf38 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xf2>
     f36:	a3 cf       	rjmp	.-186    	; 0xe7e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x38>
     f38:	08 95       	ret
     f3a:	81 ef       	ldi	r24, 0xF1	; 241
     f3c:	8e 0f       	add	r24, r30
     f3e:	81 31       	cpi	r24, 0x11	; 17
     f40:	08 f4       	brcc	.+2      	; 0xf44 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
     f42:	a2 cf       	rjmp	.-188    	; 0xe88 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
     f44:	08 95       	ret

00000f46 <_ZN7DemoApp11elapsed10msEv>:
}

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
     f46:	b9 9b       	sbis	0x17, 1	; 23
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <_ZN7DemoApp11elapsed10msEv+0xc>
        return false;

    TIFR2 = _BV(OCF2A);
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	87 bb       	out	0x17, r24	; 23
    return true;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	08 95       	ret

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
        return false;
     f52:	80 e0       	ldi	r24, 0x00	; 0

    TIFR2 = _BV(OCF2A);
    return true;
}
     f54:	08 95       	ret

00000f56 <_ZN7DemoApp22updateProcessInputDataEv>:
    }
}

//------------------------------------------------------------------------------
void DemoApp::updateProcessInputData()
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
    if (elapsed10ms())
     f5c:	f4 df       	rcall	.-24     	; 0xf46 <_ZN7DemoApp11elapsed10msEv>
     f5e:	88 23       	and	r24, r24
     f60:	61 f1       	breq	.+88     	; 0xfba <_ZN7DemoApp22updateProcessInputDataEv+0x64>
     f62:	88 81       	ld	r24, Y
    {
        // the green LED cycles if IO-Link comms are up, red if not
        ++_ctr;
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	88 83       	st	Y, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t level = ((_ctr >> 3) & 0x0f);
     f6a:	23 e0       	ldi	r18, 0x03	; 3
     f6c:	95 95       	asr	r25
     f6e:	87 95       	ror	r24
     f70:	2a 95       	dec	r18
     f72:	e1 f7       	brne	.-8      	; 0xf6c <_ZN7DemoApp22updateProcessInputDataEv+0x16>
     f74:	98 2f       	mov	r25, r24
     f76:	9f 70       	andi	r25, 0x0F	; 15
     f78:	83 ff       	sbrs	r24, 3
        if (level & 0x8) level = ((~level) & 0x7);
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <_ZN7DemoApp22updateProcessInputDataEv+0x2a>
     f7c:	90 95       	com	r25
     f7e:	97 70       	andi	r25, 0x07	; 7
     f80:	80 91 06 01 	lds	r24, 0x0106

        if (Stack::instance.masterLost())
     f84:	85 30       	cpi	r24, 0x05	; 5
     f86:	18 f0       	brcs	.+6      	; 0xf8e <_ZN7DemoApp22updateProcessInputDataEv+0x38>
     f88:	19 82       	std	Y+1, r1	; 0x01
            {
                // flash the red LED
                _ledLevel1 = Stack::LED_LEVEL_OFF;
     f8a:	9a 83       	std	Y+2, r25	; 0x02
                _ledLevel2 = (Stack::LedLevel)(level);
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <_ZN7DemoApp22updateProcessInputDataEv+0x3c>
     f8e:	99 83       	std	Y+1, r25	; 0x01
            }
            else
            {
                // flash the green LED
                _ledLevel1 = (Stack::LedLevel)(level);
     f90:	1a 82       	std	Y+2, r1	; 0x02
                _ledLevel2 = Stack::LED_LEVEL_OFF;
     f92:	1f 99       	sbic	0x03, 7	; 3
            };

        // the red LED is over-ridden if the push-button is pressed
        if (isDigitalButtonPressed())
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <_ZN7DemoApp22updateProcessInputDataEv+0x44>
     f96:	8f e0       	ldi	r24, 0x0F	; 15
        {
            _ledLevel2 = (Stack::LedLevel)(0xf);
     f98:	8a 83       	std	Y+2, r24	; 0x02
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
        _ledRegister |= (level << 4);
     f9c:	20 e1       	ldi	r18, 0x10	; 16
     f9e:	82 9f       	mul	r24, r18
     fa0:	c0 01       	movw	r24, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	90 91 10 01 	lds	r25, 0x0110
void StackBase<T, PDI, PDO, SpiSsHndlr>::setLedLevel(Led led, typename Phy::LedLevel level)
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
     fa8:	9f 70       	andi	r25, 0x0F	; 15
     faa:	89 2b       	or	r24, r25
        _ledRegister |= (level << 4);
     fac:	80 93 10 01 	sts	0x0110, r24
     fb0:	80 7f       	andi	r24, 0xF0	; 240
        break;

    case LED_2:
        _ledRegister &= 0xf0;
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
        _ledRegister |= level;
     fb4:	89 2b       	or	r24, r25
     fb6:	80 93 10 01 	sts	0x0110, r24
     fba:	80 91 38 01 	lds	r24, 0x0138

        Stack::instance.setLedLevel(Stack::LED_1, _ledLevel1);
        Stack::instance.setLedLevel(Stack::LED_2, _ledLevel2);
    }

    switch (Stack::instance.parameterRead(VendorParamPidMode))
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	71 f0       	breq	.+28     	; 0xfde <_ZN7DemoApp22updateProcessInputDataEv+0x88>
     fc2:	38 f0       	brcs	.+14     	; 0xfd2 <_ZN7DemoApp22updateProcessInputDataEv+0x7c>
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	09 f1       	breq	.+66     	; 0x100a <_ZN7DemoApp22updateProcessInputDataEv+0xb4>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	31 f5       	brne	.+76     	; 0x1018 <_ZN7DemoApp22updateProcessInputDataEv+0xc2>
     fcc:	80 91 4e 01 	lds	r24, 0x014E
        Stack::instance.processInputData().buffer[0] = _ctr;
        Stack::instance.processInputData().isValid = true;
        break;
		
	case PidI2cData:
		Stack::instance.processInputData().buffer[0] = i2cData[0];
     fd0:	1d c0       	rjmp	.+58     	; 0x100c <_ZN7DemoApp22updateProcessInputDataEv+0xb6>
     fd2:	83 b1       	in	r24, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
     fd4:	80 95       	com	r24

    switch (Stack::instance.parameterRead(VendorParamPidMode))
    {
    case PidDigitalInput:
        // check digital sensor 
        Stack::instance.processInputData().buffer[0] = isDigitalButtonPressed() ? 0x01 : 0x00;
     fd6:	88 1f       	adc	r24, r24
     fd8:	88 27       	eor	r24, r24
     fda:	88 1f       	adc	r24, r24
     fdc:	17 c0       	rjmp	.+46     	; 0x100c <_ZN7DemoApp22updateProcessInputDataEv+0xb6>
     fde:	90 91 7a 00 	lds	r25, 0x007A
        Stack::instance.processInputData().isValid = true;
        break;

    case PidAnalogInput:
        // check analog sensor
        if (!(ADCSRA & _BV(ADSC)))
     fe2:	96 fd       	sbrc	r25, 6
     fe4:	1b c0       	rjmp	.+54     	; 0x101c <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
     fe6:	20 91 78 00 	lds	r18, 0x0078
        {
            uint16_t sensorValue = ADC;
     fea:	30 91 79 00 	lds	r19, 0x0079
     fee:	36 95       	lsr	r19

            Stack::instance.processInputData().buffer[0] = sensorValue >> 2;
     ff0:	27 95       	ror	r18
     ff2:	36 95       	lsr	r19
     ff4:	27 95       	ror	r18
     ff6:	20 93 02 01 	sts	0x0102, r18
     ffa:	80 93 03 01 	sts	0x0103, r24
            Stack::instance.processInputData().isValid = true;
     ffe:	80 91 7a 00 	lds	r24, 0x007A

            // restart sampling
            ADCSRA |= _BV(ADSC);
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	80 93 7a 00 	sts	0x007A, r24
    1008:	09 c0       	rjmp	.+18     	; 0x101c <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
    100a:	88 81       	ld	r24, Y
        }
        break;

    case PidSawtooth:
        // copy counter to process input data
        Stack::instance.processInputData().buffer[0] = _ctr;
    100c:	80 93 02 01 	sts	0x0102, r24
        Stack::instance.processInputData().isValid = true;
        break;
		
	case PidI2cData:
		Stack::instance.processInputData().buffer[0] = i2cData[0];
    1010:	81 e0       	ldi	r24, 0x01	; 1
		Stack::instance.processInputData().isValid = true;
    1012:	80 93 03 01 	sts	0x0103, r24
    1016:	02 c0       	rjmp	.+4      	; 0x101c <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
		break;
    1018:	10 92 03 01 	sts	0x0103, r1

    default:
        Stack::instance.processInputData().isValid = false;
    101c:	df 91       	pop	r29
        break;
    }
}
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>:
    1022:	cf 93       	push	r28
    DDRB &= ~_BV(DDB7);
}

//------------------------------------------------------------------------------
void DemoApp::run(const Stack::Parameter* param)
{
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
    // check for write access to direct parameter page
    if (param)
    1028:	61 15       	cp	r22, r1
    102a:	71 05       	cpc	r23, r1
    102c:	11 f0       	breq	.+4      	; 0x1032 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x10>
    {
        handleParameterWrite(param);
    102e:	0b df       	rcall	.-490    	; 0xe46 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>
    1030:	27 c0       	rjmp	.+78     	; 0x1080 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x5e>
    1032:	80 91 01 01 	lds	r24, 0x0101
    }
    else if (Stack::instance.stackMode() == Stack::STACK_MODE_SIO)
    1036:	81 11       	cpse	r24, r1
    1038:	23 c0       	rjmp	.+70     	; 0x1080 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x5e>
    103a:	93 b1       	in	r25, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
    103c:	90 95       	com	r25
    103e:	99 1f       	adc	r25, r25
    1040:	99 27       	eor	r25, r25
    1042:	99 1f       	adc	r25, r25
    1044:	80 91 08 01 	lds	r24, 0x0108

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::setSioLevel(bool active)
{
    _sioLevel = active;
    1048:	90 fb       	bst	r25, 0
    104a:	80 f9       	bld	r24, 0
    104c:	80 93 08 01 	sts	0x0108, r24
    1050:	91 11       	cpse	r25, r1
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x36>
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x38>
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
    105c:	80 93 07 01 	sts	0x0107, r24
    1060:	81 e0       	ldi	r24, 0x01	; 1
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
    1062:	80 93 00 01 	sts	0x0100, r24
    1066:	9c 60       	ori	r25, 0x0C	; 12
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
    1068:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
    106a:	82 e8       	ldi	r24, 0x82	; 130
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    106c:	8e bd       	out	0x2e, r24	; 46
    106e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    1070:	07 fe       	sbrs	r0, 7
    1072:	fd cf       	rjmp	.-6      	; 0x106e <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x4c>
    1074:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
    1076:	9e bd       	out	0x2e, r25	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    1078:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    107a:	07 fe       	sbrs	r0, 7
    107c:	fd cf       	rjmp	.-6      	; 0x1078 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x56>
    107e:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
    1080:	ce 01       	movw	r24, r28
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    1082:	df 91       	pop	r29
}
    1084:	cf 91       	pop	r28
    1086:	67 cf       	rjmp	.-306    	; 0xf56 <_ZN7DemoApp22updateProcessInputDataEv>

00001088 <i2c_init>:
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	88 eb       	ldi	r24, 0xB8	; 184
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	29 ef       	ldi	r18, 0xF9	; 249
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
    109a:	86 e6       	ldi	r24, 0x66	; 102
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 83       	st	Z, r18
    10a4:	81 e6       	ldi	r24, 0x61	; 97
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	20 e8       	ldi	r18, 0x80	; 128
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
    10ae:	81 e6       	ldi	r24, 0x61	; 97
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	20 e8       	ldi	r18, 0x80	; 128
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
    10b8:	88 eb       	ldi	r24, 0xB8	; 184
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	2c e0       	ldi	r18, 0x0C	; 12
    10be:	fc 01       	movw	r30, r24
    10c0:	20 83       	st	Z, r18
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <i2c_start>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <i2c_start+0x6>
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	8c eb       	ldi	r24, 0xBC	; 188
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	fc 01       	movw	r30, r24
    10da:	10 82       	st	Z, r1
    10dc:	8c eb       	ldi	r24, 0xBC	; 188
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	24 ea       	ldi	r18, 0xA4	; 164
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
    10e6:	00 00       	nop
    10e8:	8c eb       	ldi	r24, 0xBC	; 188
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	fc 01       	movw	r30, r24
    10ee:	80 81       	ld	r24, Z
    10f0:	88 23       	and	r24, r24
    10f2:	d4 f7       	brge	.-12     	; 0x10e8 <i2c_start+0x20>
    10f4:	89 eb       	ldi	r24, 0xB9	; 185
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	fc 01       	movw	r30, r24
    10fa:	80 81       	ld	r24, Z
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	99 27       	eor	r25, r25
    1104:	08 97       	sbiw	r24, 0x08	; 8
    1106:	11 f0       	breq	.+4      	; 0x110c <i2c_start+0x44>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	20 c0       	rjmp	.+64     	; 0x114c <i2c_start+0x84>
    110c:	8b eb       	ldi	r24, 0xBB	; 187
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	2a 81       	ldd	r18, Y+2	; 0x02
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
    1116:	8c eb       	ldi	r24, 0xBC	; 188
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	24 e8       	ldi	r18, 0x84	; 132
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18
    1120:	00 00       	nop
    1122:	8c eb       	ldi	r24, 0xBC	; 188
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	fc 01       	movw	r30, r24
    1128:	80 81       	ld	r24, Z
    112a:	88 23       	and	r24, r24
    112c:	d4 f7       	brge	.-12     	; 0x1122 <i2c_start+0x5a>
    112e:	89 eb       	ldi	r24, 0xB9	; 185
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	88 7f       	andi	r24, 0xF8	; 248
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	88 31       	cpi	r24, 0x18	; 24
    113e:	29 f0       	breq	.+10     	; 0x114a <i2c_start+0x82>
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	80 34       	cpi	r24, 0x40	; 64
    1144:	11 f0       	breq	.+4      	; 0x114a <i2c_start+0x82>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	01 c0       	rjmp	.+2      	; 0x114c <i2c_start+0x84>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <i2c_read_ack>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	8c eb       	ldi	r24, 0xBC	; 188
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	24 ec       	ldi	r18, 0xC4	; 196
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
    1168:	00 00       	nop
    116a:	8c eb       	ldi	r24, 0xBC	; 188
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	fc 01       	movw	r30, r24
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	d4 f7       	brge	.-12     	; 0x116a <i2c_read_ack+0x14>
    1176:	8b eb       	ldi	r24, 0xBB	; 187
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	80 81       	ld	r24, Z
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <i2c_read_nack>:
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8c eb       	ldi	r24, 0xBC	; 188
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	24 e8       	ldi	r18, 0x84	; 132
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
    1196:	00 00       	nop
    1198:	8c eb       	ldi	r24, 0xBC	; 188
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	88 23       	and	r24, r24
    11a2:	d4 f7       	brge	.-12     	; 0x1198 <i2c_read_nack+0x14>
    11a4:	8b eb       	ldi	r24, 0xBB	; 187
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <i2c_receive>:
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	27 97       	sbiw	r28, 0x07	; 7
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	7d 83       	std	Y+5, r23	; 0x05
    11ce:	6c 83       	std	Y+4, r22	; 0x04
    11d0:	5f 83       	std	Y+7, r21	; 0x07
    11d2:	4e 83       	std	Y+6, r20	; 0x06
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	81 60       	ori	r24, 0x01	; 1
    11d8:	77 df       	rcall	.-274    	; 0x10c8 <i2c_start>
    11da:	88 23       	and	r24, r24
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <i2c_receive+0x30>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	29 c0       	rjmp	.+82     	; 0x1234 <i2c_receive+0x82>
    11e2:	1a 82       	std	Y+2, r1	; 0x02
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <i2c_receive+0x54>
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	89 01       	movw	r16, r18
    11f2:	08 0f       	add	r16, r24
    11f4:	19 1f       	adc	r17, r25
    11f6:	af df       	rcall	.-162    	; 0x1156 <i2c_read_ack>
    11f8:	f8 01       	movw	r30, r16
    11fa:	80 83       	st	Z, r24
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	9c 01       	movw	r18, r24
    120c:	21 50       	subi	r18, 0x01	; 1
    120e:	31 09       	sbc	r19, r1
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	82 17       	cp	r24, r18
    1216:	93 07       	cpc	r25, r19
    1218:	38 f3       	brcs	.-50     	; 0x11e8 <i2c_receive+0x36>
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	89 01       	movw	r16, r18
    1226:	08 0f       	add	r16, r24
    1228:	19 1f       	adc	r17, r25
    122a:	ac df       	rcall	.-168    	; 0x1184 <i2c_read_nack>
    122c:	f8 01       	movw	r30, r16
    122e:	80 83       	st	Z, r24
    1230:	0c d0       	rcall	.+24     	; 0x124a <i2c_stop>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	27 96       	adiw	r28, 0x07	; 7
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <i2c_stop>:
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8c eb       	ldi	r24, 0xBC	; 188
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	24 e9       	ldi	r18, 0x94	; 148
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv>:
    return StackBase::registerRead(Phy::REG_TEMP);
}

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::configure()
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    DORD   = 1'b0   - MSB first
    MSTR   = 1'b1   - Master
    CPOL   = 1'b1   - clock idles high
    CPHA   = 1'b1   - sample on trailing edge
    SPR    = 2'b00  - fosc/2 */
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(CPHA);
    1268:	8c e5       	ldi	r24, 0x5C	; 92
    126a:	8c bd       	out	0x2c, r24	; 44

    /* and the SPI2X bit to speed it up */
    SPSR = _BV(SPI2X);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	8d bd       	out	0x2d, r24	; 45

    /* Data direction in the SPI bits, PB2/SS, PB5/SCK
    and PB3/MOSI are outputs.  Drive SS high in advance */
    PORTB |= _BV(PORTB2) | _BV(PORTB5);
    1270:	85 b1       	in	r24, 0x05	; 5
    1272:	84 62       	ori	r24, 0x24	; 36
    1274:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(_BV(PORTB3)); 
    1276:	2b 98       	cbi	0x05, 3	; 5
    DDRB  |= _BV(DDB5) | _BV(DDB3) | _BV(DDB2);
    1278:	84 b1       	in	r24, 0x04	; 4
    127a:	8c 62       	ori	r24, 0x2C	; 44
    127c:	84 b9       	out	0x04, r24	; 4
    DDRB  &= ~(_BV(DDB4));
    127e:	24 98       	cbi	0x04, 4	; 4
        HIBYTE(StackT::DEVICE_ID),                      // PAGE_DEVICE_ID_2
        LOBYTE(StackT::DEVICE_ID)                       // PAGE_DEVICE_ID_3
    };

    // copy the default parameters from flash to RAM
    (void)memcpy_P(directParameter, directDefaultConfig, sizeof(directDefaultConfig));
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	60 eb       	ldi	r22, 0xB0	; 176
    1286:	71 e0       	ldi	r23, 0x01	; 1
    1288:	86 e2       	ldi	r24, 0x26	; 38
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	ee d0       	rcall	.+476    	; 0x146a <memcpy_P>
    128e:	18 82       	st	Y, r1

    // stack initial state is STACK_MODE_SIO operation
    _ddlMode = IoLink::DDL_MODE_IDLE;
    1290:	1a 82       	std	Y+2, r1	; 0x02

    // set up the process data buffers and default process data
    _processDataIn.isValid = false;
    1292:	1c 82       	std	Y+4, r1	; 0x04
    _processDataOut.isValid = false;
    1294:	80 91 68 00 	lds	r24, 0x0068
{
    // Configure and enable interrupt
    // 
    // Only pin change interrupts are available, so the routine must check
    // the level before returning
    PCICR  |= _BV(PCIE1);
    1298:	82 60       	ori	r24, 0x02	; 2
    129a:	80 93 68 00 	sts	0x0068, r24
    129e:	80 91 6c 00 	lds	r24, 0x006C
    PCMSK1 |= _BV(PCINT8);
    12a2:	81 60       	ori	r24, 0x01	; 1
    12a4:	80 93 6c 00 	sts	0x006C, r24
    12a8:	0a dd       	rcall	.-1516   	; 0xcbe <__vector_4>

    // call ISR handler
    PCINT1_vect();
    12aa:	1d 82       	std	Y+5, r1	; 0x05
    12ac:	15 bc       	out	0x25, r1	; 37
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
    12ae:	16 bc       	out	0x26, r1	; 38

    // disable timer
    TCCR0B = 0;
    12b0:	85 b3       	in	r24, 0x15	; 21
    TCNT0 = 0;
    12b2:	87 60       	ori	r24, 0x07	; 7

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
    12b4:	85 bb       	out	0x15, r24	; 21
    12b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	49 f5       	brne	.+82     	; 0x1310 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xae>
    12be:	28 81       	ld	r18, Y
    12c0:	24 30       	cpi	r18, 0x04	; 4
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    12c2:	21 f4       	brne	.+8      	; 0x12cc <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x6a>
    12c4:	20 91 27 01 	lds	r18, 0x0127
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    12c8:	21 11       	cpse	r18, r1
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x6e>
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
    12cc:	20 91 28 01 	lds	r18, 0x0128
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    12d0:	24 30       	cpi	r18, 0x04	; 4
    12d2:	e0 f0       	brcs	.+56     	; 0x130c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
    12d4:	20 34       	cpi	r18, 0x40	; 64
    12d6:	18 f4       	brcc	.+6      	; 0x12de <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x7c>
    12d8:	82 2f       	mov	r24, r18
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	17 c0       	rjmp	.+46     	; 0x130c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    12de:	32 2f       	mov	r19, r18
    12e0:	30 7c       	andi	r19, 0xC0	; 192
    12e2:	30 34       	cpi	r19, 0x40	; 64
    12e4:	49 f4       	brne	.+18     	; 0x12f8 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x96>
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	28 9f       	mul	r18, r24
    12ea:	90 01       	movw	r18, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	33 27       	eor	r19, r19
    12f0:	c9 01       	movw	r24, r18
    12f2:	80 5c       	subi	r24, 0xC0	; 192
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	0a c0       	rjmp	.+20     	; 0x130c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    12f8:	30 38       	cpi	r19, 0x80	; 128
    12fa:	41 f4       	brne	.+16     	; 0x130c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    12fc:	2f 73       	andi	r18, 0x3F	; 63
    12fe:	80 e1       	ldi	r24, 0x10	; 16
    1300:	28 9f       	mul	r18, r24
    1302:	90 01       	movw	r18, r0
    1304:	11 24       	eor	r1, r1
    1306:	c9 01       	movw	r24, r18
    1308:	80 5c       	subi	r24, 0xC0	; 192
    130a:	9e 4f       	sbci	r25, 0xFE	; 254
    130c:	9b 87       	std	Y+11, r25	; 0x0b
    130e:	8a 87       	std	Y+10, r24	; 0x0a
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
    1314:	9d 87       	std	Y+13, r25	; 0x0d
    1316:	8c 87       	std	Y+12, r24	; 0x0c
    1318:	84 e0       	ldi	r24, 0x04	; 4
    131a:	80 93 6e 00 	sts	0x006E, r24

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	84 bd       	out	0x24, r24	; 36

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
    1322:	94 e6       	ldi	r25, 0x64	; 100
    1324:	97 bd       	out	0x27, r25	; 39

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
    1326:	98 bd       	out	0x28, r25	; 40
    1328:	85 bd       	out	0x25, r24	; 37
    132a:	df 91       	pop	r29
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
    132c:	cf 91       	pop	r28
    configureStackBase();
    Phy::configure();

    // start timer responsible for calling the application "main loop"
    startCallbackTimer();
};
    132e:	08 95       	ret

00001330 <main>:
    1330:	2f ef       	ldi	r18, 0xFF	; 255
    1332:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1334:	94 e0       	ldi	r25, 0x04	; 4
    1336:	21 50       	subi	r18, 0x01	; 1
    1338:	80 40       	sbci	r24, 0x00	; 0
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	e1 f7       	brne	.-8      	; 0x1336 <main+0x6>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <main+0x10>
    1340:	00 00       	nop
public:
    //! setup the HW configuration
    static void configure()
    {
        // Port PD4 and PD5 as output
        DDRD  |= _BV(DDD4) | _BV(DDD5);
    1342:	8a b1       	in	r24, 0x0a	; 10
    1344:	80 63       	ori	r24, 0x30	; 48
    1346:	8a b9       	out	0x0a, r24	; 10
        {
            PORTD |= _BV(PORTD4);
        }
        else
        {
            PORTD &= ~(_BV(PORTD4));
    1348:	5c 98       	cbi	0x0b, 4	; 11
    // instantiate DemoApp
    DemoApp& theApp = DemoApp::instance;

    // configure all software modules
    DebugPin::configure();
    DemoApp::configure();   
    134a:	72 dd       	rcall	.-1308   	; 0xe30 <_ZN7DemoApp9configureEv>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    Stack::instance.configure();
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	88 df       	rcall	.-240    	; 0x1262 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv>
    1352:	9a de       	rcall	.-716    	; 0x1088 <i2c_init>
    1354:	50 d0       	rcall	.+160    	; 0x13f6 <spi_init_bitbanging>

	i2c_init();	// setup TWI
    1356:	10 92 4e 01 	sts	0x014E, r1
	spi_init_bitbanging();
    135a:	3a 9a       	sbi	0x07, 2	; 7
    135c:	78 94       	sei
	i2cData[0]=0;
    135e:	83 b7       	in	r24, 0x33	; 51
    1360:	81 7f       	andi	r24, 0xF1	; 241
	DDRC |= (1 << INDICATOR_BIT);		// set pins to output
    1362:	83 bf       	out	0x33, r24	; 51
    // enable interrupts
    sei();
    1364:	83 b7       	in	r24, 0x33	; 51
	

    // select sleep mode
    set_sleep_mode(SLEEP_MODE_IDLE);
    1366:	81 60       	ori	r24, 0x01	; 1
    1368:	83 bf       	out	0x33, r24	; 51
    136a:	88 95       	sleep

    // enter infinite loop: processing is interrupt controlled from now on
    for (;;)
    {
        // enter sleep until interrupt wakes us up
        sleep_mode();
    136c:	83 b7       	in	r24, 0x33	; 51
    136e:	8e 7f       	andi	r24, 0xFE	; 254
    1370:	83 bf       	out	0x33, r24	; 51
    1372:	80 91 12 01 	lds	r24, 0x0112
    1376:	80 ff       	sbrs	r24, 0
    1378:	f5 cf       	rjmp	.-22     	; 0x1364 <main+0x34>
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
bool StackBase<T, PDI, PDO, SpiSsHndlr>::canRunUserCode(const Parameter*& lastWrittenParameter)
{
    // allow execution of user code?
    if (!_runUserCode)
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	80 93 12 01 	sts	0x0112, r24
    1380:	81 ff       	sbrs	r24, 1
        return false;

    // reset flag
    _runUserCode = false;
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <main+0x60>
    1384:	8d 7f       	andi	r24, 0xFD	; 253
    1386:	80 93 12 01 	sts	0x0112, r24

    // test for parameter write access
    if (_prmWriteAvailable)
    138a:	c9 e0       	ldi	r28, 0x09	; 9
    {
        lastWrittenParameter = &_parameterWrite;

        // reset write access
        _prmWriteAvailable = false;
    138c:	d1 e0       	ldi	r29, 0x01	; 1
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <main+0x64>
    1390:	c0 e0       	ldi	r28, 0x00	; 0
    _runUserCode = false;

    // test for parameter write access
    if (_prmWriteAvailable)
    {
        lastWrittenParameter = &_parameterWrite;
    1392:	d0 e0       	ldi	r29, 0x00	; 0
    1394:	42 e0       	ldi	r20, 0x02	; 2
    1396:	50 e0       	ldi	r21, 0x00	; 0
        // reset write access
        _prmWriteAvailable = false;
    }
    else
    {
        lastWrittenParameter = NULL;
    1398:	6e e4       	ldi	r22, 0x4E	; 78
    139a:	71 e0       	ldi	r23, 0x01	; 1
        // check if it's time to run user code
        const Stack::Parameter* paramWrite;
        if (Stack::instance.canRunUserCode(paramWrite))
        {
			// update sensordata
			i2c_receive(0b10011010, i2cData, 2);
    139c:	8a e9       	ldi	r24, 0x9A	; 154
    139e:	09 df       	rcall	.-494    	; 0x11b2 <i2c_receive>
    13a0:	90 91 4e 01 	lds	r25, 0x014E
    13a4:	29 2f       	mov	r18, r25
    13a6:	22 95       	swap	r18
    13a8:	22 0f       	add	r18, r18
			// bring i2c data in right format
			uint8_t i2cDataTemp[2];
			i2cDataTemp[0]=i2cData[1];
			i2cDataTemp[1]=i2cData[0];
    13aa:	22 0f       	add	r18, r18
    13ac:	20 7c       	andi	r18, 0xC0	; 192
			i2cData[0]=(0x3F & (i2cDataTemp[0]/4))|((uint8_t)(0xC0 & (i2cDataTemp[1]*64)));	// store data in right format
    13ae:	80 91 4f 01 	lds	r24, 0x014F
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	82 2b       	or	r24, r18
    13b8:	80 93 4e 01 	sts	0x014E, r24
    13bc:	96 95       	lsr	r25
    13be:	96 95       	lsr	r25
    13c0:	90 93 4f 01 	sts	0x014F, r25
    13c4:	81 e3       	ldi	r24, 0x31	; 49
			i2cData[1]=i2cDataTemp[1]/4;
    13c6:	80 93 4a 01 	sts	0x014A, r24
    13ca:	10 92 4b 01 	sts	0x014B, r1
			spiData[0]=0x31;
    13ce:	98 b1       	in	r25, 0x08	; 8
    13d0:	84 e0       	ldi	r24, 0x04	; 4
    13d2:	89 27       	eor	r24, r25
			spiData[1]=0;
    13d4:	88 b9       	out	0x08, r24	; 8
    13d6:	80 91 6c 00 	lds	r24, 0x006C
			//spi_sendBytes_bitbanging(spiData, 4);
			PORTC = PORTC ^ 0x04;	// toggle indicator bit
    13da:	8e 7f       	andi	r24, 0xFE	; 254
    13dc:	80 93 6c 00 	sts	0x006C, r24

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::stopInterrupt()
{
    PCMSK1 &= ~(_BV(PCINT8));
    13e0:	be 01       	movw	r22, r28
    13e2:	86 e4       	ldi	r24, 0x46	; 70
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	1d de       	rcall	.-966    	; 0x1022 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>
    13e8:	80 91 6c 00 	lds	r24, 0x006C
			
            Stack::instance.stopInterrupt();
            theApp.run(paramWrite);	// update processdata
    13ec:	81 60       	ori	r24, 0x01	; 1
    13ee:	80 93 6c 00 	sts	0x006C, r24
    13f2:	65 dc       	rcall	.-1846   	; 0xcbe <__vector_4>

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::restartInterrupt()
{
    PCMSK1 |= _BV(PCINT8);
    13f4:	b7 cf       	rjmp	.-146    	; 0x1364 <main+0x34>

000013f6 <spi_init_bitbanging>:
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62

    // call ISR handler
    PCINT1_vect();
    13fe:	8a e2       	ldi	r24, 0x2A	; 42
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	2a e2       	ldi	r18, 0x2A	; 42
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	23 60       	ori	r18, 0x03	; 3
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
    1410:	84 e2       	ldi	r24, 0x24	; 36
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	24 e2       	ldi	r18, 0x24	; 36
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	20 64       	ori	r18, 0x40	; 64
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
    1422:	8a e2       	ldi	r24, 0x2A	; 42
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	2a e2       	ldi	r18, 0x2A	; 42
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	f9 01       	movw	r30, r18
    142c:	20 81       	ld	r18, Z
    142e:	27 7f       	andi	r18, 0xF7	; 247
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
    1434:	8b e2       	ldi	r24, 0x2B	; 43
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2b e2       	ldi	r18, 0x2B	; 43
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	20 81       	ld	r18, Z
    1440:	2c 7f       	andi	r18, 0xFC	; 252
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
    1446:	84 e2       	ldi	r24, 0x24	; 36
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	24 e2       	ldi	r18, 0x24	; 36
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	f9 01       	movw	r30, r18
    1450:	20 81       	ld	r18, Z
    1452:	20 64       	ori	r18, 0x40	; 64
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <__tablejump2__>:
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	05 90       	lpm	r0, Z+
    1464:	f4 91       	lpm	r31, Z
    1466:	e0 2d       	mov	r30, r0
    1468:	09 94       	ijmp

0000146a <memcpy_P>:
    146a:	fb 01       	movw	r30, r22
    146c:	dc 01       	movw	r26, r24
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <memcpy_P+0xa>
    1470:	05 90       	lpm	r0, Z+
    1472:	0d 92       	st	X+, r0
    1474:	41 50       	subi	r20, 0x01	; 1
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	d8 f7       	brcc	.-10     	; 0x1470 <memcpy_P+0x6>
    147a:	08 95       	ret

0000147c <_exit>:
    147c:	f8 94       	cli

0000147e <__stop_program>:
    147e:	ff cf       	rjmp	.-2      	; 0x147e <__stop_program>
