0.1.1 2012-01-25 dg
    - Moved all initialization data into PROGMEM: by default, all data (be it const, const static or anything) is always stored in RAM, not program memory, using up valuable memory resources (see http://www.nongnu.org/avr-libc/user-manual/pgmspace.html).
    - Replaced the tCPU class with an automatic Lock class. The result is the same, but one doesn't need to manually push/pop. Instead the Lock constructor/destructor does this automatically. The resulting code is the same, without any possible bugs due to unexpected function exits.
    - Changed the code to conform to ANSI standard. Note that no ';' is needed after code blocks (if (...) { ... }), nor after function definitions. Adding one will not harm compilation, but static code analysis tools will issue a warning.
    - Removed all typedefs uint8 / uint16 and instead use the ones defined in <stdint.h> (uint8_t, ...).
    - Replaced all "magic values" in AVR registers with their defines (e.g. PORTB2 instead of 0x04).
    - Moved all code in the ISR into a member function of the MiniStack class, and added a single call to that member function in the ISR, while forcing the compiler to inline the call. This simplifies class member access inside the interrupt handler, without any code overhead.
    - Replaced all bit tests with the apropriate AVR Libc functions / defines.
    - I will place each class in a separate file, otherwise there will be too much "clutter" in each file, and that's the usual way to do it. I know that you would like to have everything in one file, probably to easy navigation with "vi". We can concatenate everything once we're done if this is important to you.
    - Moved all variable declarations to the inner-most scope at their first point of use. This enables the compiler to reduce register use.
    - Replaced pointer arithmetic with array equivalents. Generated assembly identical, but much more readable. Also, pointer arithmetic won't pass static code analysis.
    - Question: configurePhy(): please explain byte sequence. I thought the MSB bit must be set in the address byte for write access. Also, what is address 0x00?
   
0.1.2 2012-01-27
    - [1.5hrs] Implemented ministack as CRTP (curiously recurring template pattern)
    
0.1.3 2012-01-28
    - [1.5hrs] Extracted stack size
    - Refactored HMT7742 specific code not dependent on specific stack into Hmt7742Driver class
    
0.1.4 2012-02-18
    - [1.5hrs] Correctly assembling CKS octet 
    - [2.5hrs] Implemented actual stack as derived type
    - [1.5hrs] Default parameters placed in falsh
    - [5hrs] Improved API
    
0.1.5 2012-02-19
    - [1.5hrs] Implemented write access
    
0.1.6 2012-02-20
    - [9hrs] Implemented single-byte mode (write access to direct parameter page still needs testing)

0.1.7 2012-02-23
    - [1.5hrs] Completed single-byte mode and tested various optimizations
	- [12hrs] Working on transparent mode (MOSI line sampling / restoring around
			  SPI access not yet implemented).

0.1.8 2012-03-02
	- [2.5hrs] Implemented MOSI/TX line caching in transparent mode

0.1.9 2012-03-30
    - [8.5hrs] Transparent mode working
    
0.1.10 2012-05-09
	- Implemented end-user API
	- Implemented demo application
	
0.1.11 2012-07-27
    - Implemented SIO should have minimum delay (Ticket #13)
    - Fixed Initialization of _parameterWrite address (Ticket #14)
    - Implemented multiple process and on-demand octets in all stacks (Ticket #15)
    - Updated documentation (Ticket #17)
    - Implemented Non-response to incorrect M-sequence types (Ticket #18)
    - Implemented SIO_DRIVE_MODE (Ticket #19)
    - Implemented SIO switch to IO-Link listening after delay if HiZ (#20)
    - Implemented masterLoss indication (Ticket #21)

0.1.12 2012-08-22
    - IODD files modified to respect version 1.0.1 and checked with checker version 1.0.4
    
0.1.13 2013-01-25
    - Updated project files to new folder layout
    - Implented support for transparent mode using hardware USART and external crystal for COM2 and COM3 (Ticket #22)
    - Updated documentation
    
0.1.14 2013-03-01
    - Updated fuse settings for external / internal oscillator (rmb)
    - Forcing inlininig of performance critical functions (rmb)
    - Immediately switching to SIO-Active mode when high-Z counter expires (rmb)
    - Correctly recover from frame errors (ticket #23)
    - Fixed LED flashing frequency in demo application (ticket #24)
    
