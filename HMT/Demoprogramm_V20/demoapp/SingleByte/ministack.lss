
ministack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001318  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001318  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800102  00800102  000013ee  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .signature    00000003  00840000  00840000  000013f1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f8  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008045  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013c2  00000000  00000000  000095a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000edc  00000000  00000000  0000a963  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000028c  00000000  00000000  0000b840  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002b8c  00000000  00000000  0000bacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001f96  00000000  00000000  0000e658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001a0  00000000  00000000  000105ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e8 c0       	rjmp	.+464    	; 0x1d2 <__ctors_end>
       2:	00 00       	nop
       4:	0e c1       	rjmp	.+540    	; 0x222 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c1       	rjmp	.+536    	; 0x222 <__bad_interrupt>
       a:	00 00       	nop
       c:	0a c1       	rjmp	.+532    	; 0x222 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c6       	rjmp	.+3266   	; 0xcd4 <__vector_4>
      12:	00 00       	nop
      14:	06 c1       	rjmp	.+524    	; 0x222 <__bad_interrupt>
      16:	00 00       	nop
      18:	04 c1       	rjmp	.+520    	; 0x222 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	02 c1       	rjmp	.+516    	; 0x222 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c1       	rjmp	.+512    	; 0x222 <__bad_interrupt>
      22:	00 00       	nop
      24:	fe c0       	rjmp	.+508    	; 0x222 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c0       	rjmp	.+504    	; 0x222 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fa c0       	rjmp	.+500    	; 0x222 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c0       	rjmp	.+496    	; 0x222 <__bad_interrupt>
      32:	00 00       	nop
      34:	f6 c0       	rjmp	.+492    	; 0x222 <__bad_interrupt>
      36:	00 00       	nop
      38:	f4 c0       	rjmp	.+488    	; 0x222 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ae c1       	rjmp	.+860    	; 0x39a <__vector_15>
      3e:	00 00       	nop
      40:	f0 c0       	rjmp	.+480    	; 0x222 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c0       	rjmp	.+476    	; 0x222 <__bad_interrupt>
      46:	00 00       	nop
      48:	ec c0       	rjmp	.+472    	; 0x222 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ea c0       	rjmp	.+468    	; 0x222 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e8 c0       	rjmp	.+464    	; 0x222 <__bad_interrupt>
      52:	00 00       	nop
      54:	e6 c0       	rjmp	.+460    	; 0x222 <__bad_interrupt>
      56:	00 00       	nop
      58:	e4 c0       	rjmp	.+456    	; 0x222 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e2 c0       	rjmp	.+452    	; 0x222 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_24>
      64:	de c0       	rjmp	.+444    	; 0x222 <__bad_interrupt>
      66:	00 00       	nop
      68:	e2 03       	fmuls	r22, r18
      6a:	f8 02       	muls	r31, r24
      6c:	f8 02       	muls	r31, r24
      6e:	9f 02       	muls	r25, r31
      70:	af 02       	muls	r26, r31
      72:	fe 02       	muls	r31, r30
      74:	28 03       	fmul	r18, r16
      76:	6d 03       	fmul	r22, r21
      78:	94 03       	fmuls	r17, r20
      7a:	94 03       	fmuls	r17, r20
      7c:	bc 03       	fmulsu	r19, r20
      7e:	cc 03       	fmulsu	r20, r20
      80:	0a 05       	cpc	r16, r10
      82:	15 04       	cpc	r1, r5
      84:	15 04       	cpc	r1, r5
      86:	f7 03       	fmuls	r23, r23
      88:	17 04       	cpc	r1, r7
      8a:	53 04       	cpc	r5, r3
      8c:	7d 04       	cpc	r7, r13
      8e:	c2 04       	cpc	r12, r2
      90:	e4 04       	cpc	r14, r4
      92:	e4 04       	cpc	r14, r4
      94:	e4 04       	cpc	r14, r4
      96:	f4 04       	cpc	r15, r4
      98:	34 06       	cpc	r3, r20
      9a:	3d 05       	cpc	r19, r13
      9c:	3d 05       	cpc	r19, r13
      9e:	1f 05       	cpc	r17, r15
      a0:	3f 05       	cpc	r19, r15
      a2:	7b 05       	cpc	r23, r11
      a4:	a5 05       	cpc	r26, r5
      a6:	ea 05       	cpc	r30, r10
      a8:	0c 06       	cpc	r0, r28
      aa:	0c 06       	cpc	r0, r28
      ac:	0c 06       	cpc	r0, r28
      ae:	1c 06       	cpc	r1, r28

000000b0 <__trampolines_end>:
      b0:	2d 3c       	cpi	r18, 0xCD	; 205
      b2:	0c 1d       	adc	r16, r12
      b4:	3f 2e       	mov	r3, r31
      b6:	1e 0f       	add	r17, r30
      b8:	0f 1e       	adc	r0, r31
      ba:	2e 3f       	cpi	r18, 0xFE	; 254
      bc:	1d 0c       	add	r1, r13
      be:	3c 2d       	mov	r19, r12
      c0:	39 28       	or	r3, r9
      c2:	18 09       	sbc	r17, r8
      c4:	2b 3a       	cpi	r18, 0xAB	; 171
      c6:	0a 1b       	sub	r16, r26
      c8:	1b 0a       	sbc	r1, r27
      ca:	3a 2b       	or	r19, r26
      cc:	09 18       	sub	r0, r9
      ce:	28 39       	cpi	r18, 0x98	; 152
      d0:	09 18       	sub	r0, r9
      d2:	28 39       	cpi	r18, 0x98	; 152
      d4:	1b 0a       	sbc	r1, r27
      d6:	3a 2b       	or	r19, r26
      d8:	2b 3a       	cpi	r18, 0xAB	; 171
      da:	0a 1b       	sub	r16, r26
      dc:	39 28       	or	r3, r9
      de:	18 09       	sbc	r17, r8
      e0:	1d 0c       	add	r1, r13
      e2:	3c 2d       	mov	r19, r12
      e4:	0f 1e       	adc	r0, r31
      e6:	2e 3f       	cpi	r18, 0xFE	; 254
      e8:	3f 2e       	mov	r3, r31
      ea:	1e 0f       	add	r17, r30
      ec:	2d 3c       	cpi	r18, 0xCD	; 205
      ee:	0c 1d       	adc	r16, r12
      f0:	35 24       	eor	r3, r5
      f2:	14 05       	cpc	r17, r4
      f4:	27 36       	cpi	r18, 0x67	; 103
      f6:	06 17       	cp	r16, r22
      f8:	17 06       	cpc	r1, r23
      fa:	36 27       	eor	r19, r22
      fc:	05 14       	cp	r0, r5
      fe:	24 35       	cpi	r18, 0x54	; 84
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	00 11       	cpse	r16, r0
     104:	33 22       	and	r3, r19
     106:	12 03       	mulsu	r17, r18
     108:	03 12       	cpse	r0, r19
     10a:	22 33       	cpi	r18, 0x32	; 50
     10c:	11 00       	.word	0x0011	; ????
     10e:	30 21       	and	r19, r0
     110:	11 00       	.word	0x0011	; ????
     112:	30 21       	and	r19, r0
     114:	03 12       	cpse	r0, r19
     116:	22 33       	cpi	r18, 0x32	; 50
     118:	33 22       	and	r3, r19
     11a:	12 03       	mulsu	r17, r18
     11c:	21 30       	cpi	r18, 0x01	; 1
     11e:	00 11       	cpse	r16, r0
     120:	05 14       	cp	r0, r5
     122:	24 35       	cpi	r18, 0x54	; 84
     124:	17 06       	cpc	r1, r23
     126:	36 27       	eor	r19, r22
     128:	27 36       	cpi	r18, 0x67	; 103
     12a:	06 17       	cp	r16, r22
     12c:	35 24       	eor	r3, r5
     12e:	14 05       	cpc	r17, r4
	...

000001b0 <_ZZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18configureStackBaseEvE19directDefaultConfig>:
     1b0:	00 00 14 00 11 48 08 01 a6 12 34 56 00 00 00 00     .....H....4V....
	...

000001d0 <__ctors_start>:
     1d0:	07 07       	cpc	r16, r23

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d8 e0       	ldi	r29, 0x08	; 8
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	e8 e1       	ldi	r30, 0x18	; 24
     1e6:	f3 e1       	ldi	r31, 0x13	; 19
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a2 30       	cpi	r26, 0x02	; 2
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	a2 e0       	ldi	r26, 0x02	; 2
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	a1 35       	cpi	r26, 0x51	; 81
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>

00000204 <__do_global_ctors>:
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	c9 ee       	ldi	r28, 0xE9	; 233
     208:	d0 e0       	ldi	r29, 0x00	; 0
     20a:	04 c0       	rjmp	.+8      	; 0x214 <__do_global_ctors+0x10>
     20c:	21 97       	sbiw	r28, 0x01	; 1
     20e:	fe 01       	movw	r30, r28
     210:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__tablejump2__>
     214:	c8 3e       	cpi	r28, 0xE8	; 232
     216:	d1 07       	cpc	r29, r17
     218:	c9 f7       	brne	.-14     	; 0x20c <__do_global_ctors+0x8>
     21a:	0e 94 35 09 	call	0x126a	; 0x126a <main>
     21e:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <_exit>

00000222 <__bad_interrupt>:
     222:	ee ce       	rjmp	.-548    	; 0x0 <__vectors>

00000224 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>:
template <class T, int PDI, int PDO, class SpiSsHndlr>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::odRead(uint8_t channel, uint8_t address)
{
    uint8_t data;

    switch (channel)
     224:	80 32       	cpi	r24, 0x20	; 32
     226:	19 f0       	breq	.+6      	; 0x22e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0xa>
     228:	80 34       	cpi	r24, 0x40	; 64
     22a:	31 f0       	breq	.+12     	; 0x238 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x14>
     22c:	0d c0       	rjmp	.+26     	; 0x248 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x24>
    {
    case IoLink::MC_CHNL_PAGE:  // Direct parameter page channel
        data = directParameter[address];
     22e:	e6 2f       	mov	r30, r22
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	e8 5d       	subi	r30, 0xD8	; 216
     234:	fe 4f       	sbci	r31, 0xFE	; 254
     236:	06 c0       	rjmp	.+12     	; 0x244 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x20>
        break;

    case IoLink::MC_CHNL_DIAG:  // Diagnosis channel
        if (address > 6)
     238:	67 30       	cpi	r22, 0x07	; 7
     23a:	38 f4       	brcc	.+14     	; 0x24a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x26>
            break;

        data = eventPage[address];
     23c:	e6 2f       	mov	r30, r22
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	e0 5e       	subi	r30, 0xE0	; 224
     242:	fe 4f       	sbci	r31, 0xFE	; 254
     244:	90 81       	ld	r25, Z
     246:	01 c0       	rjmp	.+2      	; 0x24a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x26>
        break;

    default:            // SPDU and process data not handled
//        ASSERT(address == IoLink::MC_ADDR_ISDU_IDLE1 || address == IoLink::MC_ADDR_ISDU_IDLE2);
        data = 0;
     248:	90 e0       	ldi	r25, 0x00	; 0
    }

    return data;
}
     24a:	89 2f       	mov	r24, r25
     24c:	08 95       	ret

0000024e <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7>:
     * Restarts a stopped timer
     * 
     */
    void inline restartTimer()
    {
        if (TCCR0B == 0)
     24e:	85 b5       	in	r24, 0x25	; 37
     250:	81 11       	cpse	r24, r1
     252:	03 c0       	rjmp	.+6      	; 0x25a <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7+0xc>
           TCCR0B = _tccr0bRecord;          
     254:	80 91 1e 01 	lds	r24, 0x011E
     258:	85 bd       	out	0x25, r24	; 37
     25a:	08 95       	ret

0000025c <_ZN6IoLink17calculateChecksumEhh>:
            0x11, 0x00, 0x30, 0x21, 0x03, 0x12, 0x22, 0x33, 0x33, 0x22, 0x12, 0x03, 0x21, 0x30, 0x00, 0x11,
            0x05, 0x14, 0x24, 0x35, 0x17, 0x06, 0x36, 0x27, 0x27, 0x36, 0x06, 0x17, 0x35, 0x24, 0x14, 0x05
        };

        // include CKT octet with Checksum bits (0..6) set to "0" (see A.1.6)
        ckt &= CKT_TYPE_MASK;
     25c:	60 7c       	andi	r22, 0xC0	; 192
        checksum8 ^= ckt;
     25e:	86 27       	eor	r24, r22

        // fold checksum8 at 0x80
        if (checksum8 >= 0x80)
     260:	87 fd       	sbrc	r24, 7
        {
            checksum8 = ~checksum8;
     262:	80 95       	com	r24
            checksum8 = ((checksum8 >> 1) & 0xf8) | (checksum8 & 0x07);
        }
#endif

        // calculate result checksum and combine with type bits (7..8) in original CKT
        ckt |=  pgm_read_byte(&checksum6[checksum8]);
     264:	e8 2f       	mov	r30, r24
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	e0 55       	subi	r30, 0x50	; 80
     26a:	ff 4f       	sbci	r31, 0xFF	; 255
     26c:	84 91       	lpm	r24, Z

        return ckt;
    }
     26e:	86 2b       	or	r24, r22
     270:	08 95       	ret

00000272 <_ZN15StackSingleByte25handleFirstOperatingModesEv>:
uint8_t   eventPage[8];          //!< event buffer

StackSingleByte StackSingleByte::instance;
//------------------------------------------------------------------------------
StackSingleByte::HandlerResult StackSingleByte::handleFirstOperatingModes()
{
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	fc 01       	movw	r30, r24
    // 
    uint8_t status;

    //  state machine
    switch (_frameState)
     27a:	82 89       	ldd	r24, Z+18	; 0x12
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	39 f0       	breq	.+14     	; 0x28e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x1c>
     280:	08 f4       	brcc	.+2      	; 0x284 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x12>
     282:	81 c0       	rjmp	.+258    	; 0x386 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x114>
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	09 f4       	brne	.+2      	; 0x28a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x18>
     288:	47 c0       	rjmp	.+142    	; 0x318 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xa6>
            }
        }
        break;
        
    default:
        return ResultIllegalMessageType;
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	82 c0       	rjmp	.+260    	; 0x392 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     28e:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     290:	80 e1       	ldi	r24, 0x10	; 16
     292:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x22>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     29a:	ce b5       	in	r28, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     29c:	ce bd       	out	0x2e, r28	; 46
        
    case FRAME_RCV_MC:      // expecting MC octet
        {
            // request MC octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     29e:	8c 2f       	mov	r24, r28
     2a0:	8c 70       	andi	r24, 0x0C	; 12
     2a2:	84 30       	cpi	r24, 0x04	; 4
     2a4:	11 f0       	breq	.+4      	; 0x2aa <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
                return ResultChecksumError;
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	74 c0       	rjmp	.+232    	; 0x392 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2aa:	0d b4       	in	r0, 0x2d	; 45
     2ac:	07 fe       	sbrs	r0, 7
     2ae:	fd cf       	rjmp	.-6      	; 0x2aa <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2b0:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2b2:	2a 9a       	sbi	0x05, 2	; 5

            // get master sequence control (MC) octet
            _mc = registerReadLast();
     2b4:	84 8b       	std	Z+20, r24	; 0x14

            // ensure that we are in IoLinkListen from here on
            if (_ddlMode < IoLink::DDL_MODE_STARTUP)
     2b6:	80 81       	ld	r24, Z
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	68 f4       	brcc	.+26     	; 0x2d6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x64>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2bc:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2be:	82 e8       	ldi	r24, 0x82	; 130
     2c0:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2c2:	0d b4       	in	r0, 0x2d	; 45
     2c4:	07 fe       	sbrs	r0, 7
     2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x50>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2c8:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2ca:	88 e0       	ldi	r24, 0x08	; 8
     2cc:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2ce:	0d b4       	in	r0, 0x2d	; 45
     2d0:	07 fe       	sbrs	r0, 7
     2d2:	fd cf       	rjmp	.-6      	; 0x2ce <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x5c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2d4:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2d6:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2d8:	83 e8       	ldi	r24, 0x83	; 131
     2da:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2dc:	0d b4       	in	r0, 0x2d	; 45
     2de:	07 fe       	sbrs	r0, 7
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x6a>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2e2:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2e8:	0d b4       	in	r0, 0x2d	; 45
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x76>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2ee:	2a 9a       	sbi	0x05, 2	; 5
            // signal ready to receive next byte
            registerWrite(REG_LINK, LINK_END);

            // precalculate the checksum, assuming no returned PD or OD frames
            _cks = IoLink::calculateChecksum(0, (_processDataIn.isValid ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	81 11       	cpse	r24, r1
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x88>
     2f6:	60 e4       	ldi	r22, 0x40	; 64
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x8a>
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	8f 01       	movw	r16, r30
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	ad df       	rcall	.-166    	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     302:	f8 01       	movw	r30, r16
     304:	86 8b       	std	Z+22, r24	; 0x16
     306:	85 b5       	in	r24, 0x25	; 37

            // disable the cycle timer (Timer0): it will be restarted after this frame...
            _tccr0bRecord = TCCR0B;
     308:	83 8f       	std	Z+27, r24	; 0x1b
     30a:	15 bc       	out	0x25, r1	; 37
            TCCR0B = 0;
     30c:	85 b3       	in	r24, 0x15	; 21

            // ...and clear any outstanding timer interrupt requests
            TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     30e:	87 60       	ori	r24, 0x07	; 7
     310:	85 bb       	out	0x15, r24	; 21
     312:	82 e0       	ldi	r24, 0x02	; 2

            // enter next state
            _frameState = FRAME_RCV_CKT;
     314:	82 8b       	std	Z+18, r24	; 0x12
     316:	2f c0       	rjmp	.+94     	; 0x376 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x104>
        }
        break;
     318:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     31a:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     31c:	8e bd       	out	0x2e, r24	; 46
     31e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     320:	07 fe       	sbrs	r0, 7
     322:	fd cf       	rjmp	.-6      	; 0x31e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xac>
     324:	ce b5       	in	r28, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     326:	ce bd       	out	0x2e, r28	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     328:	8c 2f       	mov	r24, r28

    case FRAME_RCV_CKT: // expecting CKT octet in read access
        {
            // request CKT octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     32a:	8c 70       	andi	r24, 0x0C	; 12
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	09 f0       	breq	.+2      	; 0x332 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     330:	ba cf       	rjmp	.-140    	; 0x2a6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x34>
     332:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     334:	07 fe       	sbrs	r0, 7
     336:	fd cf       	rjmp	.-6      	; 0x332 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     338:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     33a:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     33c:	85 8b       	std	Z+21, r24	; 0x15
                return ResultChecksumError;

            // get CKT octet
            _ckt = registerReadLast();
     33e:	94 89       	ldd	r25, Z+20	; 0x14

            // prepare checksum-8
            _checksum8 = _mc;
     340:	97 8b       	std	Z+23, r25	; 0x17
     342:	12 8e       	std	Z+26, r1	; 0x1a
            _i = 0;
     344:	93 e0       	ldi	r25, 0x03	; 3

            // indicate continuation required
            _frameState     = FRAME_RCV_CKT_CONT;
     346:	92 8b       	std	Z+18, r25	; 0x12
     348:	91 e0       	ldi	r25, 0x01	; 1
            _frameTypeOk    = true;
     34a:	94 8f       	std	Z+28, r25	; 0x1c
     34c:	90 81       	ld	r25, Z
            _receiveDdlMode = _ddlMode; 
     34e:	93 8b       	std	Z+19, r25	; 0x13
     350:	80 7c       	andi	r24, 0xC0	; 192
     352:	93 30       	cpi	r25, 0x03	; 3
            
            switch (_ddlMode)
     354:	29 f0       	breq	.+10     	; 0x360 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     356:	94 30       	cpi	r25, 0x04	; 4
     358:	19 f4       	brne	.+6      	; 0x360 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     35a:	80 38       	cpi	r24, 0x80	; 128
                if (frameType == IoLink::CKT_TYPE_2)
                    return true;                                   // TYPE_2_1-2_5
            }
            else if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE + PD_IN_SIZE <= 4))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     35c:	19 f4       	brne	.+6      	; 0x364 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xf2>
     35e:	15 c0       	rjmp	.+42     	; 0x38a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     360:	88 23       	and	r24, r24
    switch (DDL_MODE)
    {
        // see table A.7
    case IoLink::DDL_MODE_IDLE:
    case IoLink::DDL_MODE_STARTUP:
        if (frameType == IoLink::CKT_TYPE_0) 
     362:	99 f0       	breq	.+38     	; 0x38a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     364:	14 8e       	std	Z+28, r1	; 0x1c
                 if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
                    return ResultSuccess;
                break;
            }
            
            _frameTypeOk    = false;
     366:	81 11       	cpse	r24, r1
     368:	02 c0       	rjmp	.+4      	; 0x36e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xfc>
     36a:	82 e0       	ldi	r24, 0x02	; 2
            
            // look for a viable alternative
            if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_STARTUP;
     36c:	03 c0       	rjmp	.+6      	; 0x374 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x102>
     36e:	80 38       	cpi	r24, 0x80	; 128
                if (frameType == IoLink::CKT_TYPE_2)
                    return true;                                   // TYPE_2_1-2_5
            }
            else if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE + PD_IN_SIZE <= 4))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     370:	71 f4       	brne	.+28     	; 0x38e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x11c>
     372:	84 e0       	ldi	r24, 0x04	; 4
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else if (validateFrameType<IoLink::DDL_MODE_OPERATE>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
     374:	83 8b       	std	Z+19, r24	; 0x13
     376:	8c 2f       	mov	r24, r28
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
     378:	80 95       	com	r24
     37a:	88 1f       	adc	r24, r24
     37c:	88 27       	eor	r24, r24
     37e:	88 1f       	adc	r24, r24
     380:	88 0f       	add	r24, r24
     382:	88 0f       	add	r24, r24
     384:	06 c0       	rjmp	.+12     	; 0x392 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     386:	84 e0       	ldi	r24, 0x04	; 4

    //  state machine
    switch (_frameState)
    {
    case FRAME_RESET:
        return ResultPhyReset;
     388:	04 c0       	rjmp	.+8      	; 0x392 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     38a:	80 e0       	ldi	r24, 0x00	; 0
            
            switch (_ddlMode)
            {
            case IoLink::DDL_MODE_PREOPERATE:
                if (validateFrameType<IoLink::DDL_MODE_PREOPERATE>(_ckt))
                    return ResultSuccess;
     38c:	02 c0       	rjmp	.+4      	; 0x392 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     38e:	82 e0       	ldi	r24, 0x02	; 2
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else
            {
                _frameState     = FRAME_RCV_CKT;
     390:	82 8b       	std	Z+18, r24	; 0x12
     392:	cf 91       	pop	r28

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
}
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	08 95       	ret

0000039a <__vector_15>:
     39a:	1f 92       	push	r1
    }
}

// Interrupt on Timer0 compare match B
ISR(TIMER0_COMPB_vect)
{
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::onTimer0CompBInterrupt()
{
    // decrement hiZ timer
    if (_hiZCounter >= 0 && --_hiZCounter < 0)
     3ac:	80 91 09 01 	lds	r24, 0x0109
     3b0:	87 fd       	sbrc	r24, 7
     3b2:	1d c0       	rjmp	.+58     	; 0x3ee <__vector_15+0x54>
     3b4:	81 50       	subi	r24, 0x01	; 1
     3b6:	80 93 09 01 	sts	0x0109, r24
     3ba:	8f 3f       	cpi	r24, 0xFF	; 255
     3bc:	c1 f4       	brne	.+48     	; 0x3ee <__vector_15+0x54>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3be:	80 91 0a 01 	lds	r24, 0x010A
     3c2:	80 fd       	sbrc	r24, 0
     3c4:	26 c0       	rjmp	.+76     	; 0x412 <__vector_15+0x78>
     3c6:	81 e0       	ldi	r24, 0x01	; 1
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
     3c8:	9f ef       	ldi	r25, 0xFF	; 255
     3ca:	90 93 09 01 	sts	0x0109, r25
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	90 93 02 01 	sts	0x0102, r25
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
     3d4:	8c 60       	ori	r24, 0x0C	; 12
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     3d6:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3d8:	92 e8       	ldi	r25, 0x82	; 130
     3da:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3dc:	0d b4       	in	r0, 0x2d	; 45
     3de:	07 fe       	sbrs	r0, 7
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <__vector_15+0x42>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     3e2:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3e4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3e6:	0d b4       	in	r0, 0x2d	; 45
     3e8:	07 fe       	sbrs	r0, 7
     3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <__vector_15+0x4c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     3ec:	2a 9a       	sbi	0x05, 2	; 5
    {
        stack().setSioActive();
    }

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
     3ee:	20 91 0f 01 	lds	r18, 0x010F
     3f2:	30 91 10 01 	lds	r19, 0x0110
     3f6:	80 91 14 01 	lds	r24, 0x0114
     3fa:	21 15       	cp	r18, r1
     3fc:	31 05       	cpc	r19, r1
     3fe:	59 f0       	breq	.+22     	; 0x416 <__vector_15+0x7c>
     400:	21 50       	subi	r18, 0x01	; 1
     402:	31 09       	sbc	r19, r1
     404:	30 93 10 01 	sts	0x0110, r19
     408:	20 93 0f 01 	sts	0x010F, r18
     40c:	23 2b       	or	r18, r19
     40e:	39 f0       	breq	.+14     	; 0x41e <__vector_15+0x84>
     410:	02 c0       	rjmp	.+4      	; 0x416 <__vector_15+0x7c>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	d9 cf       	rjmp	.-78     	; 0x3c8 <__vector_15+0x2e>
        }
    }
    else
    {
        // too late for user code
        _runUserCode = false;
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	80 93 14 01 	sts	0x0114, r24
     41c:	33 c0       	rjmp	.+102    	; 0x484 <__vector_15+0xea>

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
    {
        // user code may run
        _runUserCode = true;
     41e:	81 60       	ori	r24, 0x01	; 1
     420:	80 93 14 01 	sts	0x0114, r24

        // restart cycle timer
        _cycleTimer = _cyclePeriod;
     424:	80 91 0d 01 	lds	r24, 0x010D
     428:	90 91 0e 01 	lds	r25, 0x010E
     42c:	90 93 10 01 	sts	0x0110, r25
     430:	80 93 0f 01 	sts	0x010F, r24

        // advance the count of dead cycles
        if (_deadCycleCtr != 0xff)
     434:	80 91 08 01 	lds	r24, 0x0108
     438:	8f 3f       	cpi	r24, 0xFF	; 255
     43a:	19 f0       	breq	.+6      	; 0x442 <__vector_15+0xa8>
        {
            ++_deadCycleCtr;
     43c:	8f 5f       	subi	r24, 0xFF	; 255
     43e:	80 93 08 01 	sts	0x0108, r24
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
     442:	80 91 13 01 	lds	r24, 0x0113
     446:	88 23       	and	r24, r24
     448:	29 f0       	breq	.+10     	; 0x454 <__vector_15+0xba>
     44a:	81 50       	subi	r24, 0x01	; 1
     44c:	80 93 13 01 	sts	0x0113, r24
     450:	88 23       	and	r24, r24
     452:	a9 f0       	breq	.+42     	; 0x47e <__vector_15+0xe4>
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
        }

        // update LED register if necessary
        if (_savedLedRegister != _ledRegister)
     454:	80 91 12 01 	lds	r24, 0x0112
     458:	90 91 11 01 	lds	r25, 0x0111
     45c:	98 17       	cp	r25, r24
     45e:	91 f0       	breq	.+36     	; 0x484 <__vector_15+0xea>
        {
            _savedLedRegister = _ledRegister;
     460:	80 93 11 01 	sts	0x0111, r24
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     464:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     466:	96 e8       	ldi	r25, 0x86	; 134
     468:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     46a:	0d b4       	in	r0, 0x2d	; 45
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <__vector_15+0xd0>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     470:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     472:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     474:	0d b4       	in	r0, 0x2d	; 45
     476:	07 fe       	sbrs	r0, 7
     478:	fd cf       	rjmp	.-6      	; 0x474 <__vector_15+0xda>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     47a:	2a 9a       	sbi	0x05, 2	; 5
     47c:	03 c0       	rjmp	.+6      	; 0x484 <__vector_15+0xea>
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
     47e:	10 92 03 01 	sts	0x0103, r1
     482:	e8 cf       	rjmp	.-48     	; 0x454 <__vector_15+0xba>
    StackSingleByte::instance.onTimer0CompBInterrupt();
}
     484:	9f 91       	pop	r25
     486:	8f 91       	pop	r24
     488:	3f 91       	pop	r19
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>:
}


//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
     496:	fc 01       	movw	r30, r24
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
     498:	15 82       	std	Z+5, r1	; 0x05

    // disable timer
    TCCR0B = 0;
     49a:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
     49c:	16 bc       	out	0x26, r1	; 38

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     49e:	85 b3       	in	r24, 0x15	; 21
     4a0:	87 60       	ori	r24, 0x07	; 7
     4a2:	85 bb       	out	0x15, r24	; 21
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
     4a4:	82 85       	ldd	r24, Z+10	; 0x0a
     4a6:	93 85       	ldd	r25, Z+11	; 0x0b
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	49 f5       	brne	.+82     	; 0x4fe <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x68>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     4ac:	20 81       	ld	r18, Z
     4ae:	24 30       	cpi	r18, 0x04	; 4
     4b0:	21 f4       	brne	.+8      	; 0x4ba <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x24>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     4b2:	20 91 29 01 	lds	r18, 0x0129
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     4b6:	21 11       	cpse	r18, r1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x28>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     4ba:	20 91 2a 01 	lds	r18, 0x012A
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     4be:	24 30       	cpi	r18, 0x04	; 4
     4c0:	e0 f0       	brcs	.+56     	; 0x4fa <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4c2:	20 34       	cpi	r18, 0x40	; 64
     4c4:	18 f4       	brcc	.+6      	; 0x4cc <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x36>
     4c6:	82 2f       	mov	r24, r18
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	17 c0       	rjmp	.+46     	; 0x4fa <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4cc:	32 2f       	mov	r19, r18
     4ce:	30 7c       	andi	r19, 0xC0	; 192
     4d0:	30 34       	cpi	r19, 0x40	; 64
     4d2:	49 f4       	brne	.+18     	; 0x4e6 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x50>
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	28 9f       	mul	r18, r24
     4d8:	90 01       	movw	r18, r0
     4da:	11 24       	eor	r1, r1
     4dc:	33 27       	eor	r19, r19
     4de:	c9 01       	movw	r24, r18
     4e0:	80 5c       	subi	r24, 0xC0	; 192
     4e2:	9f 4f       	sbci	r25, 0xFF	; 255
     4e4:	0a c0       	rjmp	.+20     	; 0x4fa <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4e6:	30 38       	cpi	r19, 0x80	; 128
     4e8:	41 f4       	brne	.+16     	; 0x4fa <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4ea:	2f 73       	andi	r18, 0x3F	; 63
     4ec:	80 e1       	ldi	r24, 0x10	; 16
     4ee:	28 9f       	mul	r18, r24
     4f0:	90 01       	movw	r18, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	c9 01       	movw	r24, r18
     4f6:	80 5c       	subi	r24, 0xC0	; 192
     4f8:	9e 4f       	sbci	r25, 0xFE	; 254
     4fa:	93 87       	std	Z+11, r25	; 0x0b
     4fc:	82 87       	std	Z+10, r24	; 0x0a
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	75 87       	std	Z+13, r23	; 0x0d
     506:	64 87       	std	Z+12, r22	; 0x0c

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	80 93 6e 00 	sts	0x006E, r24

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	84 bd       	out	0x24, r24	; 36

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
     512:	94 e6       	ldi	r25, 0x64	; 100
     514:	97 bd       	out	0x27, r25	; 39
     516:	98 bd       	out	0x28, r25	; 40
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
     518:	85 bd       	out	0x25, r24	; 37
     51a:	08 95       	ret

0000051c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultSuccess;
}

//------------------------------------------------------------------------------
template <IoLink::DeviceDLMode DDL_MODE>
StackSingleByte::HandlerResult StackSingleByte::handleOperatingMode()
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     522:	dc 01       	movw	r26, r24
     524:	52 96       	adiw	r26, 0x12	; 18
     526:	ec 91       	ld	r30, X
     528:	4e 2f       	mov	r20, r30
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	4c 30       	cpi	r20, 0x0C	; 12
     52e:	51 05       	cpc	r21, r1
     530:	08 f0       	brcs	.+2      	; 0x534 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x18>
     532:	5e c0       	rjmp	.+188    	; 0x5f0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd4>
     534:	ec 01       	movw	r28, r24
     536:	fa 01       	movw	r30, r20
     538:	ec 5c       	subi	r30, 0xCC	; 204
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	dc c6       	rjmp	.+3512   	; 0x12f6 <__tablejump2__>
     53e:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     540:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     542:	8e bd       	out	0x2e, r24	; 46
     544:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     546:	07 fe       	sbrs	r0, 7
     548:	fd cf       	rjmp	.-6      	; 0x544 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x28>
     54a:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     54e:	8e bd       	out	0x2e, r24	; 46
     550:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     552:	07 fe       	sbrs	r0, 7
     554:	fd cf       	rjmp	.-6      	; 0x550 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x34>
     556:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     558:	84 e0       	ldi	r24, 0x04	; 4
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
     55a:	8a 8b       	std	Y+18, r24	; 0x12
     55c:	31 c1       	rjmp	.+610    	; 0x7c0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a4>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     55e:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     560:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     562:	8e bd       	out	0x2e, r24	; 46
     564:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     566:	07 fe       	sbrs	r0, 7
     568:	fd cf       	rjmp	.-6      	; 0x564 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x48>
     56a:	1e b5       	in	r17, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     56c:	1e bd       	out	0x2e, r17	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     56e:	81 2f       	mov	r24, r17
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     570:	8c 70       	andi	r24, 0x0C	; 12
     572:	84 30       	cpi	r24, 0x04	; 4
     574:	11 f0       	breq	.+4      	; 0x57a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5e>
     576:	82 e0       	ldi	r24, 0x02	; 2
                return ResultChecksumError;
     578:	26 c1       	rjmp	.+588    	; 0x7c6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
     57a:	ea 8d       	ldd	r30, Y+26	; 0x1a

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     580:	07 fe       	sbrs	r0, 7
     582:	fd cf       	rjmp	.-6      	; 0x57e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x62>
     584:	9e b5       	in	r25, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     586:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     588:	ec 0f       	add	r30, r28
     58a:	fd 1f       	adc	r31, r29
     58c:	91 8f       	std	Z+25, r25	; 0x19
     58e:	8f 89       	ldd	r24, Y+23	; 0x17
     590:	89 27       	eor	r24, r25
     592:	8f 8b       	std	Y+23, r24	; 0x17
     594:	9a 8d       	ldd	r25, Y+26	; 0x1a
            
            if (++_i < pdOutSize) // get next PD octet
     596:	9f 5f       	subi	r25, 0xFF	; 255
     598:	9a 8f       	std	Y+26, r25	; 0x1a
     59a:	91 11       	cpse	r25, r1
     59c:	0d c0       	rjmp	.+26     	; 0x5b8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x9c>
     59e:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5a0:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5a2:	8e bd       	out	0x2e, r24	; 46
     5a4:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5a6:	07 fe       	sbrs	r0, 7
     5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x88>
     5aa:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5ae:	8e bd       	out	0x2e, r24	; 46
     5b0:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5b2:	07 fe       	sbrs	r0, 7
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x94>
     5b6:	72 c0       	rjmp	.+228    	; 0x69c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x180>
     5b8:	9c 89       	ldd	r25, Y+20	; 0x14
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     5ba:	97 fd       	sbrc	r25, 7
     5bc:	11 c0       	rjmp	.+34     	; 0x5e0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc4>
     5be:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5c0:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5c2:	8e bd       	out	0x2e, r24	; 46
     5c4:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5c6:	07 fe       	sbrs	r0, 7
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa8>
     5ca:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5ce:	8e bd       	out	0x2e, r24	; 46
     5d0:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5d2:	07 fe       	sbrs	r0, 7
     5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb4>
     5d6:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     5d8:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     5da:	8a 8b       	std	Y+18, r24	; 0x12
     5dc:	1a 8e       	std	Y+26, r1	; 0x1a
                _i = 0;
     5de:	ee c0       	rjmp	.+476    	; 0x7bc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
     5e0:	6d 89       	ldd	r22, Y+21	; 0x15
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     5e2:	3c de       	rcall	.-904    	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     5e4:	9d 89       	ldd	r25, Y+21	; 0x15
     5e6:	89 13       	cpse	r24, r25
     5e8:	c6 cf       	rjmp	.-116    	; 0x576 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     5ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ec:	81 11       	cpse	r24, r1
                    return ResultChecksumError;

                if (!_frameTypeOk)
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd8>
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	e9 c0       	rjmp	.+466    	; 0x7c6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
                    return ResultIllegalMessageType;                    
     5f4:	89 8d       	ldd	r24, Y+25	; 0x19
     5f6:	8b 83       	std	Y+3, r24	; 0x03

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     5f8:	1a 8e       	std	Y+26, r1	; 0x1a
     5fa:	6f c0       	rjmp	.+222    	; 0x6da <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1be>

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     5fc:	2a 98       	cbi	0x05, 2	; 5
                goto frame_snd_od;
     5fe:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     600:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     602:	0d b4       	in	r0, 0x2d	; 45
     604:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     606:	fd cf       	rjmp	.-6      	; 0x602 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xe6>
     608:	1e b5       	in	r17, 0x2e	; 46
     60a:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     60c:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     60e:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     610:	84 30       	cpi	r24, 0x04	; 4
     612:	09 f0       	breq	.+2      	; 0x616 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xfa>
     614:	b0 cf       	rjmp	.-160    	; 0x576 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     616:	0d b4       	in	r0, 0x2d	; 45
     618:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     61a:	fd cf       	rjmp	.-6      	; 0x616 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xfa>
     61c:	9e b5       	in	r25, 0x2e	; 46
     61e:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     620:	98 8f       	std	Y+24, r25	; 0x18
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     622:	8f 89       	ldd	r24, Y+23	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     624:	89 27       	eor	r24, r25
     626:	8f 8b       	std	Y+23, r24	; 0x17
     628:	9a 8d       	ldd	r25, Y+26	; 0x1a
     62a:	9f 5f       	subi	r25, 0xFF	; 255

            if (++_i < odCount) // get next OD octet
     62c:	9a 8f       	std	Y+26, r25	; 0x1a
     62e:	91 11       	cpse	r25, r1
     630:	37 c0       	rjmp	.+110    	; 0x6a0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x184>
     632:	2a 98       	cbi	0x05, 2	; 5
     634:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     636:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     638:	0d b4       	in	r0, 0x2d	; 45
     63a:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     63c:	fd cf       	rjmp	.-6      	; 0x638 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x11c>
     63e:	8e b5       	in	r24, 0x2e	; 46
     640:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     642:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     644:	0d b4       	in	r0, 0x2d	; 45
     646:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     648:	fd cf       	rjmp	.-6      	; 0x644 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x128>
     64a:	2a 9a       	sbi	0x05, 2	; 5
     64c:	86 e0       	ldi	r24, 0x06	; 6
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     64e:	a2 c0       	rjmp	.+324    	; 0x794 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     650:	2a 98       	cbi	0x05, 2	; 5
     652:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     654:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     656:	0d b4       	in	r0, 0x2d	; 45
     658:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     65a:	fd cf       	rjmp	.-6      	; 0x656 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x13a>
     65c:	1e b5       	in	r17, 0x2e	; 46
     65e:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     660:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     662:	8c 70       	andi	r24, 0x0C	; 12

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     664:	84 30       	cpi	r24, 0x04	; 4
     666:	09 f0       	breq	.+2      	; 0x66a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x14e>
     668:	86 cf       	rjmp	.-244    	; 0x576 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     66a:	0d b4       	in	r0, 0x2d	; 45
     66c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     66e:	fd cf       	rjmp	.-6      	; 0x66a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x14e>
     670:	9e b5       	in	r25, 0x2e	; 46
     672:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     674:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     676:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     678:	8f 8b       	std	Y+23, r24	; 0x17
     67a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     67c:	9f 5f       	subi	r25, 0xFF	; 255

            if (++_i < odCount) // get next PD octet
     67e:	9a 8f       	std	Y+26, r25	; 0x1a
     680:	91 11       	cpse	r25, r1
     682:	0e c0       	rjmp	.+28     	; 0x6a0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x184>
     684:	2a 98       	cbi	0x05, 2	; 5
     686:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     688:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     68a:	0d b4       	in	r0, 0x2d	; 45
     68c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     68e:	fd cf       	rjmp	.-6      	; 0x68a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x16e>
     690:	8e b5       	in	r24, 0x2e	; 46
     692:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     694:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     696:	0d b4       	in	r0, 0x2d	; 45
     698:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     69a:	fd cf       	rjmp	.-6      	; 0x696 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17a>
     69c:	2a 9a       	sbi	0x05, 2	; 5
     69e:	8e c0       	rjmp	.+284    	; 0x7bc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     6a0:	6d 89       	ldd	r22, Y+21	; 0x15
     6a2:	dc dd       	rcall	.-1096   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     6a4:	9d 89       	ldd	r25, Y+21	; 0x15
     6a6:	89 13       	cpse	r24, r25
     6a8:	66 cf       	rjmp	.-308    	; 0x576 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     6aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ac:	88 23       	and	r24, r24
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x196>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     6b0:	9f cf       	rjmp	.-194    	; 0x5f0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd4>
     6b2:	8c 89       	ldd	r24, Y+20	; 0x14
     6b4:	98 8d       	ldd	r25, Y+24	; 0x18
     6b6:	28 2f       	mov	r18, r24
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6b8:	20 76       	andi	r18, 0x60	; 96
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     6ba:	20 32       	cpi	r18, 0x20	; 32

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6bc:	41 f0       	breq	.+16     	; 0x6ce <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b2>
     6be:	89 89       	ldd	r24, Y+17	; 0x11

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     6c0:	8d 7f       	andi	r24, 0xFD	; 253
     6c2:	89 8b       	std	Y+17, r24	; 0x11
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     6c4:	89 8d       	ldd	r24, Y+25	; 0x19
     6c6:	8b 83       	std	Y+3, r24	; 0x03
     6c8:	1a 8e       	std	Y+26, r1	; 0x1a
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     6ca:	1f 8a       	std	Y+23, r1	; 0x17
     6cc:	2d c0       	rjmp	.+90     	; 0x728 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x20c>

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     6ce:	8f 71       	andi	r24, 0x1F	; 31
                _checksum8 = 0;
     6d0:	88 87       	std	Y+8, r24	; 0x08
                goto frame_snd_pd;
     6d2:	99 87       	std	Y+9, r25	; 0x09
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     6d4:	89 89       	ldd	r24, Y+17	; 0x11
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     6d6:	82 60       	ori	r24, 0x02	; 2
        _parameterWrite.value = data;
     6d8:	f4 cf       	rjmp	.-24     	; 0x6c2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1a6>
        _prmWriteAvailable = true;
     6da:	1f 8a       	std	Y+23, r1	; 0x17
     6dc:	8c 89       	ldd	r24, Y+20	; 0x14
     6de:	68 2f       	mov	r22, r24
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     6e0:	6f 71       	andi	r22, 0x1F	; 31

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6e2:	80 76       	andi	r24, 0x60	; 96
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     6e4:	9f dd       	rcall	.-1218   	; 0x224 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
     6e6:	2a 98       	cbi	0x05, 2	; 5

            // get the data
            uint8_t odIn = odRead(channel, address);
     6e8:	90 e9       	ldi	r25, 0x90	; 144
     6ea:	9e bd       	out	0x2e, r25	; 46
     6ec:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     6ee:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1d0>
     6f2:	1e b5       	in	r17, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6f4:	8e bd       	out	0x2e, r24	; 46
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1da>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6fc:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6fe:	9f 89       	ldd	r25, Y+23	; 0x17
     700:	89 27       	eor	r24, r25
     702:	8f 8b       	std	Y+23, r24	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     704:	9a 81       	ldd	r25, Y+2	; 0x02

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     706:	91 11       	cpse	r25, r1
     708:	02 c0       	rjmp	.+4      	; 0x70e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f2>
     70a:	60 e4       	ldi	r22, 0x40	; 64

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     70c:	01 c0       	rjmp	.+2      	; 0x710 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f4>
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	a5 dd       	rcall	.-1206   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     712:	8e 8b       	std	Y+22, r24	; 0x16
     714:	8a 8d       	ldd	r24, Y+26	; 0x1a
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	8a 8f       	std	Y+26, r24	; 0x1a
     71a:	81 11       	cpse	r24, r1

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     71c:	02 c0       	rjmp	.+4      	; 0x722 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x206>
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	39 c0       	rjmp	.+114    	; 0x794 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
     722:	1a 8e       	std	Y+26, r1	; 0x1a
     724:	89 e0       	ldi	r24, 0x09	; 9
     726:	36 c0       	rjmp	.+108    	; 0x794 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
            {
                _frameState = FRAME_SND_ODX;
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	88 23       	and	r24, r24
            }
            else
            {
                _i = 0;
     72c:	31 f0       	breq	.+12     	; 0x73a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x21e>
                _frameState = FRAME_SND_PD;
     72e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     730:	fe 01       	movw	r30, r28
frame_snd_pd:
        // with frame type 2, send the process data
        if (pdInSize > 0)
        {
            // get process data
            const uint8_t pd = _processDataIn.isValid ? _processDataIn.buffer[_i] : 0;
     732:	e8 0f       	add	r30, r24
     734:	f1 1d       	adc	r31, r1
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	01 c0       	rjmp	.+2      	; 0x73c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x220>
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2a 98       	cbi	0x05, 2	; 5
     73e:	80 e9       	ldi	r24, 0x90	; 144
     740:	8e bd       	out	0x2e, r24	; 46
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     746:	fd cf       	rjmp	.-6      	; 0x742 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x226>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     748:	1e b5       	in	r17, 0x2e	; 46
     74a:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     74c:	0d b4       	in	r0, 0x2d	; 45
     74e:	07 fe       	sbrs	r0, 7
     750:	fd cf       	rjmp	.-6      	; 0x74c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x230>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     752:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     754:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     756:	89 27       	eor	r24, r25
     758:	8f 8b       	std	Y+23, r24	; 0x17
     75a:	9a 81       	ldd	r25, Y+2	; 0x02
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     75c:	91 11       	cpse	r25, r1

            // send process data
            status = registerWrite(REG_FR0, pd);

            // update checksum-8
            _checksum8 ^= pd;
     75e:	02 c0       	rjmp	.+4      	; 0x764 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x248>
     760:	60 e4       	ldi	r22, 0x40	; 64
     762:	01 c0       	rjmp	.+2      	; 0x766 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24a>

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	7a dd       	rcall	.-1292   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     768:	8e 8b       	std	Y+22, r24	; 0x16
     76a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	8a 8f       	std	Y+26, r24	; 0x1a
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	21 f5       	brne	.+72     	; 0x7bc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>

            // update checksum-8
            _checksum8 ^= pd;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     774:	8a e0       	ldi	r24, 0x0A	; 10
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            if (++_i == pdInSize)
     776:	0e c0       	rjmp	.+28     	; 0x794 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
     778:	8e 89       	ldd	r24, Y+22	; 0x16
     77a:	2a 98       	cbi	0x05, 2	; 5
     77c:	90 e9       	ldi	r25, 0x90	; 144
     77e:	9e bd       	out	0x2e, r25	; 46
            {
                // enter next state
                _frameState = FRAME_SND_CKS;
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     784:	fd cf       	rjmp	.-6      	; 0x780 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x264>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     786:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     788:	8e bd       	out	0x2e, r24	; 46
     78a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     78c:	07 fe       	sbrs	r0, 7
     78e:	fd cf       	rjmp	.-6      	; 0x78a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x26e>
     790:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     792:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     794:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     796:	12 c0       	rjmp	.+36     	; 0x7bc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
     798:	2a 98       	cbi	0x05, 2	; 5
     79a:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     79c:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     79e:	0d b4       	in	r0, 0x2d	; 45
     7a0:	07 fe       	sbrs	r0, 7
        }
        break;
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x282>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     7a4:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7aa:	0d b4       	in	r0, 0x2d	; 45
     7ac:	07 fe       	sbrs	r0, 7
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x28e>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     7b0:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	ce 01       	movw	r24, r28
     7ba:	6d de       	rcall	.-806    	; 0x496 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7bc:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a8>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     7d2:	df 93       	push	r29
    else
        return ResultSuccess;
}
     7d4:	dc 01       	movw	r26, r24
     7d6:	52 96       	adiw	r26, 0x12	; 18
     7d8:	ec 91       	ld	r30, X
     7da:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	4c 30       	cpi	r20, 0x0C	; 12
     7e0:	51 05       	cpc	r21, r1
     7e2:	18 f5       	brcc	.+70     	; 0x82a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     7e4:	ec 01       	movw	r28, r24
     7e6:	fa 01       	movw	r30, r20
     7e8:	e0 5c       	subi	r30, 0xC0	; 192
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	84 c5       	rjmp	.+2824   	; 0x12f6 <__tablejump2__>
     7ee:	8c 89       	ldd	r24, Y+20	; 0x14
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     7f0:	87 fd       	sbrc	r24, 7
     7f2:	10 c0       	rjmp	.+32     	; 0x814 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x46>
     7f4:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     7f6:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7f8:	8e bd       	out	0x2e, r24	; 46
     7fa:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7fc:	07 fe       	sbrs	r0, 7
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     800:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     802:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     804:	8e bd       	out	0x2e, r24	; 46
     806:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x38>
     80c:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     80e:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     810:	8a 8b       	std	Y+18, r24	; 0x12
     812:	fe c0       	rjmp	.+508    	; 0xa10 <__stack+0x111>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     814:	6d 89       	ldd	r22, Y+21	; 0x15
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     816:	8f 89       	ldd	r24, Y+23	; 0x17
     818:	21 dd       	rcall	.-1470   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     81a:	9d 89       	ldd	r25, Y+21	; 0x15
     81c:	89 17       	cp	r24, r25
     81e:	11 f0       	breq	.+4      	; 0x824 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x56>
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	f9 c0       	rjmp	.+498    	; 0xa16 <__stack+0x117>
                    return ResultChecksumError;
     824:	8c 8d       	ldd	r24, Y+28	; 0x1c
     826:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     828:	ad c0       	rjmp	.+346    	; 0x984 <__stack+0x85>
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	f4 c0       	rjmp	.+488    	; 0xa16 <__stack+0x117>
                    return ResultIllegalMessageType;
     82e:	2a 98       	cbi	0x05, 2	; 5
     830:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     832:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     834:	0d b4       	in	r0, 0x2d	; 45
     836:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     838:	fd cf       	rjmp	.-6      	; 0x834 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x66>
     83a:	1e b5       	in	r17, 0x2e	; 46
     83c:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     83e:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     840:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     842:	84 30       	cpi	r24, 0x04	; 4
     844:	69 f7       	brne	.-38     	; 0x820 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     846:	ea 8d       	ldd	r30, Y+26	; 0x1a
     848:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     84a:	0d b4       	in	r0, 0x2d	; 45
     84c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     84e:	fd cf       	rjmp	.-6      	; 0x84a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     850:	9e b5       	in	r25, 0x2e	; 46
     852:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     854:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     856:	fd 1f       	adc	r31, r29
     858:	91 8f       	std	Z+25, r25	; 0x19
     85a:	8f 89       	ldd	r24, Y+23	; 0x17
     85c:	89 27       	eor	r24, r25
     85e:	8f 8b       	std	Y+23, r24	; 0x17
     860:	9a 8d       	ldd	r25, Y+26	; 0x1a
     862:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     864:	9a 8f       	std	Y+26, r25	; 0x1a
     866:	9c 89       	ldd	r25, Y+20	; 0x14
     868:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     86a:	11 c0       	rjmp	.+34     	; 0x88e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     86c:	2a 98       	cbi	0x05, 2	; 5
     86e:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     870:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     872:	0d b4       	in	r0, 0x2d	; 45
     874:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     876:	fd cf       	rjmp	.-6      	; 0x872 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     878:	8e b5       	in	r24, 0x2e	; 46
     87a:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     87c:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     87e:	0d b4       	in	r0, 0x2d	; 45
     880:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     882:	fd cf       	rjmp	.-6      	; 0x87e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     884:	2a 9a       	sbi	0x05, 2	; 5
     886:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     888:	8a 8b       	std	Y+18, r24	; 0x12
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     88a:	1a 8e       	std	Y+26, r1	; 0x1a
     88c:	bf c0       	rjmp	.+382    	; 0xa0c <__stack+0x10d>
                _i = 0;
     88e:	6d 89       	ldd	r22, Y+21	; 0x15
     890:	e5 dc       	rcall	.-1590   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     892:	9d 89       	ldd	r25, Y+21	; 0x15
     894:	89 13       	cpse	r24, r25
     896:	c4 cf       	rjmp	.-120    	; 0x820 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     898:	8c 8d       	ldd	r24, Y+28	; 0x1c
     89a:	88 23       	and	r24, r24
     89c:	31 f2       	breq	.-116    	; 0x82a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     89e:	89 8d       	ldd	r24, Y+25	; 0x19
     8a0:	8b 83       	std	Y+3, r24	; 0x03
     8a2:	1a 8e       	std	Y+26, r1	; 0x1a
                    return ResultIllegalMessageType;                    

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     8a4:	6f c0       	rjmp	.+222    	; 0x984 <__stack+0x85>
     8a6:	2a 98       	cbi	0x05, 2	; 5

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     8a8:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     8aa:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8ac:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8ae:	07 fe       	sbrs	r0, 7
     8b0:	fd cf       	rjmp	.-6      	; 0x8ac <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xde>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8b2:	1e b5       	in	r17, 0x2e	; 46
     8b4:	1e bd       	out	0x2e, r17	; 46
     8b6:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8b8:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8ba:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
     8be:	b0 cf       	rjmp	.-160    	; 0x820 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     8c0:	0d b4       	in	r0, 0x2d	; 45
     8c2:	07 fe       	sbrs	r0, 7
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8c6:	9e b5       	in	r25, 0x2e	; 46
     8c8:	2a 9a       	sbi	0x05, 2	; 5
     8ca:	98 8f       	std	Y+24, r25	; 0x18
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8cc:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8ce:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     8d0:	8f 8b       	std	Y+23, r24	; 0x17
     8d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8d4:	9f 5f       	subi	r25, 0xFF	; 255
     8d6:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next OD octet
     8d8:	91 11       	cpse	r25, r1
     8da:	37 c0       	rjmp	.+110    	; 0x94a <__stack+0x4b>
     8dc:	2a 98       	cbi	0x05, 2	; 5
     8de:	83 e8       	ldi	r24, 0x83	; 131
     8e0:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8e2:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x114>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8e8:	8e b5       	in	r24, 0x2e	; 46
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8ee:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8f0:	07 fe       	sbrs	r0, 7
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8f4:	2a 9a       	sbi	0x05, 2	; 5
     8f6:	86 e0       	ldi	r24, 0x06	; 6
     8f8:	75 c0       	rjmp	.+234    	; 0x9e4 <__stack+0xe5>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8fa:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     900:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     902:	07 fe       	sbrs	r0, 7
     904:	fd cf       	rjmp	.-6      	; 0x900 <__stack+0x1>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     906:	1e b5       	in	r17, 0x2e	; 46
     908:	1e bd       	out	0x2e, r17	; 46
     90a:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     90c:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     90e:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	86 cf       	rjmp	.-244    	; 0x820 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     914:	0d b4       	in	r0, 0x2d	; 45
     916:	07 fe       	sbrs	r0, 7
     918:	fd cf       	rjmp	.-6      	; 0x914 <__stack+0x15>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     91a:	9e b5       	in	r25, 0x2e	; 46
     91c:	2a 9a       	sbi	0x05, 2	; 5
     91e:	8f 89       	ldd	r24, Y+23	; 0x17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     920:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     922:	8f 8b       	std	Y+23, r24	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     924:	9a 8d       	ldd	r25, Y+26	; 0x1a
     926:	9f 5f       	subi	r25, 0xFF	; 255
     928:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next PD octet
     92a:	91 11       	cpse	r25, r1
     92c:	0e c0       	rjmp	.+28     	; 0x94a <__stack+0x4b>
     92e:	2a 98       	cbi	0x05, 2	; 5
     930:	83 e8       	ldi	r24, 0x83	; 131
     932:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     934:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     936:	07 fe       	sbrs	r0, 7
     938:	fd cf       	rjmp	.-6      	; 0x934 <__stack+0x35>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     93a:	8e b5       	in	r24, 0x2e	; 46
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     940:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <__stack+0x41>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     946:	2a 9a       	sbi	0x05, 2	; 5
     948:	61 c0       	rjmp	.+194    	; 0xa0c <__stack+0x10d>
     94a:	6d 89       	ldd	r22, Y+21	; 0x15
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     94c:	87 dc       	rcall	.-1778   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     94e:	9d 89       	ldd	r25, Y+21	; 0x15
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     950:	89 13       	cpse	r24, r25
     952:	66 cf       	rjmp	.-308    	; 0x820 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     954:	8c 8d       	ldd	r24, Y+28	; 0x1c
     956:	88 23       	and	r24, r24
     958:	09 f4       	brne	.+2      	; 0x95c <__stack+0x5d>
     95a:	67 cf       	rjmp	.-306    	; 0x82a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     95c:	8c 89       	ldd	r24, Y+20	; 0x14
     95e:	98 8d       	ldd	r25, Y+24	; 0x18
     960:	28 2f       	mov	r18, r24
     962:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     964:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     966:	41 f0       	breq	.+16     	; 0x978 <__stack+0x79>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     968:	89 89       	ldd	r24, Y+17	; 0x11
     96a:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     96c:	89 8b       	std	Y+17, r24	; 0x11
     96e:	89 8d       	ldd	r24, Y+25	; 0x19
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     970:	8b 83       	std	Y+3, r24	; 0x03
     972:	1a 8e       	std	Y+26, r1	; 0x1a
     974:	1f 8a       	std	Y+23, r1	; 0x17
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     976:	28 c0       	rjmp	.+80     	; 0x9c8 <__stack+0xc9>
     978:	8f 71       	andi	r24, 0x1F	; 31

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     97a:	88 87       	std	Y+8, r24	; 0x08
                _checksum8 = 0;
     97c:	99 87       	std	Y+9, r25	; 0x09
                goto frame_snd_pd;
     97e:	89 89       	ldd	r24, Y+17	; 0x11
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     980:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     982:	f4 cf       	rjmp	.-24     	; 0x96c <__stack+0x6d>
        _parameterWrite.value = data;
     984:	1f 8a       	std	Y+23, r1	; 0x17
        _prmWriteAvailable = true;
     986:	8c 89       	ldd	r24, Y+20	; 0x14
     988:	68 2f       	mov	r22, r24
     98a:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     98c:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     98e:	4a dc       	rcall	.-1900   	; 0x224 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     990:	2a 98       	cbi	0x05, 2	; 5
     992:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     994:	9e bd       	out	0x2e, r25	; 46
     996:	0d b4       	in	r0, 0x2d	; 45
     998:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     99a:	fd cf       	rjmp	.-6      	; 0x996 <__stack+0x97>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     99c:	1e b5       	in	r17, 0x2e	; 46
     99e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9a0:	0d b4       	in	r0, 0x2d	; 45
     9a2:	07 fe       	sbrs	r0, 7
     9a4:	fd cf       	rjmp	.-6      	; 0x9a0 <__stack+0xa1>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9a6:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9a8:	9f 89       	ldd	r25, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9aa:	89 27       	eor	r24, r25
     9ac:	8f 8b       	std	Y+23, r24	; 0x17
     9ae:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9b0:	55 dc       	rcall	.-1878   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     9b2:	8e 8b       	std	Y+22, r24	; 0x16
     9b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9b6:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     9b8:	8a 8f       	std	Y+26, r24	; 0x1a
     9ba:	81 11       	cpse	r24, r1
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__stack+0xc3>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     9be:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     9c0:	11 c0       	rjmp	.+34     	; 0x9e4 <__stack+0xe5>
     9c2:	1a 8e       	std	Y+26, r1	; 0x1a
     9c4:	89 e0       	ldi	r24, 0x09	; 9
     9c6:	0e c0       	rjmp	.+28     	; 0x9e4 <__stack+0xe5>
     9c8:	8e 89       	ldd	r24, Y+22	; 0x16
            {
                _frameState = FRAME_SND_ODX;
     9ca:	2a 98       	cbi	0x05, 2	; 5
     9cc:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     9ce:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     9d0:	0d b4       	in	r0, 0x2d	; 45
     9d2:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     9d4:	fd cf       	rjmp	.-6      	; 0x9d0 <__stack+0xd1>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9d6:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9d8:	8e bd       	out	0x2e, r24	; 46
     9da:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9dc:	07 fe       	sbrs	r0, 7
     9de:	fd cf       	rjmp	.-6      	; 0x9da <__stack+0xdb>
     9e0:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9e2:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9e4:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__stack+0x10d>
     9e8:	2a 98       	cbi	0x05, 2	; 5
     9ea:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9ec:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     9ee:	0d b4       	in	r0, 0x2d	; 45
     9f0:	07 fe       	sbrs	r0, 7
        }
        break;
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <__stack+0xef>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9f4:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9fa:	0d b4       	in	r0, 0x2d	; 45
     9fc:	07 fe       	sbrs	r0, 7
     9fe:	fd cf       	rjmp	.-6      	; 0x9fa <__stack+0xfb>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a00:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	ce 01       	movw	r24, r28
     a0a:	45 dd       	rcall	.-1398   	; 0x496 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a0c:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x115>
     a10:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <__stack+0x117>
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     a1a:	1f 91       	pop	r17
     a1c:	08 95       	ret

00000a1e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     a22:	df 93       	push	r29
    else
        return ResultSuccess;
}
     a24:	dc 01       	movw	r26, r24
     a26:	52 96       	adiw	r26, 0x12	; 18
     a28:	ec 91       	ld	r30, X
     a2a:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	4c 30       	cpi	r20, 0x0C	; 12
     a30:	51 05       	cpc	r21, r1
     a32:	18 f5       	brcc	.+70     	; 0xa7a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     a34:	ec 01       	movw	r28, r24
     a36:	fa 01       	movw	r30, r20
     a38:	e4 5b       	subi	r30, 0xB4	; 180
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	5c c4       	rjmp	.+2232   	; 0x12f6 <__tablejump2__>
     a3e:	8c 89       	ldd	r24, Y+20	; 0x14
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     a40:	87 fd       	sbrc	r24, 7
     a42:	10 c0       	rjmp	.+32     	; 0xa64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x46>
     a44:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a46:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a48:	8e bd       	out	0x2e, r24	; 46
     a4a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a4c:	07 fe       	sbrs	r0, 7
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     a50:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a52:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a54:	8e bd       	out	0x2e, r24	; 46
     a56:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x38>
     a5c:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a5e:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     a60:	8a 8b       	std	Y+18, r24	; 0x12
     a62:	00 c1       	rjmp	.+512    	; 0xc64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x246>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     a64:	6d 89       	ldd	r22, Y+21	; 0x15
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     a66:	8f 89       	ldd	r24, Y+23	; 0x17
     a68:	f9 db       	rcall	.-2062   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     a6a:	9d 89       	ldd	r25, Y+21	; 0x15
     a6c:	89 17       	cp	r24, r25
     a6e:	11 f0       	breq	.+4      	; 0xa74 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x56>
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	fb c0       	rjmp	.+502    	; 0xc6a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
                    return ResultChecksumError;
     a74:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a76:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     a78:	ad c0       	rjmp	.+346    	; 0xbd4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b6>
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	f6 c0       	rjmp	.+492    	; 0xc6a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
                    return ResultIllegalMessageType;
     a7e:	2a 98       	cbi	0x05, 2	; 5
     a80:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a82:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a84:	0d b4       	in	r0, 0x2d	; 45
     a86:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a88:	fd cf       	rjmp	.-6      	; 0xa84 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x66>
     a8a:	1e b5       	in	r17, 0x2e	; 46
     a8c:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a8e:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a90:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     a92:	84 30       	cpi	r24, 0x04	; 4
     a94:	69 f7       	brne	.-38     	; 0xa70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     a96:	ea 8d       	ldd	r30, Y+26	; 0x1a
     a98:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     a9a:	0d b4       	in	r0, 0x2d	; 45
     a9c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a9e:	fd cf       	rjmp	.-6      	; 0xa9a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     aa0:	9e b5       	in	r25, 0x2e	; 46
     aa2:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     aa4:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     aa6:	fd 1f       	adc	r31, r29
     aa8:	91 8f       	std	Z+25, r25	; 0x19
     aaa:	8f 89       	ldd	r24, Y+23	; 0x17
     aac:	89 27       	eor	r24, r25
     aae:	8f 8b       	std	Y+23, r24	; 0x17
     ab0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ab2:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     ab4:	9a 8f       	std	Y+26, r25	; 0x1a
     ab6:	9c 89       	ldd	r25, Y+20	; 0x14
     ab8:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     aba:	11 c0       	rjmp	.+34     	; 0xade <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     abc:	2a 98       	cbi	0x05, 2	; 5
     abe:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     ac0:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ac2:	0d b4       	in	r0, 0x2d	; 45
     ac4:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     ac8:	8e b5       	in	r24, 0x2e	; 46
     aca:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     acc:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ad2:	fd cf       	rjmp	.-6      	; 0xace <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     ad4:	2a 9a       	sbi	0x05, 2	; 5
     ad6:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     ad8:	8a 8b       	std	Y+18, r24	; 0x12
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     ada:	1a 8e       	std	Y+26, r1	; 0x1a
     adc:	c1 c0       	rjmp	.+386    	; 0xc60 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
                _i = 0;
     ade:	6d 89       	ldd	r22, Y+21	; 0x15
     ae0:	bd db       	rcall	.-2182   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     ae2:	9d 89       	ldd	r25, Y+21	; 0x15
     ae4:	89 13       	cpse	r24, r25
     ae6:	c4 cf       	rjmp	.-120    	; 0xa70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     ae8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aea:	88 23       	and	r24, r24
     aec:	31 f2       	breq	.-116    	; 0xa7a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     aee:	89 8d       	ldd	r24, Y+25	; 0x19
     af0:	8b 83       	std	Y+3, r24	; 0x03
     af2:	1a 8e       	std	Y+26, r1	; 0x1a
                    return ResultIllegalMessageType;                    

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     af4:	6f c0       	rjmp	.+222    	; 0xbd4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b6>
     af6:	2a 98       	cbi	0x05, 2	; 5

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     af8:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     afa:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     afc:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     afe:	07 fe       	sbrs	r0, 7
     b00:	fd cf       	rjmp	.-6      	; 0xafc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xde>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b02:	1e b5       	in	r17, 0x2e	; 46
     b04:	1e bd       	out	0x2e, r17	; 46
     b06:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b08:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b0a:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     b0c:	09 f0       	breq	.+2      	; 0xb10 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
     b0e:	b0 cf       	rjmp	.-160    	; 0xa70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b10:	0d b4       	in	r0, 0x2d	; 45
     b12:	07 fe       	sbrs	r0, 7
     b14:	fd cf       	rjmp	.-6      	; 0xb10 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b16:	9e b5       	in	r25, 0x2e	; 46
     b18:	2a 9a       	sbi	0x05, 2	; 5
     b1a:	98 8f       	std	Y+24, r25	; 0x18
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b1e:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     b20:	8f 8b       	std	Y+23, r24	; 0x17
     b22:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b24:	9f 5f       	subi	r25, 0xFF	; 255
     b26:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next OD octet
     b28:	91 11       	cpse	r25, r1
     b2a:	37 c0       	rjmp	.+110    	; 0xb9a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17c>
     b2c:	2a 98       	cbi	0x05, 2	; 5
     b2e:	83 e8       	ldi	r24, 0x83	; 131
     b30:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b32:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b34:	07 fe       	sbrs	r0, 7
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x114>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b38:	8e b5       	in	r24, 0x2e	; 46
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b3e:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b40:	07 fe       	sbrs	r0, 7
     b42:	fd cf       	rjmp	.-6      	; 0xb3e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b44:	2a 9a       	sbi	0x05, 2	; 5
     b46:	86 e0       	ldi	r24, 0x06	; 6
     b48:	75 c0       	rjmp	.+234    	; 0xc34 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b4a:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b50:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b52:	07 fe       	sbrs	r0, 7
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x132>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b56:	1e b5       	in	r17, 0x2e	; 46
     b58:	1e bd       	out	0x2e, r17	; 46
     b5a:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b5c:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b5e:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     b60:	09 f0       	breq	.+2      	; 0xb64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
     b62:	86 cf       	rjmp	.-244    	; 0xa70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b64:	0d b4       	in	r0, 0x2d	; 45
     b66:	07 fe       	sbrs	r0, 7
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b6a:	9e b5       	in	r25, 0x2e	; 46
     b6c:	2a 9a       	sbi	0x05, 2	; 5
     b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b70:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b72:	8f 8b       	std	Y+23, r24	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     b74:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b76:	9f 5f       	subi	r25, 0xFF	; 255
     b78:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next PD octet
     b7a:	91 11       	cpse	r25, r1
     b7c:	0e c0       	rjmp	.+28     	; 0xb9a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17c>
     b7e:	2a 98       	cbi	0x05, 2	; 5
     b80:	83 e8       	ldi	r24, 0x83	; 131
     b82:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b84:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b86:	07 fe       	sbrs	r0, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x166>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b8a:	8e b5       	in	r24, 0x2e	; 46
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b90:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b92:	07 fe       	sbrs	r0, 7
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x172>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b96:	2a 9a       	sbi	0x05, 2	; 5
     b98:	63 c0       	rjmp	.+198    	; 0xc60 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
     b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b9c:	5f db       	rcall	.-2370   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>
     b9e:	9d 89       	ldd	r25, Y+21	; 0x15
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     ba0:	89 13       	cpse	r24, r25
     ba2:	66 cf       	rjmp	.-308    	; 0xa70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     ba4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x18e>
     baa:	67 cf       	rjmp	.-306    	; 0xa7a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     bac:	8c 89       	ldd	r24, Y+20	; 0x14
     bae:	98 8d       	ldd	r25, Y+24	; 0x18
     bb0:	28 2f       	mov	r18, r24
     bb2:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bb4:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     bb6:	41 f0       	breq	.+16     	; 0xbc8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1aa>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bb8:	89 89       	ldd	r24, Y+17	; 0x11
     bba:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     bbc:	89 8b       	std	Y+17, r24	; 0x11
     bbe:	89 8d       	ldd	r24, Y+25	; 0x19
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	1a 8e       	std	Y+26, r1	; 0x1a
     bc4:	1f 8a       	std	Y+23, r1	; 0x17
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     bc6:	28 c0       	rjmp	.+80     	; 0xc18 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1fa>
     bc8:	8f 71       	andi	r24, 0x1F	; 31

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     bca:	88 87       	std	Y+8, r24	; 0x08
                _checksum8 = 0;
     bcc:	99 87       	std	Y+9, r25	; 0x09
                goto frame_snd_pd;
     bce:	89 89       	ldd	r24, Y+17	; 0x11
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     bd0:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     bd2:	f4 cf       	rjmp	.-24     	; 0xbbc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x19e>
        _parameterWrite.value = data;
     bd4:	1f 8a       	std	Y+23, r1	; 0x17
        _prmWriteAvailable = true;
     bd6:	8c 89       	ldd	r24, Y+20	; 0x14
     bd8:	68 2f       	mov	r22, r24
     bda:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     bdc:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bde:	22 db       	rcall	.-2492   	; 0x224 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     be0:	2a 98       	cbi	0x05, 2	; 5
     be2:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     be4:	9e bd       	out	0x2e, r25	; 46
     be6:	0d b4       	in	r0, 0x2d	; 45
     be8:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     bea:	fd cf       	rjmp	.-6      	; 0xbe6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1c8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bec:	1e b5       	in	r17, 0x2e	; 46
     bee:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bf0:	0d b4       	in	r0, 0x2d	; 45
     bf2:	07 fe       	sbrs	r0, 7
     bf4:	fd cf       	rjmp	.-6      	; 0xbf0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1d2>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     bf6:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bf8:	9f 89       	ldd	r25, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bfa:	89 27       	eor	r24, r25
     bfc:	8f 8b       	std	Y+23, r24	; 0x17
     bfe:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c00:	2d db       	rcall	.-2470   	; 0x25c <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     c02:	8e 8b       	std	Y+22, r24	; 0x16
     c04:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c06:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     c08:	8a 8f       	std	Y+26, r24	; 0x1a
     c0a:	81 11       	cpse	r24, r1
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f4>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     c0e:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     c10:	11 c0       	rjmp	.+34     	; 0xc34 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
     c12:	1a 8e       	std	Y+26, r1	; 0x1a
     c14:	89 e0       	ldi	r24, 0x09	; 9
     c16:	0e c0       	rjmp	.+28     	; 0xc34 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
     c18:	8e 89       	ldd	r24, Y+22	; 0x16
            {
                _frameState = FRAME_SND_ODX;
     c1a:	2a 98       	cbi	0x05, 2	; 5
     c1c:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     c1e:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     c20:	0d b4       	in	r0, 0x2d	; 45
     c22:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x202>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c26:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c28:	8e bd       	out	0x2e, r24	; 46
     c2a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c2c:	07 fe       	sbrs	r0, 7
     c2e:	fd cf       	rjmp	.-6      	; 0xc2a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x20c>
     c30:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c32:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c34:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
     c38:	2a 98       	cbi	0x05, 2	; 5
     c3a:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c3c:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     c3e:	0d b4       	in	r0, 0x2d	; 45
     c40:	07 fe       	sbrs	r0, 7
        }
        break;
     c42:	fd cf       	rjmp	.-6      	; 0xc3e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x220>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c44:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c4a:	0d b4       	in	r0, 0x2d	; 45
     c4c:	07 fe       	sbrs	r0, 7
     c4e:	fd cf       	rjmp	.-6      	; 0xc4a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x22c>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c50:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	88 83       	st	Y, r24
     c5a:	60 e0       	ldi	r22, 0x00	; 0
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c5c:	ce 01       	movw	r24, r28
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     c5e:	1b dc       	rcall	.-1994   	; 0x496 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
     c60:	17 ff       	sbrs	r17, 7

            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24a>
     c64:	80 e0       	ldi	r24, 0x00	; 0
              
            // start user call-back timer
            startCallbackTimer();
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     c6e:	1f 91       	pop	r17
     c70:	08 95       	ret

00000c72 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     c72:	fc 01       	movw	r30, r24
     c74:	2a 98       	cbi	0x05, 2	; 5
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     c76:	80 e8       	ldi	r24, 0x80	; 128
    else
        return ResultSuccess;
}
     c78:	8e bd       	out	0x2e, r24	; 46
     c7a:	0d b4       	in	r0, 0x2d	; 45
     c7c:	07 fe       	sbrs	r0, 7
     c7e:	fd cf       	rjmp	.-6      	; 0xc7a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c80:	8c e0       	ldi	r24, 0x0C	; 12
     c82:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c84:	0d b4       	in	r0, 0x2d	; 45
     c86:	07 fe       	sbrs	r0, 7
     c88:	fd cf       	rjmp	.-6      	; 0xc84 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x12>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c8a:	82 e3       	ldi	r24, 0x32	; 50
     c8c:	8e bd       	out	0x2e, r24	; 46
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     c8e:	87 81       	ldd	r24, Z+7	; 0x07
     c90:	80 fd       	sbrc	r24, 0
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x26>
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x28>
     c98:	92 e0       	ldi	r25, 0x02	; 2
    
    // REG_CTL
    StackBase::registerWriteNext(StackT::PHY_CTL_SCT | 
                                 StackT::PHY_CTL_MODE | 
                                 Phy::CTL_SIO_MODE | 
                                 driveModeBits());
     c9a:	9c 60       	ori	r25, 0x0C	; 12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c9c:	0d b4       	in	r0, 0x2d	; 45
     c9e:	07 fe       	sbrs	r0, 7
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x2a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ca2:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ca4:	0d b4       	in	r0, 0x2d	; 45
     ca6:	07 fe       	sbrs	r0, 7
     ca8:	fd cf       	rjmp	.-6      	; 0xca4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x32>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     caa:	1e bc       	out	0x2e, r1	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     cac:	0d b4       	in	r0, 0x2d	; 45
     cae:	07 fe       	sbrs	r0, 7
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x3a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     cb6:	0d b4       	in	r0, 0x2d	; 45
     cb8:	07 fe       	sbrs	r0, 7
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x44>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     cbc:	1e bc       	out	0x2e, r1	; 46
    
    // REG_STATUS (HMT7742) / REG_TEMP (HMT7748) - (dummy write)
    Phy::registerWriteNext(0);        
    
    // LEDs
    StackBase::registerWriteNext(this->_ledRegister);        
     cbe:	87 85       	ldd	r24, Z+15	; 0x0f
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     cc0:	0d b4       	in	r0, 0x2d	; 45
     cc2:	07 fe       	sbrs	r0, 7
     cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x4e>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     cc6:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     cc8:	0d b4       	in	r0, 0x2d	; 45
     cca:	07 fe       	sbrs	r0, 7
     ccc:	fd cf       	rjmp	.-6      	; 0xcc8 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x56>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     cce:	2a 9a       	sbi	0x05, 2	; 5
#endif

    registerWriteDone();

    // set the stack to SIO mode to be in sync with the PHY.
    _ddlMode = IoLink::DDL_MODE_IDLE;
     cd0:	10 82       	st	Z, r1
     cd2:	08 95       	ret

00000cd4 <__vector_4>:
Interrupt service routine for the PHY interrupt.

We immediately forward the call to onPhyInterrupt().
*/
ISR(PCINT1_vect)
{
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	4f 93       	push	r20
     ce4:	5f 93       	push	r21
     ce6:	6f 93       	push	r22
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
    // 
    // (If INT isn't cleared after the handler, then the PHY state is probably
    //  out of sync with the one expected by the firmware. In that case, this
    //  ISR will never be called again. Looping the handler ensures we eventually
    //  resync before exiting the ISR)
    while (bit_is_set(PINC, PINC0))
     cf6:	30 9b       	sbis	0x06, 0	; 6
     cf8:	79 c0       	rjmp	.+242    	; 0xdec <__vector_4+0x118>

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     cfa:	80 91 15 01 	lds	r24, 0x0115
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	20 f4       	brcc	.+8      	; 0xd0a <__vector_4+0x36>
    {
        result = handleFirstOperatingModes();
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	b5 da       	rcall	.-2710   	; 0x272 <_ZN15StackSingleByte25handleFirstOperatingModesEv>
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <__vector_4+0x38>
     d0a:	80 e0       	ldi	r24, 0x00	; 0

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     d0c:	90 91 15 01 	lds	r25, 0x0115
    {
        result = handleFirstOperatingModes();
    }
    
    if (_frameState > FRAME_RCV_CKT)
     d10:	93 30       	cpi	r25, 0x03	; 3
     d12:	88 f0       	brcs	.+34     	; 0xd36 <__vector_4+0x62>
     d14:	80 91 16 01 	lds	r24, 0x0116
    {
        // call appropriate state handler
        switch (_receiveDdlMode)
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	31 f0       	breq	.+12     	; 0xd28 <__vector_4+0x54>
     d1c:	84 30       	cpi	r24, 0x04	; 4
     d1e:	41 f4       	brne	.+16     	; 0xd30 <__vector_4+0x5c>
     d20:	83 e0       	ldi	r24, 0x03	; 3
        {
        case IoLink::DDL_MODE_OPERATE:    
            result = handleOperatingMode<IoLink::DDL_MODE_OPERATE>(); 
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	fb db       	rcall	.-2058   	; 0x51c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <__vector_4+0x62>
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	91 e0       	ldi	r25, 0x01	; 1
            break;
        case IoLink::DDL_MODE_PREOPERATE:
            result = handleOperatingMode<IoLink::DDL_MODE_PREOPERATE>();
     d2c:	50 dd       	rcall	.-1376   	; 0x7ce <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <__vector_4+0x62>
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	74 de       	rcall	.-792    	; 0xa1e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
            break;
        default:                  
            result = handleOperatingMode<IoLink::DDL_MODE_STARTUP>(); 
     d36:	83 30       	cpi	r24, 0x03	; 3
     d38:	19 f1       	breq	.+70     	; 0xd80 <__vector_4+0xac>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	c9 f1       	breq	.+114    	; 0xdb0 <__vector_4+0xdc>
            break;
        }
    }

    // handle result codes
    switch (result)
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	09 f0       	breq	.+2      	; 0xd44 <__vector_4+0x70>
     d42:	4a c0       	rjmp	.+148    	; 0xdd8 <__vector_4+0x104>
     d44:	2a 99       	sbic	0x05, 2	; 5
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__vector_4+0x7c>
     d48:	0d b4       	in	r0, 0x2d	; 45
     d4a:	07 fe       	sbrs	r0, 7

//------------------------------------------------------------------------------
template <class SpiSsHndlr> 
void PhyDriver<SpiSsHndlr>::registerAbortAccess()
{
    if (_ssHndlr.asserted())
     d4c:	fd cf       	rjmp	.-6      	; 0xd48 <__vector_4+0x74>
     d4e:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d50:	2a 98       	cbi	0x05, 2	; 5
     d52:	83 e8       	ldi	r24, 0x83	; 131
     d54:	8e bd       	out	0x2e, r24	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     d56:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d58:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d5a:	fd cf       	rjmp	.-6      	; 0xd56 <__vector_4+0x82>
     d5c:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	9e bd       	out	0x2e, r25	; 46
     d62:	0d b4       	in	r0, 0x2d	; 45
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d64:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d66:	fd cf       	rjmp	.-6      	; 0xd62 <__vector_4+0x8e>
     d68:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d6a:	81 ff       	sbrs	r24, 1
     d6c:	31 c0       	rjmp	.+98     	; 0xdd0 <__vector_4+0xfc>
     d6e:	80 91 03 01 	lds	r24, 0x0103
            registerAbortAccess();

            // bad data has been received, so decline to respond
            uint8_t status = registerWrite(REG_LINK, LINK_END);
        
            if ((status & STATUS_SSC) && (_ddlMode == IoLink::DDL_MODE_IDLE))
     d72:	81 11       	cpse	r24, r1
     d74:	2d c0       	rjmp	.+90     	; 0xdd0 <__vector_4+0xfc>
     d76:	6f e7       	ldi	r22, 0x7F	; 127
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	8c db       	rcall	.-2280   	; 0x496 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
            {
                // setIoLinkListen();
                
                // a possible WURQ has been received, go quiet
                startCallbackTimer(127);
     d7e:	28 c0       	rjmp	.+80     	; 0xdd0 <__vector_4+0xfc>
     d80:	2a 98       	cbi	0x05, 2	; 5
     d82:	83 e8       	ldi	r24, 0x83	; 131
     d84:	8e bd       	out	0x2e, r24	; 46
     d86:	0d b4       	in	r0, 0x2d	; 45
     d88:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d8a:	fd cf       	rjmp	.-6      	; 0xd86 <__vector_4+0xb2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d8c:	8e b5       	in	r24, 0x2e	; 46
     d8e:	82 e0       	ldi	r24, 0x02	; 2
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d90:	8e bd       	out	0x2e, r24	; 46
     d92:	0d b4       	in	r0, 0x2d	; 45
     d94:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d96:	fd cf       	rjmp	.-6      	; 0xd92 <__vector_4+0xbe>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d98:	2a 9a       	sbi	0x05, 2	; 5
     d9a:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d9c:	80 93 15 01 	sts	0x0115, r24
     da0:	80 91 03 01 	lds	r24, 0x0103
    case ResultIllegalMessageType:
        // bad data has been received, so decline to respond
        registerWrite(REG_LINK, LINK_END);

        // reset state
        _frameState = FRAME_RCV_MC;
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	b8 f0       	brcs	.+46     	; 0xdd6 <__vector_4+0x102>
     da8:	82 e0       	ldi	r24, 0x02	; 2

        // revert to startup mode
        if (_ddlMode>IoLink::DDL_MODE_STARTUP)
     daa:	80 93 03 01 	sts	0x0103, r24
     dae:	13 c0       	rjmp	.+38     	; 0xdd6 <__vector_4+0x102>
     db0:	2a 98       	cbi	0x05, 2	; 5
            _ddlMode = IoLink::DDL_MODE_STARTUP;
     db2:	85 e8       	ldi	r24, 0x85	; 133
     db4:	8e bd       	out	0x2e, r24	; 46
     db6:	0d b4       	in	r0, 0x2d	; 45
     db8:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <__vector_4+0xe2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     dbc:	8e b5       	in	r24, 0x2e	; 46
     dbe:	80 e8       	ldi	r24, 0x80	; 128
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     dc0:	8e bd       	out	0x2e, r24	; 46
     dc2:	0d b4       	in	r0, 0x2d	; 45
     dc4:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     dc6:	fd cf       	rjmp	.-6      	; 0xdc2 <__vector_4+0xee>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     dc8:	2a 9a       	sbi	0x05, 2	; 5
     dca:	83 e0       	ldi	r24, 0x03	; 3
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	51 df       	rcall	.-350    	; 0xc72 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     dd2:	80 93 15 01 	sts	0x0115, r24
        break;

    case ResultPhyReset:
        // reset the reset bit
        registerWrite(REG_STATUS, STATUS_RST);
        configurePhy();
     dd6:	3b da       	rcall	.-2954   	; 0x24e <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7>
     dd8:	80 91 15 01 	lds	r24, 0x0115

        // reset state
        _frameState = FRAME_RCV_MC;
     ddc:	88 50       	subi	r24, 0x08	; 8
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	10 f4       	brcc	.+4      	; 0xde6 <__vector_4+0x112>
        
        // restart the timer
        restartTimer();
     de2:	30 9b       	sbis	0x06, 0	; 6
     de4:	fe cf       	rjmp	.-4      	; 0xde2 <__vector_4+0x10e>

    // When sending, the UART transmission delay t2 (see A.3.4) must be less
    // than 3*Tbit (= 13us @ 230'400baud). We can't meet this timing constraint
    // if we wait for the next interrupt, so we loop until the last octet has
    // been sent, and immediately re-enter the ISR.
    switch (_frameState)
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	8b bb       	out	0x1b, r24	; 27
     dea:	85 cf       	rjmp	.-246    	; 0xcf6 <__vector_4+0x22>
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
    {
    case FRAME_SND_ODX:
    case FRAME_SND_PD:
    case FRAME_SND_CKS:
        // wait until byte sent (can be removed if MPU frequency 20Mhz)
        loop_until_bit_is_set(PINC, PINC0);
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
    while (bit_is_set(PINC, PINC0))
    {
        StackSingleByte::instance.onPhyInterrupt();

        // clear interrupt flag
        PCIFR = _BV(PCIF1);
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
    }
}
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <_GLOBAL__sub_I_directParameter>:
     e0e:	e3 e0       	ldi	r30, 0x03	; 3
     e10:	f1 e0       	ldi	r31, 0x01	; 1
     e12:	10 82       	st	Z, r1
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	95 83       	std	Z+5, r25	; 0x05
     e18:	aa e0       	ldi	r26, 0x0A	; 10
     e1a:	b1 e0       	ldi	r27, 0x01	; 1
    , _ledRegister(0)
    , _fallbackCounter(0)
    , _runUserCode(false)
    , _sioLevel(true)
    , _prmWriteAvailable(false)
    , _flag(false)
     e1c:	8c 91       	ld	r24, X
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	8c 93       	st	X, r24
     e22:	13 86       	std	Z+11, r1	; 0x0b
     e24:	12 86       	std	Z+10, r1	; 0x0a
     e26:	15 86       	std	Z+13, r1	; 0x0d
     e28:	14 86       	std	Z+12, r1	; 0x0c
     e2a:	96 87       	std	Z+14, r25	; 0x0e
     e2c:	17 86       	std	Z+15, r1	; 0x0f
     e2e:	10 8a       	std	Z+16, r1	; 0x10
     e30:	a4 e1       	ldi	r26, 0x14	; 20
     e32:	b1 e0       	ldi	r27, 0x01	; 1
     e34:	8c 91       	ld	r24, X
     e36:	8c 7f       	andi	r24, 0xFC	; 252
     e38:	8b 7f       	andi	r24, 0xFB	; 251
     e3a:	8c 93       	st	X, r24
{
    _parameterWrite.address = IoLink::PAGE_NO_PARAMETER;
     e3c:	90 87       	std	Z+8, r25	; 0x08
     * 
     * \note Use \c Stack::instance to access the stack instance
     */
    StackSingleByte() : _frameState(FRAME_RESET),
                        _tccr0bRecord(0),
                        _receiveDdlMode(IoLink::DDL_MODE_IDLE) {}
     e3e:	12 8a       	std	Z+18, r1	; 0x12
     e40:	13 8a       	std	Z+19, r1	; 0x13
     e42:	13 8e       	std	Z+27, r1	; 0x1b
     e44:	08 95       	ret

00000e46 <_ZN7DemoApp9configureEv>:

//------------------------------------------------------------------------------
void DemoApp::configure()
{
    // Configure a timer with 10ms cycle
    OCR2A   = F_CPU / 1024 / 100;
     e46:	8e e4       	ldi	r24, 0x4E	; 78
     e48:	80 93 b3 00 	sts	0x00B3, r24

    /* Start the timer
       WGM    = 3'b010  - clear timer on match
       COMxx  = 2'b0    - pins not used
       CS     = 3'b111   - divide by 1024 */
    TCCR2A = _BV(WGM21);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	80 93 b1 00 	sts	0x00B1, r24

    // configure digital input
    DDRB &= ~_BV(DDB7);
     e58:	27 98       	cbi	0x04, 7	; 4
     e5a:	08 95       	ret

00000e5c <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>:
    updateProcessInputData();
}

//------------------------------------------------------------------------------
void DemoApp::handleParameterWrite(const Stack::Parameter* param)
{
     e5c:	fb 01       	movw	r30, r22
    // (this is the location to intercept the write access if desired)
    bool commit = true;

    switch (param->address)
     e5e:	80 81       	ld	r24, Z
     e60:	81 31       	cpi	r24, 0x11	; 17
     e62:	09 f4       	brne	.+2      	; 0xe66 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa>
     e64:	7a c0       	rjmp	.+244    	; 0xf5a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	82 31       	cpi	r24, 0x12	; 18
     e6a:	29 f0       	breq	.+10     	; 0xe76 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x1a>
     e6c:	80 31       	cpi	r24, 0x10	; 16
     e6e:	59 f4       	brne	.+22     	; 0xe86 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
    case IoLink::PAGE_DEVICE_SPECIFIC_1B:
    case IoLink::PAGE_DEVICE_SPECIFIC_1C:
    case IoLink::PAGE_DEVICE_SPECIFIC_1D:
    case IoLink::PAGE_DEVICE_SPECIFIC_1E:
    case IoLink::PAGE_DEVICE_SPECIFIC_1F:
        directParameter[address] = value;
     e70:	90 93 39 01 	sts	0x0139, r25
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
        // read-only access => ignore
        commit = false;
        break;

    case VendorParamPidMode:  // process input data selection
        switch (param->value)
     e76:	91 30       	cpi	r25, 0x01	; 1
     e78:	31 f4       	brne	.+12     	; 0xe86 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
        {
        case PidAnalogInput:
            // configure ADC
            ADMUX = _BV(REFS0) | 7; 
     e7a:	87 e4       	ldi	r24, 0x47	; 71
     e7c:	80 93 7c 00 	sts	0x007C, r24
            ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADEN) | _BV(ADSC);
     e80:	87 ec       	ldi	r24, 0xC7	; 199
     e82:	80 93 7a 00 	sts	0x007A, r24
    }

    if (commit)
    {
        // commit to stack
        Stack::instance.parameterWrite(param->address, param->value);
     e86:	21 81       	ldd	r18, Z+1	; 0x01
     e88:	e0 81       	ld	r30, Z
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e8a:	ec 30       	cpi	r30, 0x0C	; 12
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x34>
     e8e:	60 c0       	rjmp	.+192    	; 0xf50 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xf4>
     e90:	e9 30       	cpi	r30, 0x09	; 9
     e92:	50 f0       	brcs	.+20     	; 0xea8 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x4c>

    case IoLink::PAGE_REVISION_ID:
    case IoLink::PAGE_DEVICE_ID_1:
    case IoLink::PAGE_DEVICE_ID_2:
    case IoLink::PAGE_DEVICE_ID_3:
        if (_ddlMode == IoLink::DDL_MODE_STARTUP)
     e94:	80 91 03 01 	lds	r24, 0x0103
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	09 f0       	breq	.+2      	; 0xe9e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
     e9c:	5e c0       	rjmp	.+188    	; 0xf5a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
        {
            directParameter[address] = value;
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	e8 5d       	subi	r30, 0xD8	; 216
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	20 83       	st	Z, r18
     ea6:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     ea8:	e1 30       	cpi	r30, 0x01	; 1
     eaa:	69 f5       	brne	.+90     	; 0xf06 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xaa>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     eac:	80 91 03 01 	lds	r24, 0x0103
     eb0:	84 30       	cpi	r24, 0x04	; 4
     eb2:	21 f4       	brne	.+8      	; 0xebc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x60>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     eb4:	80 91 29 01 	lds	r24, 0x0129
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     eb8:	81 11       	cpse	r24, r1
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x64>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     ebc:	80 91 2a 01 	lds	r24, 0x012A
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	d0 f0       	brcs	.+52     	; 0xef8 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x9c>
     ec4:	80 34       	cpi	r24, 0x40	; 64
     ec6:	10 f4       	brcc	.+4      	; 0xecc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x70>
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	18 c0       	rjmp	.+48     	; 0xefc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     ecc:	98 2f       	mov	r25, r24
     ece:	90 7c       	andi	r25, 0xC0	; 192
     ed0:	90 34       	cpi	r25, 0x40	; 64
     ed2:	41 f4       	brne	.+16     	; 0xee4 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x88>
     ed4:	34 e0       	ldi	r19, 0x04	; 4
     ed6:	83 9f       	mul	r24, r19
     ed8:	c0 01       	movw	r24, r0
     eda:	11 24       	eor	r1, r1
     edc:	99 27       	eor	r25, r25
     ede:	80 5c       	subi	r24, 0xC0	; 192
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	0c c0       	rjmp	.+24     	; 0xefc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     ee4:	90 38       	cpi	r25, 0x80	; 128
     ee6:	41 f4       	brne	.+16     	; 0xef8 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x9c>
     ee8:	8f 73       	andi	r24, 0x3F	; 63
     eea:	30 e1       	ldi	r19, 0x10	; 16
     eec:	83 9f       	mul	r24, r19
     eee:	c0 01       	movw	r24, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	80 5c       	subi	r24, 0xC0	; 192
     ef4:	9e 4f       	sbci	r25, 0xFE	; 254
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 0e 01 	sts	0x010E, r25
     f00:	80 93 0d 01 	sts	0x010D, r24
     f04:	cc cf       	rjmp	.-104    	; 0xe9e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     f06:	e1 30       	cpi	r30, 0x01	; 1
     f08:	f8 f4       	brcc	.+62     	; 0xf48 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xec>
    {
    case IoLink::PAGE_MASTER_CMD:
        switch (value)
     f0a:	28 39       	cpi	r18, 0x98	; 152
     f0c:	a1 f0       	breq	.+40     	; 0xf36 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xda>
     f0e:	28 f4       	brcc	.+10     	; 0xf1a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xbe>
     f10:	2a 35       	cpi	r18, 0x5A	; 90
     f12:	b1 f0       	breq	.+44     	; 0xf40 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xe4>
     f14:	27 39       	cpi	r18, 0x97	; 151
     f16:	31 f0       	breq	.+12     	; 0xf24 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xc8>
     f18:	08 95       	ret
     f1a:	29 39       	cpi	r18, 0x99	; 153
     f1c:	49 f0       	breq	.+18     	; 0xf30 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xd4>
     f1e:	2a 39       	cpi	r18, 0x9A	; 154
     f20:	19 f0       	breq	.+6      	; 0xf28 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xcc>
     f22:	08 95       	ret
        {
        case IoLink::MCMD_DEVICE_STARTUP:   
            _ddlMode = IoLink::DDL_MODE_STARTUP;  
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_DEVICE_PREOPERATE:
            _ddlMode = IoLink::DDL_MODE_PREOPERATE; 
     f28:	83 e0       	ldi	r24, 0x03	; 3
     f2a:	80 93 03 01 	sts	0x0103, r24
     f2e:	08 95       	ret
            break;
        case IoLink::MCMD_DEVICE_OPERATE:   
            _processDataOut.isValid = false;
     f30:	10 92 07 01 	sts	0x0107, r1
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xe0>
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
            break;
        case IoLink::MCMD_PD_OUT_OPERATE:   // Process output data valid
            _processDataOut.isValid = true;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 93 07 01 	sts	0x0107, r24
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_FALLBACK:
            // switch to SIO mode after 3 cycles
            _fallbackCounter = 3;
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	80 93 13 01 	sts	0x0113, r24
     f46:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     f48:	e4 30       	cpi	r30, 0x04	; 4
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xf2>
     f4c:	a3 cf       	rjmp	.-186    	; 0xe94 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x38>
     f4e:	08 95       	ret
     f50:	81 ef       	ldi	r24, 0xF1	; 241
     f52:	8e 0f       	add	r24, r30
     f54:	81 31       	cpi	r24, 0x11	; 17
     f56:	08 f4       	brcc	.+2      	; 0xf5a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
     f58:	a2 cf       	rjmp	.-188    	; 0xe9e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
     f5a:	08 95       	ret

00000f5c <_ZN7DemoApp11elapsed10msEv>:
}

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
     f5c:	b9 9b       	sbis	0x17, 1	; 23
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <_ZN7DemoApp11elapsed10msEv+0xc>
        return false;

    TIFR2 = _BV(OCF2A);
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	87 bb       	out	0x17, r24	; 23
    return true;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	08 95       	ret

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
        return false;
     f68:	80 e0       	ldi	r24, 0x00	; 0

    TIFR2 = _BV(OCF2A);
    return true;
}
     f6a:	08 95       	ret

00000f6c <_ZN7DemoApp22updateProcessInputDataEv>:
    }
}

//------------------------------------------------------------------------------
void DemoApp::updateProcessInputData()
{
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
    if (elapsed10ms())
     f72:	f4 df       	rcall	.-24     	; 0xf5c <_ZN7DemoApp11elapsed10msEv>
     f74:	88 23       	and	r24, r24
     f76:	61 f1       	breq	.+88     	; 0xfd0 <_ZN7DemoApp22updateProcessInputDataEv+0x64>
     f78:	88 81       	ld	r24, Y
    {
        // the green LED cycles if IO-Link comms are up, red if not
        ++_ctr;
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	88 83       	st	Y, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t level = ((_ctr >> 3) & 0x0f);
     f80:	23 e0       	ldi	r18, 0x03	; 3
     f82:	95 95       	asr	r25
     f84:	87 95       	ror	r24
     f86:	2a 95       	dec	r18
     f88:	e1 f7       	brne	.-8      	; 0xf82 <_ZN7DemoApp22updateProcessInputDataEv+0x16>
     f8a:	98 2f       	mov	r25, r24
     f8c:	9f 70       	andi	r25, 0x0F	; 15
     f8e:	83 ff       	sbrs	r24, 3
        if (level & 0x8) level = ((~level) & 0x7);
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <_ZN7DemoApp22updateProcessInputDataEv+0x2a>
     f92:	90 95       	com	r25
     f94:	97 70       	andi	r25, 0x07	; 7
     f96:	80 91 08 01 	lds	r24, 0x0108

        if (Stack::instance.masterLost())
     f9a:	85 30       	cpi	r24, 0x05	; 5
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <_ZN7DemoApp22updateProcessInputDataEv+0x38>
     f9e:	19 82       	std	Y+1, r1	; 0x01
            {
                // flash the red LED
                _ledLevel1 = Stack::LED_LEVEL_OFF;
     fa0:	9a 83       	std	Y+2, r25	; 0x02
                _ledLevel2 = (Stack::LedLevel)(level);
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <_ZN7DemoApp22updateProcessInputDataEv+0x3c>
     fa4:	99 83       	std	Y+1, r25	; 0x01
            }
            else
            {
                // flash the green LED
                _ledLevel1 = (Stack::LedLevel)(level);
     fa6:	1a 82       	std	Y+2, r1	; 0x02
                _ledLevel2 = Stack::LED_LEVEL_OFF;
     fa8:	1f 99       	sbic	0x03, 7	; 3
            };

        // the red LED is over-ridden if the push-button is pressed
        if (isDigitalButtonPressed())
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <_ZN7DemoApp22updateProcessInputDataEv+0x44>
     fac:	8f e0       	ldi	r24, 0x0F	; 15
        {
            _ledLevel2 = (Stack::LedLevel)(0xf);
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
        _ledRegister |= (level << 4);
     fb2:	20 e1       	ldi	r18, 0x10	; 16
     fb4:	82 9f       	mul	r24, r18
     fb6:	c0 01       	movw	r24, r0
     fb8:	11 24       	eor	r1, r1
     fba:	90 91 12 01 	lds	r25, 0x0112
void StackBase<T, PDI, PDO, SpiSsHndlr>::setLedLevel(Led led, typename Phy::LedLevel level)
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
     fbe:	9f 70       	andi	r25, 0x0F	; 15
     fc0:	89 2b       	or	r24, r25
        _ledRegister |= (level << 4);
     fc2:	80 93 12 01 	sts	0x0112, r24
     fc6:	80 7f       	andi	r24, 0xF0	; 240
        break;

    case LED_2:
        _ledRegister &= 0xf0;
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
        _ledRegister |= level;
     fca:	89 2b       	or	r24, r25
     fcc:	80 93 12 01 	sts	0x0112, r24
     fd0:	80 91 3a 01 	lds	r24, 0x013A

        Stack::instance.setLedLevel(Stack::LED_1, _ledLevel1);
        Stack::instance.setLedLevel(Stack::LED_2, _ledLevel2);
    }

    switch (Stack::instance.parameterRead(VendorParamPidMode))
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	71 f0       	breq	.+28     	; 0xff4 <_ZN7DemoApp22updateProcessInputDataEv+0x88>
     fd8:	38 f0       	brcs	.+14     	; 0xfe8 <_ZN7DemoApp22updateProcessInputDataEv+0x7c>
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	09 f1       	breq	.+66     	; 0x1020 <_ZN7DemoApp22updateProcessInputDataEv+0xb4>
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	31 f5       	brne	.+76     	; 0x102e <_ZN7DemoApp22updateProcessInputDataEv+0xc2>
     fe2:	80 91 4f 01 	lds	r24, 0x014F
        Stack::instance.processInputData().buffer[0] = _ctr;
        Stack::instance.processInputData().isValid = true;
        break;
		
	case PidI2cData:
		Stack::instance.processInputData().buffer[0] = i2cData[0];
     fe6:	1d c0       	rjmp	.+58     	; 0x1022 <_ZN7DemoApp22updateProcessInputDataEv+0xb6>
     fe8:	83 b1       	in	r24, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
     fea:	80 95       	com	r24

    switch (Stack::instance.parameterRead(VendorParamPidMode))
    {
    case PidDigitalInput:
        // check digital sensor 
        Stack::instance.processInputData().buffer[0] = isDigitalButtonPressed() ? 0x01 : 0x00;
     fec:	88 1f       	adc	r24, r24
     fee:	88 27       	eor	r24, r24
     ff0:	88 1f       	adc	r24, r24
     ff2:	17 c0       	rjmp	.+46     	; 0x1022 <_ZN7DemoApp22updateProcessInputDataEv+0xb6>
     ff4:	90 91 7a 00 	lds	r25, 0x007A
        Stack::instance.processInputData().isValid = true;
        break;

    case PidAnalogInput:
        // check analog sensor
        if (!(ADCSRA & _BV(ADSC)))
     ff8:	96 fd       	sbrc	r25, 6
     ffa:	1b c0       	rjmp	.+54     	; 0x1032 <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
     ffc:	20 91 78 00 	lds	r18, 0x0078
        {
            uint16_t sensorValue = ADC;
    1000:	30 91 79 00 	lds	r19, 0x0079
    1004:	36 95       	lsr	r19

            Stack::instance.processInputData().buffer[0] = sensorValue >> 2;
    1006:	27 95       	ror	r18
    1008:	36 95       	lsr	r19
    100a:	27 95       	ror	r18
    100c:	20 93 04 01 	sts	0x0104, r18
    1010:	80 93 05 01 	sts	0x0105, r24
            Stack::instance.processInputData().isValid = true;
    1014:	80 91 7a 00 	lds	r24, 0x007A

            // restart sampling
            ADCSRA |= _BV(ADSC);
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	80 93 7a 00 	sts	0x007A, r24
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
    1020:	88 81       	ld	r24, Y
        }
        break;

    case PidSawtooth:
        // copy counter to process input data
        Stack::instance.processInputData().buffer[0] = _ctr;
    1022:	80 93 04 01 	sts	0x0104, r24
        Stack::instance.processInputData().isValid = true;
        break;
		
	case PidI2cData:
		Stack::instance.processInputData().buffer[0] = i2cData[0];
    1026:	81 e0       	ldi	r24, 0x01	; 1
		Stack::instance.processInputData().isValid = true;
    1028:	80 93 05 01 	sts	0x0105, r24
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
		break;
    102e:	10 92 05 01 	sts	0x0105, r1

    default:
        Stack::instance.processInputData().isValid = false;
    1032:	df 91       	pop	r29
        break;
    }
}
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>:
    1038:	cf 93       	push	r28
    DDRB &= ~_BV(DDB7);
}

//------------------------------------------------------------------------------
void DemoApp::run(const Stack::Parameter* param)
{
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
    // check for write access to direct parameter page
    if (param)
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	11 f0       	breq	.+4      	; 0x1048 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x10>
    {
        handleParameterWrite(param);
    1044:	0b df       	rcall	.-490    	; 0xe5c <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>
    1046:	27 c0       	rjmp	.+78     	; 0x1096 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x5e>
    1048:	80 91 03 01 	lds	r24, 0x0103
    }
    else if (Stack::instance.stackMode() == Stack::STACK_MODE_SIO)
    104c:	81 11       	cpse	r24, r1
    104e:	23 c0       	rjmp	.+70     	; 0x1096 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x5e>
    1050:	93 b1       	in	r25, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
    1052:	90 95       	com	r25
    1054:	99 1f       	adc	r25, r25
    1056:	99 27       	eor	r25, r25
    1058:	99 1f       	adc	r25, r25
    105a:	80 91 0a 01 	lds	r24, 0x010A

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::setSioLevel(bool active)
{
    _sioLevel = active;
    105e:	90 fb       	bst	r25, 0
    1060:	80 f9       	bld	r24, 0
    1062:	80 93 0a 01 	sts	0x010A, r24
    1066:	91 11       	cpse	r25, r1
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
    1068:	02 c0       	rjmp	.+4      	; 0x106e <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x36>
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x38>
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
    1072:	80 93 09 01 	sts	0x0109, r24
    1076:	81 e0       	ldi	r24, 0x01	; 1
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
    1078:	80 93 02 01 	sts	0x0102, r24
    107c:	9c 60       	ori	r25, 0x0C	; 12
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
    107e:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
    1080:	82 e8       	ldi	r24, 0x82	; 130
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    1082:	8e bd       	out	0x2e, r24	; 46
    1084:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    1086:	07 fe       	sbrs	r0, 7
    1088:	fd cf       	rjmp	.-6      	; 0x1084 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x4c>
    108a:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
    108c:	9e bd       	out	0x2e, r25	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    108e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    1090:	07 fe       	sbrs	r0, 7
    1092:	fd cf       	rjmp	.-6      	; 0x108e <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x56>
    1094:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
    1096:	ce 01       	movw	r24, r28
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    1098:	df 91       	pop	r29
}
    109a:	cf 91       	pop	r28
    109c:	67 cf       	rjmp	.-306    	; 0xf6c <_ZN7DemoApp22updateProcessInputDataEv>

0000109e <i2c_init>:
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	86 e6       	ldi	r24, 0x66	; 102
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	2f ef       	ldi	r18, 0xFF	; 255
    10ac:	fc 01       	movw	r30, r24
    10ae:	20 83       	st	Z, r18
    10b0:	81 e6       	ldi	r24, 0x61	; 97
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	20 e8       	ldi	r18, 0x80	; 128
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
    10ba:	81 e6       	ldi	r24, 0x61	; 97
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	20 e8       	ldi	r18, 0x80	; 128
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18
    10c4:	88 eb       	ldi	r24, 0xB8	; 184
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	2a e0       	ldi	r18, 0x0A	; 10
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <i2c_start>:
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	8c eb       	ldi	r24, 0xBC	; 188
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	25 ea       	ldi	r18, 0xA5	; 165
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <__vector_24>:
    }
}


ISR(TWI_vect)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
	static uint8_t i2cDataTemp[2];
	if((TWSR & 0xF8) == TW_START)					// start condition successfully transmitted
    1100:	80 91 b9 00 	lds	r24, 0x00B9
    1104:	88 7f       	andi	r24, 0xF8	; 248
    1106:	88 30       	cpi	r24, 0x08	; 8
    1108:	21 f4       	brne	.+8      	; 0x1112 <__vector_24+0x26>
	{
		TWDR = 0b10011011;							// load address(1001101x) and read(1) into data register
    110a:	8b e9       	ldi	r24, 0x9B	; 155
    110c:	80 93 bb 00 	sts	0x00BB, r24
    1110:	0b c0       	rjmp	.+22     	; 0x1128 <__vector_24+0x3c>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);				// start transmission of address
	}
	else if ( ((TW_STATUS & 0xF8) == TW_MT_SLA_ACK) || ((TW_STATUS & 0xF8) == TW_MR_SLA_ACK) ) // address+read/write acknowledged
    1112:	80 91 b9 00 	lds	r24, 0x00B9
    1116:	88 7f       	andi	r24, 0xF8	; 248
    1118:	88 31       	cpi	r24, 0x18	; 24
    111a:	41 f0       	breq	.+16     	; 0x112c <__vector_24+0x40>
    111c:	80 91 b9 00 	lds	r24, 0x00B9
    1120:	88 7f       	andi	r24, 0xF8	; 248
    1122:	80 34       	cpi	r24, 0x40	; 64
    1124:	39 f4       	brne	.+14     	; 0x1134 <__vector_24+0x48>
    1126:	02 c0       	rjmp	.+4      	; 0x112c <__vector_24+0x40>
			}
			
		}
		else	// after transmission of 1st data byte
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE); // start TWI module for 2nd byte and NACK data after reception (signals end of reception)
    1128:	85 e8       	ldi	r24, 0x85	; 133
    112a:	01 c0       	rjmp	.+2      	; 0x112e <__vector_24+0x42>
		TWDR = 0b10011011;							// load address(1001101x) and read(1) into data register
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);				// start transmission of address
	}
	else if ( ((TW_STATUS & 0xF8) == TW_MT_SLA_ACK) || ((TW_STATUS & 0xF8) == TW_MR_SLA_ACK) ) // address+read/write acknowledged
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE); // start TWI module and acknowledge data after reception
    112c:	85 ec       	ldi	r24, 0xC5	; 197
    112e:	80 93 bc 00 	sts	0x00BC, r24
    1132:	2a c0       	rjmp	.+84     	; 0x1188 <__vector_24+0x9c>
	}
	else /*if((TW_STATUS & 0xF8) == TW_MR_DATA_ACK)*/			// data received and acknowledge sent
	{
		static uint8_t byteNumber=0;
		i2cDataTemp[byteNumber] = TWDR;	// data structure from sensor, B1: 0 0 0 0  b10 b9 b8 b7       B2: b6 b5 b4 b3  b2 b1 x x
    1134:	80 91 4e 01 	lds	r24, 0x014E
    1138:	90 91 bb 00 	lds	r25, 0x00BB
    113c:	e8 2f       	mov	r30, r24
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	e4 5b       	subi	r30, 0xB4	; 180
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	90 83       	st	Z, r25
		byteNumber++;
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	80 93 4e 01 	sts	0x014E, r24
		if(byteNumber == 2)							// 2nd byte was sent -> send STOP
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	61 f7       	brne	.-40     	; 0x1128 <__vector_24+0x3c>
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	// transmit STOP condition. disable with endless data acquiry
    1150:	84 e9       	ldi	r24, 0x94	; 148
    1152:	80 93 bc 00 	sts	0x00BC, r24
			//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE); // endless data acquiry enable, request 1st byte again
			byteNumber = 0;							// overwrite data the next time
    1156:	10 92 4e 01 	sts	0x014E, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    115a:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON)			// write i2cData into global array
			{
				i2cData[0]=(0x3F & (i2cDataTemp[0]/4))|((uint8_t)(i2cDataTemp[1]*64));	// store data in right format
    115c:	90 91 4d 01 	lds	r25, 0x014D
    1160:	29 2f       	mov	r18, r25
    1162:	22 95       	swap	r18
    1164:	22 0f       	add	r18, r18
    1166:	22 0f       	add	r18, r18
    1168:	20 7c       	andi	r18, 0xC0	; 192
    116a:	80 91 4c 01 	lds	r24, 0x014C
    116e:	86 95       	lsr	r24
    1170:	86 95       	lsr	r24
    1172:	82 2b       	or	r24, r18
    1174:	80 93 4f 01 	sts	0x014F, r24
				i2cData[1]=i2cDataTemp[1]/4;
    1178:	96 95       	lsr	r25
    117a:	96 95       	lsr	r25
    117c:	90 93 50 01 	sts	0x0150, r25
				i2cConversionDone = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 00 01 	sts	0x0100, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1186:	78 94       	sei
		else	// after transmission of 1st data byte
		{
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE); // start TWI module for 2nd byte and NACK data after reception (signals end of reception)
		}
	}
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv>:
    return StackBase::registerRead(Phy::REG_TEMP);
}

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::configure()
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
    DORD   = 1'b0   - MSB first
    MSTR   = 1'b1   - Master
    CPOL   = 1'b1   - clock idles high
    CPHA   = 1'b1   - sample on trailing edge
    SPR    = 2'b00  - fosc/2 */
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(CPHA);
    11a2:	8c e5       	ldi	r24, 0x5C	; 92
    11a4:	8c bd       	out	0x2c, r24	; 44

    /* and the SPI2X bit to speed it up */
    SPSR = _BV(SPI2X);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	8d bd       	out	0x2d, r24	; 45

    /* Data direction in the SPI bits, PB2/SS, PB5/SCK
    and PB3/MOSI are outputs.  Drive SS high in advance */
    PORTB |= _BV(PORTB2) | _BV(PORTB5);
    11aa:	85 b1       	in	r24, 0x05	; 5
    11ac:	84 62       	ori	r24, 0x24	; 36
    11ae:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(_BV(PORTB3)); 
    11b0:	2b 98       	cbi	0x05, 3	; 5
    DDRB  |= _BV(DDB5) | _BV(DDB3) | _BV(DDB2);
    11b2:	84 b1       	in	r24, 0x04	; 4
    11b4:	8c 62       	ori	r24, 0x2C	; 44
    11b6:	84 b9       	out	0x04, r24	; 4
    DDRB  &= ~(_BV(DDB4));
    11b8:	24 98       	cbi	0x04, 4	; 4
        HIBYTE(StackT::DEVICE_ID),                      // PAGE_DEVICE_ID_2
        LOBYTE(StackT::DEVICE_ID)                       // PAGE_DEVICE_ID_3
    };

    // copy the default parameters from flash to RAM
    (void)memcpy_P(directParameter, directDefaultConfig, sizeof(directDefaultConfig));
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	60 eb       	ldi	r22, 0xB0	; 176
    11c0:	71 e0       	ldi	r23, 0x01	; 1
    11c2:	88 e2       	ldi	r24, 0x28	; 40
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	9d d0       	rcall	.+314    	; 0x1302 <memcpy_P>
    11c8:	18 82       	st	Y, r1

    // stack initial state is STACK_MODE_SIO operation
    _ddlMode = IoLink::DDL_MODE_IDLE;
    11ca:	1a 82       	std	Y+2, r1	; 0x02

    // set up the process data buffers and default process data
    _processDataIn.isValid = false;
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    _processDataOut.isValid = false;
    11ce:	80 91 68 00 	lds	r24, 0x0068
{
    // Configure and enable interrupt
    // 
    // Only pin change interrupts are available, so the routine must check
    // the level before returning
    PCICR  |= _BV(PCIE1);
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	80 93 68 00 	sts	0x0068, r24
    11d8:	80 91 6c 00 	lds	r24, 0x006C
    PCMSK1 |= _BV(PCINT8);
    11dc:	81 60       	ori	r24, 0x01	; 1
    11de:	80 93 6c 00 	sts	0x006C, r24
    11e2:	78 dd       	rcall	.-1296   	; 0xcd4 <__vector_4>

    // call ISR handler
    PCINT1_vect();
    11e4:	1d 82       	std	Y+5, r1	; 0x05
    11e6:	15 bc       	out	0x25, r1	; 37
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
    11e8:	16 bc       	out	0x26, r1	; 38

    // disable timer
    TCCR0B = 0;
    11ea:	85 b3       	in	r24, 0x15	; 21
    TCNT0 = 0;
    11ec:	87 60       	ori	r24, 0x07	; 7

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
    11ee:	85 bb       	out	0x15, r24	; 21
    11f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	49 f5       	brne	.+82     	; 0x124a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xae>
    11f8:	28 81       	ld	r18, Y
    11fa:	24 30       	cpi	r18, 0x04	; 4
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    11fc:	21 f4       	brne	.+8      	; 0x1206 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x6a>
    11fe:	20 91 29 01 	lds	r18, 0x0129
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    1202:	21 11       	cpse	r18, r1
    1204:	02 c0       	rjmp	.+4      	; 0x120a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x6e>
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
    1206:	20 91 2a 01 	lds	r18, 0x012A
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    120a:	24 30       	cpi	r18, 0x04	; 4
    120c:	e0 f0       	brcs	.+56     	; 0x1246 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
    120e:	20 34       	cpi	r18, 0x40	; 64
    1210:	18 f4       	brcc	.+6      	; 0x1218 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x7c>
    1212:	82 2f       	mov	r24, r18
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	17 c0       	rjmp	.+46     	; 0x1246 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    1218:	32 2f       	mov	r19, r18
    121a:	30 7c       	andi	r19, 0xC0	; 192
    121c:	30 34       	cpi	r19, 0x40	; 64
    121e:	49 f4       	brne	.+18     	; 0x1232 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x96>
    1220:	84 e0       	ldi	r24, 0x04	; 4
    1222:	28 9f       	mul	r18, r24
    1224:	90 01       	movw	r18, r0
    1226:	11 24       	eor	r1, r1
    1228:	33 27       	eor	r19, r19
    122a:	c9 01       	movw	r24, r18
    122c:	80 5c       	subi	r24, 0xC0	; 192
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	0a c0       	rjmp	.+20     	; 0x1246 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    1232:	30 38       	cpi	r19, 0x80	; 128
    1234:	41 f4       	brne	.+16     	; 0x1246 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    1236:	2f 73       	andi	r18, 0x3F	; 63
    1238:	80 e1       	ldi	r24, 0x10	; 16
    123a:	28 9f       	mul	r18, r24
    123c:	90 01       	movw	r18, r0
    123e:	11 24       	eor	r1, r1
    1240:	c9 01       	movw	r24, r18
    1242:	80 5c       	subi	r24, 0xC0	; 192
    1244:	9e 4f       	sbci	r25, 0xFE	; 254
    1246:	9b 87       	std	Y+11, r25	; 0x0b
    1248:	8a 87       	std	Y+10, r24	; 0x0a
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
    124e:	9d 87       	std	Y+13, r25	; 0x0d
    1250:	8c 87       	std	Y+12, r24	; 0x0c
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	80 93 6e 00 	sts	0x006E, r24

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	84 bd       	out	0x24, r24	; 36

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
    125c:	94 e6       	ldi	r25, 0x64	; 100
    125e:	97 bd       	out	0x27, r25	; 39

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
    1260:	98 bd       	out	0x28, r25	; 40
    1262:	85 bd       	out	0x25, r24	; 37
    1264:	df 91       	pop	r29
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
    1266:	cf 91       	pop	r28
    configureStackBase();
    Phy::configure();

    // start timer responsible for calling the application "main loop"
    startCallbackTimer();
};
    1268:	08 95       	ret

0000126a <main>:
    126a:	2f ef       	ldi	r18, 0xFF	; 255
    126c:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	21 50       	subi	r18, 0x01	; 1
    1272:	80 40       	sbci	r24, 0x00	; 0
    1274:	90 40       	sbci	r25, 0x00	; 0
    1276:	e1 f7       	brne	.-8      	; 0x1270 <main+0x6>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <main+0x10>
    127a:	00 00       	nop
public:
    //! setup the HW configuration
    static void configure()
    {
        // Port PD4 and PD5 as output
        DDRD  |= _BV(DDD4) | _BV(DDD5);
    127c:	8a b1       	in	r24, 0x0a	; 10
    127e:	80 63       	ori	r24, 0x30	; 48
    1280:	8a b9       	out	0x0a, r24	; 10
        {
            PORTD |= _BV(PORTD4);
        }
        else
        {
            PORTD &= ~(_BV(PORTD4));
    1282:	5c 98       	cbi	0x0b, 4	; 11
    // instantiate DemoApp
    DemoApp& theApp = DemoApp::instance;

    // configure all software modules
    DebugPin::configure();
    DemoApp::configure();   
    1284:	e0 dd       	rcall	.-1088   	; 0xe46 <_ZN7DemoApp9configureEv>
    1286:	83 e0       	ldi	r24, 0x03	; 3
    Stack::instance.configure();
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	88 df       	rcall	.-240    	; 0x119c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv>
    128c:	08 df       	rcall	.-496    	; 0x109e <i2c_init>
    128e:	10 92 4f 01 	sts	0x014F, r1

	i2c_init();	// setup TWI
    1292:	78 94       	sei
	i2cData[0]=0;
    1294:	83 b7       	in	r24, 0x33	; 51
    1296:	81 7f       	andi	r24, 0xF1	; 241
    // enable interrupts
    sei();
    1298:	83 bf       	out	0x33, r24	; 51
	

    // select sleep mode
    set_sleep_mode(SLEEP_MODE_IDLE);
    129a:	83 b7       	in	r24, 0x33	; 51
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	83 bf       	out	0x33, r24	; 51

    // enter infinite loop: processing is interrupt controlled from now on
    for (;;)
    {
        // enter sleep until interrupt wakes us up
        sleep_mode();
    12a0:	88 95       	sleep
    12a2:	83 b7       	in	r24, 0x33	; 51
    12a4:	8e 7f       	andi	r24, 0xFE	; 254
    12a6:	83 bf       	out	0x33, r24	; 51
    12a8:	80 91 14 01 	lds	r24, 0x0114
    12ac:	80 ff       	sbrs	r24, 0
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
bool StackBase<T, PDI, PDO, SpiSsHndlr>::canRunUserCode(const Parameter*& lastWrittenParameter)
{
    // allow execution of user code?
    if (!_runUserCode)
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <main+0x7c>
    12b0:	8e 7f       	andi	r24, 0xFE	; 254
    12b2:	80 93 14 01 	sts	0x0114, r24
        return false;

    // reset flag
    _runUserCode = false;
    12b6:	81 ff       	sbrs	r24, 1
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <main+0x5c>
    12ba:	8d 7f       	andi	r24, 0xFD	; 253

    // test for parameter write access
    if (_prmWriteAvailable)
    12bc:	80 93 14 01 	sts	0x0114, r24
    {
        lastWrittenParameter = &_parameterWrite;

        // reset write access
        _prmWriteAvailable = false;
    12c0:	6b e0       	ldi	r22, 0x0B	; 11
    12c2:	71 e0       	ldi	r23, 0x01	; 1
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <main+0x60>
    _runUserCode = false;

    // test for parameter write access
    if (_prmWriteAvailable)
    {
        lastWrittenParameter = &_parameterWrite;
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 91 6c 00 	lds	r24, 0x006C
        // reset write access
        _prmWriteAvailable = false;
    }
    else
    {
        lastWrittenParameter = NULL;
    12ce:	8e 7f       	andi	r24, 0xFE	; 254

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::stopInterrupt()
{
    PCMSK1 &= ~(_BV(PCINT8));
    12d0:	80 93 6c 00 	sts	0x006C, r24
    12d4:	88 e4       	ldi	r24, 0x48	; 72
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	af de       	rcall	.-674    	; 0x1038 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>
        // check if it's time to run user code
        const Stack::Parameter* paramWrite;
        if (Stack::instance.canRunUserCode(paramWrite))
        {
            Stack::instance.stopInterrupt();
            theApp.run(paramWrite);
    12da:	80 91 6c 00 	lds	r24, 0x006C
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	80 93 6c 00 	sts	0x006C, r24

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::restartInterrupt()
{
    PCMSK1 |= _BV(PCINT8);
    12e4:	f7 dc       	rcall	.-1554   	; 0xcd4 <__vector_4>
    12e6:	80 91 00 01 	lds	r24, 0x0100
    12ea:	81 30       	cpi	r24, 0x01	; 1

    // call ISR handler
    PCINT1_vect();
    12ec:	b1 f6       	brne	.-84     	; 0x129a <main+0x30>
    12ee:	f2 de       	rcall	.-540    	; 0x10d4 <i2c_start>
            Stack::instance.restartInterrupt();
        }
		if(i2cConversionDone == 1)
    12f0:	10 92 00 01 	sts	0x0100, r1
    12f4:	d2 cf       	rjmp	.-92     	; 0x129a <main+0x30>

000012f6 <__tablejump2__>:
    12f6:	ee 0f       	add	r30, r30
		{
			i2c_start();
    12f8:	ff 1f       	adc	r31, r31
    12fa:	05 90       	lpm	r0, Z+
			i2cConversionDone=0;
    12fc:	f4 91       	lpm	r31, Z
    12fe:	e0 2d       	mov	r30, r0
    1300:	09 94       	ijmp

00001302 <memcpy_P>:
    1302:	fb 01       	movw	r30, r22
    1304:	dc 01       	movw	r26, r24
    1306:	02 c0       	rjmp	.+4      	; 0x130c <memcpy_P+0xa>
    1308:	05 90       	lpm	r0, Z+
    130a:	0d 92       	st	X+, r0
    130c:	41 50       	subi	r20, 0x01	; 1
    130e:	50 40       	sbci	r21, 0x00	; 0
    1310:	d8 f7       	brcc	.-10     	; 0x1308 <memcpy_P+0x6>
    1312:	08 95       	ret

00001314 <_exit>:
    1314:	f8 94       	cli

00001316 <__stop_program>:
    1316:	ff cf       	rjmp	.-2      	; 0x1316 <__stop_program>
