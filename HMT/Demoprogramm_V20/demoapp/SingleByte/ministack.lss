
ministack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800100  00800100  00001296  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .signature    00000003  00840000  00840000  00001299  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00007f07  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001387  00000000  00000000  00009303  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000e75  00000000  00000000  0000a68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000258  00000000  00000000  0000b500  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002b07  00000000  00000000  0000b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001ec2  00000000  00000000  0000e25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000180  00000000  00000000  00010121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e8 c0       	rjmp	.+464    	; 0x1d2 <__ctors_end>
       2:	00 00       	nop
       4:	00 c1       	rjmp	.+512    	; 0x206 <__bad_interrupt>
       6:	00 00       	nop
       8:	fe c0       	rjmp	.+508    	; 0x206 <__bad_interrupt>
       a:	00 00       	nop
       c:	fc c0       	rjmp	.+504    	; 0x206 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c6       	rjmp	.+3238   	; 0xcb8 <__vector_4>
      12:	00 00       	nop
      14:	f8 c0       	rjmp	.+496    	; 0x206 <__bad_interrupt>
      16:	00 00       	nop
      18:	f6 c0       	rjmp	.+492    	; 0x206 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f4 c0       	rjmp	.+488    	; 0x206 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f2 c0       	rjmp	.+484    	; 0x206 <__bad_interrupt>
      22:	00 00       	nop
      24:	f0 c0       	rjmp	.+480    	; 0x206 <__bad_interrupt>
      26:	00 00       	nop
      28:	ee c0       	rjmp	.+476    	; 0x206 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ec c0       	rjmp	.+472    	; 0x206 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ea c0       	rjmp	.+468    	; 0x206 <__bad_interrupt>
      32:	00 00       	nop
      34:	e8 c0       	rjmp	.+464    	; 0x206 <__bad_interrupt>
      36:	00 00       	nop
      38:	e6 c0       	rjmp	.+460    	; 0x206 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c1       	rjmp	.+832    	; 0x37e <__vector_15>
      3e:	00 00       	nop
      40:	e2 c0       	rjmp	.+452    	; 0x206 <__bad_interrupt>
      42:	00 00       	nop
      44:	e0 c0       	rjmp	.+448    	; 0x206 <__bad_interrupt>
      46:	00 00       	nop
      48:	de c0       	rjmp	.+444    	; 0x206 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dc c0       	rjmp	.+440    	; 0x206 <__bad_interrupt>
      4e:	00 00       	nop
      50:	da c0       	rjmp	.+436    	; 0x206 <__bad_interrupt>
      52:	00 00       	nop
      54:	d8 c0       	rjmp	.+432    	; 0x206 <__bad_interrupt>
      56:	00 00       	nop
      58:	d6 c0       	rjmp	.+428    	; 0x206 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d4 c0       	rjmp	.+424    	; 0x206 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d2 c0       	rjmp	.+420    	; 0x206 <__bad_interrupt>
      62:	00 00       	nop
      64:	d0 c0       	rjmp	.+416    	; 0x206 <__bad_interrupt>
      66:	00 00       	nop
      68:	d4 03       	fmuls	r21, r20
      6a:	ea 02       	muls	r30, r26
      6c:	ea 02       	muls	r30, r26
      6e:	91 02       	muls	r25, r17
      70:	a1 02       	muls	r26, r17
      72:	f0 02       	muls	r31, r16
      74:	1a 03       	fmul	r17, r18
      76:	5f 03       	fmul	r21, r23
      78:	86 03       	fmuls	r16, r22
      7a:	86 03       	fmuls	r16, r22
      7c:	ae 03       	fmulsu	r18, r22
      7e:	be 03       	fmulsu	r19, r22
      80:	fc 04       	cpc	r15, r12
      82:	07 04       	cpc	r0, r7
      84:	07 04       	cpc	r0, r7
      86:	e9 03       	fmulsu	r22, r17
      88:	09 04       	cpc	r0, r9
      8a:	45 04       	cpc	r4, r5
      8c:	6f 04       	cpc	r6, r15
      8e:	b4 04       	cpc	r11, r4
      90:	d6 04       	cpc	r13, r6
      92:	d6 04       	cpc	r13, r6
      94:	d6 04       	cpc	r13, r6
      96:	e6 04       	cpc	r14, r6
      98:	26 06       	cpc	r2, r22
      9a:	2f 05       	cpc	r18, r15
      9c:	2f 05       	cpc	r18, r15
      9e:	11 05       	cpc	r17, r1
      a0:	31 05       	cpc	r19, r1
      a2:	6d 05       	cpc	r22, r13
      a4:	97 05       	cpc	r25, r7
      a6:	dc 05       	cpc	r29, r12
      a8:	fe 05       	cpc	r31, r14
      aa:	fe 05       	cpc	r31, r14
      ac:	fe 05       	cpc	r31, r14
      ae:	0e 06       	cpc	r0, r30

000000b0 <__trampolines_end>:
      b0:	2d 3c       	cpi	r18, 0xCD	; 205
      b2:	0c 1d       	adc	r16, r12
      b4:	3f 2e       	mov	r3, r31
      b6:	1e 0f       	add	r17, r30
      b8:	0f 1e       	adc	r0, r31
      ba:	2e 3f       	cpi	r18, 0xFE	; 254
      bc:	1d 0c       	add	r1, r13
      be:	3c 2d       	mov	r19, r12
      c0:	39 28       	or	r3, r9
      c2:	18 09       	sbc	r17, r8
      c4:	2b 3a       	cpi	r18, 0xAB	; 171
      c6:	0a 1b       	sub	r16, r26
      c8:	1b 0a       	sbc	r1, r27
      ca:	3a 2b       	or	r19, r26
      cc:	09 18       	sub	r0, r9
      ce:	28 39       	cpi	r18, 0x98	; 152
      d0:	09 18       	sub	r0, r9
      d2:	28 39       	cpi	r18, 0x98	; 152
      d4:	1b 0a       	sbc	r1, r27
      d6:	3a 2b       	or	r19, r26
      d8:	2b 3a       	cpi	r18, 0xAB	; 171
      da:	0a 1b       	sub	r16, r26
      dc:	39 28       	or	r3, r9
      de:	18 09       	sbc	r17, r8
      e0:	1d 0c       	add	r1, r13
      e2:	3c 2d       	mov	r19, r12
      e4:	0f 1e       	adc	r0, r31
      e6:	2e 3f       	cpi	r18, 0xFE	; 254
      e8:	3f 2e       	mov	r3, r31
      ea:	1e 0f       	add	r17, r30
      ec:	2d 3c       	cpi	r18, 0xCD	; 205
      ee:	0c 1d       	adc	r16, r12
      f0:	35 24       	eor	r3, r5
      f2:	14 05       	cpc	r17, r4
      f4:	27 36       	cpi	r18, 0x67	; 103
      f6:	06 17       	cp	r16, r22
      f8:	17 06       	cpc	r1, r23
      fa:	36 27       	eor	r19, r22
      fc:	05 14       	cp	r0, r5
      fe:	24 35       	cpi	r18, 0x54	; 84
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	00 11       	cpse	r16, r0
     104:	33 22       	and	r3, r19
     106:	12 03       	mulsu	r17, r18
     108:	03 12       	cpse	r0, r19
     10a:	22 33       	cpi	r18, 0x32	; 50
     10c:	11 00       	.word	0x0011	; ????
     10e:	30 21       	and	r19, r0
     110:	11 00       	.word	0x0011	; ????
     112:	30 21       	and	r19, r0
     114:	03 12       	cpse	r0, r19
     116:	22 33       	cpi	r18, 0x32	; 50
     118:	33 22       	and	r3, r19
     11a:	12 03       	mulsu	r17, r18
     11c:	21 30       	cpi	r18, 0x01	; 1
     11e:	00 11       	cpse	r16, r0
     120:	05 14       	cp	r0, r5
     122:	24 35       	cpi	r18, 0x54	; 84
     124:	17 06       	cpc	r1, r23
     126:	36 27       	eor	r19, r22
     128:	27 36       	cpi	r18, 0x67	; 103
     12a:	06 17       	cp	r16, r22
     12c:	35 24       	eor	r3, r5
     12e:	14 05       	cpc	r17, r4
	...

000001b0 <_ZZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18configureStackBaseEvE19directDefaultConfig>:
     1b0:	00 00 14 00 11 48 08 01 a6 12 34 56 00 00 00 00     .....H....4V....
	...

000001d0 <__ctors_start>:
     1d0:	f9 06       	cpc	r15, r25

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d8 e0       	ldi	r29, 0x08	; 8
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_clear_bss>:
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	aa 34       	cpi	r26, 0x4A	; 74
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>

000001ee <__do_global_ctors>:
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c9 ee       	ldi	r28, 0xE9	; 233
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	03 c0       	rjmp	.+6      	; 0x1fc <__do_global_ctors+0xe>
     1f6:	21 97       	sbiw	r28, 0x01	; 1
     1f8:	fe 01       	movw	r30, r28
     1fa:	e2 d7       	rcall	.+4036   	; 0x11c0 <__tablejump2__>
     1fc:	c8 3e       	cpi	r28, 0xE8	; 232
     1fe:	d1 07       	cpc	r29, r17
     200:	d1 f7       	brne	.-12     	; 0x1f6 <__do_global_ctors+0x8>
     202:	a2 d7       	rcall	.+3908   	; 0x1148 <main>
     204:	ec c7       	rjmp	.+4056   	; 0x11de <_exit>

00000206 <__bad_interrupt>:
     206:	fc ce       	rjmp	.-520    	; 0x0 <__vectors>

00000208 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>:
template <class T, int PDI, int PDO, class SpiSsHndlr>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::odRead(uint8_t channel, uint8_t address)
{
    uint8_t data;

    switch (channel)
     208:	80 32       	cpi	r24, 0x20	; 32
     20a:	19 f0       	breq	.+6      	; 0x212 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0xa>
     20c:	80 34       	cpi	r24, 0x40	; 64
     20e:	31 f0       	breq	.+12     	; 0x21c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x14>
     210:	0d c0       	rjmp	.+26     	; 0x22c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x24>
    {
    case IoLink::MC_CHNL_PAGE:  // Direct parameter page channel
        data = directParameter[address];
     212:	e6 2f       	mov	r30, r22
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	ea 5d       	subi	r30, 0xDA	; 218
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	06 c0       	rjmp	.+12     	; 0x228 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x20>
        break;

    case IoLink::MC_CHNL_DIAG:  // Diagnosis channel
        if (address > 6)
     21c:	67 30       	cpi	r22, 0x07	; 7
     21e:	38 f4       	brcc	.+14     	; 0x22e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x26>
            break;

        data = eventPage[address];
     220:	e6 2f       	mov	r30, r22
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	e2 5e       	subi	r30, 0xE2	; 226
     226:	fe 4f       	sbci	r31, 0xFE	; 254
     228:	90 81       	ld	r25, Z
     22a:	01 c0       	rjmp	.+2      	; 0x22e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2+0x26>
        break;

    default:            // SPDU and process data not handled
//        ASSERT(address == IoLink::MC_ADDR_ISDU_IDLE1 || address == IoLink::MC_ADDR_ISDU_IDLE2);
        data = 0;
     22c:	90 e0       	ldi	r25, 0x00	; 0
    }

    return data;
}
     22e:	89 2f       	mov	r24, r25
     230:	08 95       	ret

00000232 <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7>:
     * Restarts a stopped timer
     * 
     */
    void inline restartTimer()
    {
        if (TCCR0B == 0)
     232:	85 b5       	in	r24, 0x25	; 37
     234:	81 11       	cpse	r24, r1
     236:	03 c0       	rjmp	.+6      	; 0x23e <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7+0xc>
           TCCR0B = _tccr0bRecord;          
     238:	80 91 1c 01 	lds	r24, 0x011C
     23c:	85 bd       	out	0x25, r24	; 37
     23e:	08 95       	ret

00000240 <_ZN6IoLink17calculateChecksumEhh>:
            0x11, 0x00, 0x30, 0x21, 0x03, 0x12, 0x22, 0x33, 0x33, 0x22, 0x12, 0x03, 0x21, 0x30, 0x00, 0x11,
            0x05, 0x14, 0x24, 0x35, 0x17, 0x06, 0x36, 0x27, 0x27, 0x36, 0x06, 0x17, 0x35, 0x24, 0x14, 0x05
        };

        // include CKT octet with Checksum bits (0..6) set to "0" (see A.1.6)
        ckt &= CKT_TYPE_MASK;
     240:	60 7c       	andi	r22, 0xC0	; 192
        checksum8 ^= ckt;
     242:	86 27       	eor	r24, r22

        // fold checksum8 at 0x80
        if (checksum8 >= 0x80)
     244:	87 fd       	sbrc	r24, 7
        {
            checksum8 = ~checksum8;
     246:	80 95       	com	r24
            checksum8 = ((checksum8 >> 1) & 0xf8) | (checksum8 & 0x07);
        }
#endif

        // calculate result checksum and combine with type bits (7..8) in original CKT
        ckt |=  pgm_read_byte(&checksum6[checksum8]);
     248:	e8 2f       	mov	r30, r24
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	e0 55       	subi	r30, 0x50	; 80
     24e:	ff 4f       	sbci	r31, 0xFF	; 255
     250:	84 91       	lpm	r24, Z

        return ckt;
    }
     252:	86 2b       	or	r24, r22
     254:	08 95       	ret

00000256 <_ZN15StackSingleByte25handleFirstOperatingModesEv>:
uint8_t   eventPage[8];          //!< event buffer

StackSingleByte StackSingleByte::instance;
//------------------------------------------------------------------------------
StackSingleByte::HandlerResult StackSingleByte::handleFirstOperatingModes()
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	fc 01       	movw	r30, r24
    // 
    uint8_t status;

    //  state machine
    switch (_frameState)
     25e:	82 89       	ldd	r24, Z+18	; 0x12
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	39 f0       	breq	.+14     	; 0x272 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x1c>
     264:	08 f4       	brcc	.+2      	; 0x268 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x12>
     266:	81 c0       	rjmp	.+258    	; 0x36a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x114>
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	09 f4       	brne	.+2      	; 0x26e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x18>
     26c:	47 c0       	rjmp	.+142    	; 0x2fc <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xa6>
            }
        }
        break;
        
    default:
        return ResultIllegalMessageType;
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	82 c0       	rjmp	.+260    	; 0x376 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     272:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     274:	80 e1       	ldi	r24, 0x10	; 16
     276:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     278:	0d b4       	in	r0, 0x2d	; 45
     27a:	07 fe       	sbrs	r0, 7
     27c:	fd cf       	rjmp	.-6      	; 0x278 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x22>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     27e:	ce b5       	in	r28, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     280:	ce bd       	out	0x2e, r28	; 46
        
    case FRAME_RCV_MC:      // expecting MC octet
        {
            // request MC octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     282:	8c 2f       	mov	r24, r28
     284:	8c 70       	andi	r24, 0x0C	; 12
     286:	84 30       	cpi	r24, 0x04	; 4
     288:	11 f0       	breq	.+4      	; 0x28e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
                return ResultChecksumError;
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	74 c0       	rjmp	.+232    	; 0x376 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     28e:	0d b4       	in	r0, 0x2d	; 45
     290:	07 fe       	sbrs	r0, 7
     292:	fd cf       	rjmp	.-6      	; 0x28e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     294:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     296:	2a 9a       	sbi	0x05, 2	; 5

            // get master sequence control (MC) octet
            _mc = registerReadLast();
     298:	84 8b       	std	Z+20, r24	; 0x14

            // ensure that we are in IoLinkListen from here on
            if (_ddlMode < IoLink::DDL_MODE_STARTUP)
     29a:	80 81       	ld	r24, Z
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	68 f4       	brcc	.+26     	; 0x2ba <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x64>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2a0:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2a2:	82 e8       	ldi	r24, 0x82	; 130
     2a4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2a6:	0d b4       	in	r0, 0x2d	; 45
     2a8:	07 fe       	sbrs	r0, 7
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x50>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2ac:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2b2:	0d b4       	in	r0, 0x2d	; 45
     2b4:	07 fe       	sbrs	r0, 7
     2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x5c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2b8:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2ba:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2bc:	83 e8       	ldi	r24, 0x83	; 131
     2be:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2c0:	0d b4       	in	r0, 0x2d	; 45
     2c2:	07 fe       	sbrs	r0, 7
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x6a>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2c6:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2cc:	0d b4       	in	r0, 0x2d	; 45
     2ce:	07 fe       	sbrs	r0, 7
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x76>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2d2:	2a 9a       	sbi	0x05, 2	; 5
            // signal ready to receive next byte
            registerWrite(REG_LINK, LINK_END);

            // precalculate the checksum, assuming no returned PD or OD frames
            _cks = IoLink::calculateChecksum(0, (_processDataIn.isValid ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     2d4:	82 81       	ldd	r24, Z+2	; 0x02
     2d6:	81 11       	cpse	r24, r1
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x88>
     2da:	60 e4       	ldi	r22, 0x40	; 64
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x8a>
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	8f 01       	movw	r16, r30
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	ad df       	rcall	.-166    	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     2e6:	f8 01       	movw	r30, r16
     2e8:	86 8b       	std	Z+22, r24	; 0x16
     2ea:	85 b5       	in	r24, 0x25	; 37

            // disable the cycle timer (Timer0): it will be restarted after this frame...
            _tccr0bRecord = TCCR0B;
     2ec:	83 8f       	std	Z+27, r24	; 0x1b
     2ee:	15 bc       	out	0x25, r1	; 37
            TCCR0B = 0;
     2f0:	85 b3       	in	r24, 0x15	; 21

            // ...and clear any outstanding timer interrupt requests
            TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     2f2:	87 60       	ori	r24, 0x07	; 7
     2f4:	85 bb       	out	0x15, r24	; 21
     2f6:	82 e0       	ldi	r24, 0x02	; 2

            // enter next state
            _frameState = FRAME_RCV_CKT;
     2f8:	82 8b       	std	Z+18, r24	; 0x12
     2fa:	2f c0       	rjmp	.+94     	; 0x35a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x104>
        }
        break;
     2fc:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2fe:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     300:	8e bd       	out	0x2e, r24	; 46
     302:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     304:	07 fe       	sbrs	r0, 7
     306:	fd cf       	rjmp	.-6      	; 0x302 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xac>
     308:	ce b5       	in	r28, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     30a:	ce bd       	out	0x2e, r28	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     30c:	8c 2f       	mov	r24, r28

    case FRAME_RCV_CKT: // expecting CKT octet in read access
        {
            // request CKT octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     30e:	8c 70       	andi	r24, 0x0C	; 12
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	09 f0       	breq	.+2      	; 0x316 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     314:	ba cf       	rjmp	.-140    	; 0x28a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x34>
     316:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     318:	07 fe       	sbrs	r0, 7
     31a:	fd cf       	rjmp	.-6      	; 0x316 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     31c:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     31e:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     320:	85 8b       	std	Z+21, r24	; 0x15
                return ResultChecksumError;

            // get CKT octet
            _ckt = registerReadLast();
     322:	94 89       	ldd	r25, Z+20	; 0x14

            // prepare checksum-8
            _checksum8 = _mc;
     324:	97 8b       	std	Z+23, r25	; 0x17
     326:	12 8e       	std	Z+26, r1	; 0x1a
            _i = 0;
     328:	93 e0       	ldi	r25, 0x03	; 3

            // indicate continuation required
            _frameState     = FRAME_RCV_CKT_CONT;
     32a:	92 8b       	std	Z+18, r25	; 0x12
     32c:	91 e0       	ldi	r25, 0x01	; 1
            _frameTypeOk    = true;
     32e:	94 8f       	std	Z+28, r25	; 0x1c
     330:	90 81       	ld	r25, Z
            _receiveDdlMode = _ddlMode; 
     332:	93 8b       	std	Z+19, r25	; 0x13
     334:	80 7c       	andi	r24, 0xC0	; 192
     336:	93 30       	cpi	r25, 0x03	; 3
            
            switch (_ddlMode)
     338:	29 f0       	breq	.+10     	; 0x344 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     33a:	94 30       	cpi	r25, 0x04	; 4
     33c:	19 f4       	brne	.+6      	; 0x344 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     33e:	80 38       	cpi	r24, 0x80	; 128
                if (frameType == IoLink::CKT_TYPE_2)
                    return true;                                   // TYPE_2_1-2_5
            }
            else if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE + PD_IN_SIZE <= 4))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     340:	19 f4       	brne	.+6      	; 0x348 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xf2>
     342:	15 c0       	rjmp	.+42     	; 0x36e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     344:	88 23       	and	r24, r24
    switch (DDL_MODE)
    {
        // see table A.7
    case IoLink::DDL_MODE_IDLE:
    case IoLink::DDL_MODE_STARTUP:
        if (frameType == IoLink::CKT_TYPE_0) 
     346:	99 f0       	breq	.+38     	; 0x36e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     348:	14 8e       	std	Z+28, r1	; 0x1c
                 if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
                    return ResultSuccess;
                break;
            }
            
            _frameTypeOk    = false;
     34a:	81 11       	cpse	r24, r1
     34c:	02 c0       	rjmp	.+4      	; 0x352 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xfc>
     34e:	82 e0       	ldi	r24, 0x02	; 2
            
            // look for a viable alternative
            if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_STARTUP;
     350:	03 c0       	rjmp	.+6      	; 0x358 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x102>
     352:	80 38       	cpi	r24, 0x80	; 128
                if (frameType == IoLink::CKT_TYPE_2)
                    return true;                                   // TYPE_2_1-2_5
            }
            else if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE + PD_IN_SIZE <= 4))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     354:	71 f4       	brne	.+28     	; 0x372 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x11c>
     356:	84 e0       	ldi	r24, 0x04	; 4
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else if (validateFrameType<IoLink::DDL_MODE_OPERATE>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
     358:	83 8b       	std	Z+19, r24	; 0x13
     35a:	8c 2f       	mov	r24, r28
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
     35c:	80 95       	com	r24
     35e:	88 1f       	adc	r24, r24
     360:	88 27       	eor	r24, r24
     362:	88 1f       	adc	r24, r24
     364:	88 0f       	add	r24, r24
     366:	88 0f       	add	r24, r24
     368:	06 c0       	rjmp	.+12     	; 0x376 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     36a:	84 e0       	ldi	r24, 0x04	; 4

    //  state machine
    switch (_frameState)
    {
    case FRAME_RESET:
        return ResultPhyReset;
     36c:	04 c0       	rjmp	.+8      	; 0x376 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     36e:	80 e0       	ldi	r24, 0x00	; 0
            
            switch (_ddlMode)
            {
            case IoLink::DDL_MODE_PREOPERATE:
                if (validateFrameType<IoLink::DDL_MODE_PREOPERATE>(_ckt))
                    return ResultSuccess;
     370:	02 c0       	rjmp	.+4      	; 0x376 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     372:	82 e0       	ldi	r24, 0x02	; 2
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else
            {
                _frameState     = FRAME_RCV_CKT;
     374:	82 8b       	std	Z+18, r24	; 0x12
     376:	cf 91       	pop	r28

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
}
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <__vector_15>:
     37e:	1f 92       	push	r1
    }
}

// Interrupt on Timer0 compare match B
ISR(TIMER0_COMPB_vect)
{
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::onTimer0CompBInterrupt()
{
    // decrement hiZ timer
    if (_hiZCounter >= 0 && --_hiZCounter < 0)
     390:	80 91 07 01 	lds	r24, 0x0107
     394:	87 fd       	sbrc	r24, 7
     396:	1d c0       	rjmp	.+58     	; 0x3d2 <__vector_15+0x54>
     398:	81 50       	subi	r24, 0x01	; 1
     39a:	80 93 07 01 	sts	0x0107, r24
     39e:	8f 3f       	cpi	r24, 0xFF	; 255
     3a0:	c1 f4       	brne	.+48     	; 0x3d2 <__vector_15+0x54>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3a2:	80 91 08 01 	lds	r24, 0x0108
     3a6:	80 fd       	sbrc	r24, 0
     3a8:	26 c0       	rjmp	.+76     	; 0x3f6 <__vector_15+0x78>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
     3ac:	9f ef       	ldi	r25, 0xFF	; 255
     3ae:	90 93 07 01 	sts	0x0107, r25
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	90 93 00 01 	sts	0x0100, r25
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
     3b8:	8c 60       	ori	r24, 0x0C	; 12
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     3ba:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3bc:	92 e8       	ldi	r25, 0x82	; 130
     3be:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3c0:	0d b4       	in	r0, 0x2d	; 45
     3c2:	07 fe       	sbrs	r0, 7
     3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <__vector_15+0x42>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     3c6:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3c8:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3ca:	0d b4       	in	r0, 0x2d	; 45
     3cc:	07 fe       	sbrs	r0, 7
     3ce:	fd cf       	rjmp	.-6      	; 0x3ca <__vector_15+0x4c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     3d0:	2a 9a       	sbi	0x05, 2	; 5
    {
        stack().setSioActive();
    }

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
     3d2:	20 91 0d 01 	lds	r18, 0x010D
     3d6:	30 91 0e 01 	lds	r19, 0x010E
     3da:	80 91 12 01 	lds	r24, 0x0112
     3de:	21 15       	cp	r18, r1
     3e0:	31 05       	cpc	r19, r1
     3e2:	59 f0       	breq	.+22     	; 0x3fa <__vector_15+0x7c>
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	31 09       	sbc	r19, r1
     3e8:	30 93 0e 01 	sts	0x010E, r19
     3ec:	20 93 0d 01 	sts	0x010D, r18
     3f0:	23 2b       	or	r18, r19
     3f2:	39 f0       	breq	.+14     	; 0x402 <__vector_15+0x84>
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <__vector_15+0x7c>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	d9 cf       	rjmp	.-78     	; 0x3ac <__vector_15+0x2e>
        }
    }
    else
    {
        // too late for user code
        _runUserCode = false;
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	80 93 12 01 	sts	0x0112, r24
     400:	33 c0       	rjmp	.+102    	; 0x468 <__vector_15+0xea>

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
    {
        // user code may run
        _runUserCode = true;
     402:	81 60       	ori	r24, 0x01	; 1
     404:	80 93 12 01 	sts	0x0112, r24

        // restart cycle timer
        _cycleTimer = _cyclePeriod;
     408:	80 91 0b 01 	lds	r24, 0x010B
     40c:	90 91 0c 01 	lds	r25, 0x010C
     410:	90 93 0e 01 	sts	0x010E, r25
     414:	80 93 0d 01 	sts	0x010D, r24

        // advance the count of dead cycles
        if (_deadCycleCtr != 0xff)
     418:	80 91 06 01 	lds	r24, 0x0106
     41c:	8f 3f       	cpi	r24, 0xFF	; 255
     41e:	19 f0       	breq	.+6      	; 0x426 <__vector_15+0xa8>
        {
            ++_deadCycleCtr;
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	80 93 06 01 	sts	0x0106, r24
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
     426:	80 91 11 01 	lds	r24, 0x0111
     42a:	88 23       	and	r24, r24
     42c:	29 f0       	breq	.+10     	; 0x438 <__vector_15+0xba>
     42e:	81 50       	subi	r24, 0x01	; 1
     430:	80 93 11 01 	sts	0x0111, r24
     434:	88 23       	and	r24, r24
     436:	a9 f0       	breq	.+42     	; 0x462 <__vector_15+0xe4>
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
        }

        // update LED register if necessary
        if (_savedLedRegister != _ledRegister)
     438:	80 91 10 01 	lds	r24, 0x0110
     43c:	90 91 0f 01 	lds	r25, 0x010F
     440:	98 17       	cp	r25, r24
     442:	91 f0       	breq	.+36     	; 0x468 <__vector_15+0xea>
        {
            _savedLedRegister = _ledRegister;
     444:	80 93 0f 01 	sts	0x010F, r24
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     448:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     44a:	96 e8       	ldi	r25, 0x86	; 134
     44c:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     44e:	0d b4       	in	r0, 0x2d	; 45
     450:	07 fe       	sbrs	r0, 7
     452:	fd cf       	rjmp	.-6      	; 0x44e <__vector_15+0xd0>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     454:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     456:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <__vector_15+0xda>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     45e:	2a 9a       	sbi	0x05, 2	; 5
     460:	03 c0       	rjmp	.+6      	; 0x468 <__vector_15+0xea>
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
     462:	10 92 01 01 	sts	0x0101, r1
     466:	e8 cf       	rjmp	.-48     	; 0x438 <__vector_15+0xba>
    StackSingleByte::instance.onTimer0CompBInterrupt();
}
     468:	9f 91       	pop	r25
     46a:	8f 91       	pop	r24
     46c:	3f 91       	pop	r19
     46e:	2f 91       	pop	r18
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>:
}


//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
     47a:	fc 01       	movw	r30, r24
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
     47c:	15 82       	std	Z+5, r1	; 0x05

    // disable timer
    TCCR0B = 0;
     47e:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
     480:	16 bc       	out	0x26, r1	; 38

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     482:	85 b3       	in	r24, 0x15	; 21
     484:	87 60       	ori	r24, 0x07	; 7
     486:	85 bb       	out	0x15, r24	; 21
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
     488:	82 85       	ldd	r24, Z+10	; 0x0a
     48a:	93 85       	ldd	r25, Z+11	; 0x0b
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	49 f5       	brne	.+82     	; 0x4e2 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x68>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     490:	20 81       	ld	r18, Z
     492:	24 30       	cpi	r18, 0x04	; 4
     494:	21 f4       	brne	.+8      	; 0x49e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x24>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     496:	20 91 27 01 	lds	r18, 0x0127
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     49a:	21 11       	cpse	r18, r1
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x28>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     49e:	20 91 28 01 	lds	r18, 0x0128
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     4a2:	24 30       	cpi	r18, 0x04	; 4
     4a4:	e0 f0       	brcs	.+56     	; 0x4de <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4a6:	20 34       	cpi	r18, 0x40	; 64
     4a8:	18 f4       	brcc	.+6      	; 0x4b0 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x36>
     4aa:	82 2f       	mov	r24, r18
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	17 c0       	rjmp	.+46     	; 0x4de <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4b0:	32 2f       	mov	r19, r18
     4b2:	30 7c       	andi	r19, 0xC0	; 192
     4b4:	30 34       	cpi	r19, 0x40	; 64
     4b6:	49 f4       	brne	.+18     	; 0x4ca <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x50>
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	28 9f       	mul	r18, r24
     4bc:	90 01       	movw	r18, r0
     4be:	11 24       	eor	r1, r1
     4c0:	33 27       	eor	r19, r19
     4c2:	c9 01       	movw	r24, r18
     4c4:	80 5c       	subi	r24, 0xC0	; 192
     4c6:	9f 4f       	sbci	r25, 0xFF	; 255
     4c8:	0a c0       	rjmp	.+20     	; 0x4de <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4ca:	30 38       	cpi	r19, 0x80	; 128
     4cc:	41 f4       	brne	.+16     	; 0x4de <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh+0x64>
     4ce:	2f 73       	andi	r18, 0x3F	; 63
     4d0:	80 e1       	ldi	r24, 0x10	; 16
     4d2:	28 9f       	mul	r18, r24
     4d4:	90 01       	movw	r18, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	c9 01       	movw	r24, r18
     4da:	80 5c       	subi	r24, 0xC0	; 192
     4dc:	9e 4f       	sbci	r25, 0xFE	; 254
     4de:	93 87       	std	Z+11, r25	; 0x0b
     4e0:	82 87       	std	Z+10, r24	; 0x0a
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	75 87       	std	Z+13, r23	; 0x0d
     4ea:	64 87       	std	Z+12, r22	; 0x0c

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
     4ec:	84 e0       	ldi	r24, 0x04	; 4
     4ee:	80 93 6e 00 	sts	0x006E, r24

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	84 bd       	out	0x24, r24	; 36

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
     4f6:	94 e6       	ldi	r25, 0x64	; 100
     4f8:	97 bd       	out	0x27, r25	; 39
     4fa:	98 bd       	out	0x28, r25	; 40
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
     4fc:	85 bd       	out	0x25, r24	; 37
     4fe:	08 95       	ret

00000500 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultSuccess;
}

//------------------------------------------------------------------------------
template <IoLink::DeviceDLMode DDL_MODE>
StackSingleByte::HandlerResult StackSingleByte::handleOperatingMode()
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     506:	dc 01       	movw	r26, r24
     508:	52 96       	adiw	r26, 0x12	; 18
     50a:	ec 91       	ld	r30, X
     50c:	4e 2f       	mov	r20, r30
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	4c 30       	cpi	r20, 0x0C	; 12
     512:	51 05       	cpc	r21, r1
     514:	08 f0       	brcs	.+2      	; 0x518 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x18>
     516:	5e c0       	rjmp	.+188    	; 0x5d4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd4>
     518:	ec 01       	movw	r28, r24
     51a:	fa 01       	movw	r30, r20
     51c:	ec 5c       	subi	r30, 0xCC	; 204
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	4f c6       	rjmp	.+3230   	; 0x11c0 <__tablejump2__>
     522:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     524:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     526:	8e bd       	out	0x2e, r24	; 46
     528:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     52a:	07 fe       	sbrs	r0, 7
     52c:	fd cf       	rjmp	.-6      	; 0x528 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x28>
     52e:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     530:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     532:	8e bd       	out	0x2e, r24	; 46
     534:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     536:	07 fe       	sbrs	r0, 7
     538:	fd cf       	rjmp	.-6      	; 0x534 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x34>
     53a:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     53c:	84 e0       	ldi	r24, 0x04	; 4
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
     53e:	8a 8b       	std	Y+18, r24	; 0x12
     540:	31 c1       	rjmp	.+610    	; 0x7a4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a4>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     542:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     544:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     546:	8e bd       	out	0x2e, r24	; 46
     548:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     54a:	07 fe       	sbrs	r0, 7
     54c:	fd cf       	rjmp	.-6      	; 0x548 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x48>
     54e:	1e b5       	in	r17, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     550:	1e bd       	out	0x2e, r17	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     552:	81 2f       	mov	r24, r17
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     554:	8c 70       	andi	r24, 0x0C	; 12
     556:	84 30       	cpi	r24, 0x04	; 4
     558:	11 f0       	breq	.+4      	; 0x55e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5e>
     55a:	82 e0       	ldi	r24, 0x02	; 2
                return ResultChecksumError;
     55c:	26 c1       	rjmp	.+588    	; 0x7aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
     55e:	ea 8d       	ldd	r30, Y+26	; 0x1a

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     564:	07 fe       	sbrs	r0, 7
     566:	fd cf       	rjmp	.-6      	; 0x562 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x62>
     568:	9e b5       	in	r25, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     56a:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     56c:	ec 0f       	add	r30, r28
     56e:	fd 1f       	adc	r31, r29
     570:	91 8f       	std	Z+25, r25	; 0x19
     572:	8f 89       	ldd	r24, Y+23	; 0x17
     574:	89 27       	eor	r24, r25
     576:	8f 8b       	std	Y+23, r24	; 0x17
     578:	9a 8d       	ldd	r25, Y+26	; 0x1a
            
            if (++_i < pdOutSize) // get next PD octet
     57a:	9f 5f       	subi	r25, 0xFF	; 255
     57c:	9a 8f       	std	Y+26, r25	; 0x1a
     57e:	91 11       	cpse	r25, r1
     580:	0d c0       	rjmp	.+26     	; 0x59c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x9c>
     582:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     584:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     586:	8e bd       	out	0x2e, r24	; 46
     588:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     58a:	07 fe       	sbrs	r0, 7
     58c:	fd cf       	rjmp	.-6      	; 0x588 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x88>
     58e:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     590:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     592:	8e bd       	out	0x2e, r24	; 46
     594:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x94>
     59a:	72 c0       	rjmp	.+228    	; 0x680 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x180>
     59c:	9c 89       	ldd	r25, Y+20	; 0x14
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     59e:	97 fd       	sbrc	r25, 7
     5a0:	11 c0       	rjmp	.+34     	; 0x5c4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc4>
     5a2:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5a4:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5a6:	8e bd       	out	0x2e, r24	; 46
     5a8:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa8>
     5ae:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5b2:	8e bd       	out	0x2e, r24	; 46
     5b4:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5b6:	07 fe       	sbrs	r0, 7
     5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb4>
     5ba:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     5bc:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     5be:	8a 8b       	std	Y+18, r24	; 0x12
     5c0:	1a 8e       	std	Y+26, r1	; 0x1a
                _i = 0;
     5c2:	ee c0       	rjmp	.+476    	; 0x7a0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
     5c4:	6d 89       	ldd	r22, Y+21	; 0x15
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     5c6:	3c de       	rcall	.-904    	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     5c8:	9d 89       	ldd	r25, Y+21	; 0x15
     5ca:	89 13       	cpse	r24, r25
     5cc:	c6 cf       	rjmp	.-116    	; 0x55a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     5ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5d0:	81 11       	cpse	r24, r1
                    return ResultChecksumError;

                if (!_frameTypeOk)
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd8>
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	e9 c0       	rjmp	.+466    	; 0x7aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
                    return ResultIllegalMessageType;                    
     5d8:	89 8d       	ldd	r24, Y+25	; 0x19
     5da:	8b 83       	std	Y+3, r24	; 0x03

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     5dc:	1a 8e       	std	Y+26, r1	; 0x1a
     5de:	6f c0       	rjmp	.+222    	; 0x6be <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1be>

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     5e0:	2a 98       	cbi	0x05, 2	; 5
                goto frame_snd_od;
     5e2:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5e4:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5e6:	0d b4       	in	r0, 0x2d	; 45
     5e8:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xe6>
     5ec:	1e b5       	in	r17, 0x2e	; 46
     5ee:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5f0:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5f2:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     5f4:	84 30       	cpi	r24, 0x04	; 4
     5f6:	09 f0       	breq	.+2      	; 0x5fa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xfa>
     5f8:	b0 cf       	rjmp	.-160    	; 0x55a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xfa>
     600:	9e b5       	in	r25, 0x2e	; 46
     602:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     604:	98 8f       	std	Y+24, r25	; 0x18
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     606:	8f 89       	ldd	r24, Y+23	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     608:	89 27       	eor	r24, r25
     60a:	8f 8b       	std	Y+23, r24	; 0x17
     60c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     60e:	9f 5f       	subi	r25, 0xFF	; 255

            if (++_i < odCount) // get next OD octet
     610:	9a 8f       	std	Y+26, r25	; 0x1a
     612:	91 11       	cpse	r25, r1
     614:	37 c0       	rjmp	.+110    	; 0x684 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x184>
     616:	2a 98       	cbi	0x05, 2	; 5
     618:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     61a:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     61c:	0d b4       	in	r0, 0x2d	; 45
     61e:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     620:	fd cf       	rjmp	.-6      	; 0x61c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x11c>
     622:	8e b5       	in	r24, 0x2e	; 46
     624:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     626:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     628:	0d b4       	in	r0, 0x2d	; 45
     62a:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     62c:	fd cf       	rjmp	.-6      	; 0x628 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x128>
     62e:	2a 9a       	sbi	0x05, 2	; 5
     630:	86 e0       	ldi	r24, 0x06	; 6
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     632:	a2 c0       	rjmp	.+324    	; 0x778 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     634:	2a 98       	cbi	0x05, 2	; 5
     636:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     638:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     63a:	0d b4       	in	r0, 0x2d	; 45
     63c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     63e:	fd cf       	rjmp	.-6      	; 0x63a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x13a>
     640:	1e b5       	in	r17, 0x2e	; 46
     642:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     644:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     646:	8c 70       	andi	r24, 0x0C	; 12

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     648:	84 30       	cpi	r24, 0x04	; 4
     64a:	09 f0       	breq	.+2      	; 0x64e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x14e>
     64c:	86 cf       	rjmp	.-244    	; 0x55a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     652:	fd cf       	rjmp	.-6      	; 0x64e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x14e>
     654:	9e b5       	in	r25, 0x2e	; 46
     656:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     658:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     65a:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     65c:	8f 8b       	std	Y+23, r24	; 0x17
     65e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     660:	9f 5f       	subi	r25, 0xFF	; 255

            if (++_i < odCount) // get next PD octet
     662:	9a 8f       	std	Y+26, r25	; 0x1a
     664:	91 11       	cpse	r25, r1
     666:	0e c0       	rjmp	.+28     	; 0x684 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x184>
     668:	2a 98       	cbi	0x05, 2	; 5
     66a:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     66c:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     66e:	0d b4       	in	r0, 0x2d	; 45
     670:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     672:	fd cf       	rjmp	.-6      	; 0x66e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x16e>
     674:	8e b5       	in	r24, 0x2e	; 46
     676:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     678:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     67a:	0d b4       	in	r0, 0x2d	; 45
     67c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     67e:	fd cf       	rjmp	.-6      	; 0x67a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17a>
     680:	2a 9a       	sbi	0x05, 2	; 5
     682:	8e c0       	rjmp	.+284    	; 0x7a0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     684:	6d 89       	ldd	r22, Y+21	; 0x15
     686:	dc dd       	rcall	.-1096   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     688:	9d 89       	ldd	r25, Y+21	; 0x15
     68a:	89 13       	cpse	r24, r25
     68c:	66 cf       	rjmp	.-308    	; 0x55a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5a>
     68e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     690:	88 23       	and	r24, r24
     692:	09 f4       	brne	.+2      	; 0x696 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x196>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     694:	9f cf       	rjmp	.-194    	; 0x5d4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xd4>
     696:	8c 89       	ldd	r24, Y+20	; 0x14
     698:	98 8d       	ldd	r25, Y+24	; 0x18
     69a:	28 2f       	mov	r18, r24
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     69c:	20 76       	andi	r18, 0x60	; 96
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     69e:	20 32       	cpi	r18, 0x20	; 32

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6a0:	41 f0       	breq	.+16     	; 0x6b2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b2>
     6a2:	89 89       	ldd	r24, Y+17	; 0x11

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     6a4:	8d 7f       	andi	r24, 0xFD	; 253
     6a6:	89 8b       	std	Y+17, r24	; 0x11
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     6a8:	89 8d       	ldd	r24, Y+25	; 0x19
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	1a 8e       	std	Y+26, r1	; 0x1a
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     6ae:	1f 8a       	std	Y+23, r1	; 0x17
     6b0:	2d c0       	rjmp	.+90     	; 0x70c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x20c>

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     6b2:	8f 71       	andi	r24, 0x1F	; 31
                _checksum8 = 0;
     6b4:	88 87       	std	Y+8, r24	; 0x08
                goto frame_snd_pd;
     6b6:	99 87       	std	Y+9, r25	; 0x09
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     6b8:	89 89       	ldd	r24, Y+17	; 0x11
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     6ba:	82 60       	ori	r24, 0x02	; 2
        _parameterWrite.value = data;
     6bc:	f4 cf       	rjmp	.-24     	; 0x6a6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1a6>
        _prmWriteAvailable = true;
     6be:	1f 8a       	std	Y+23, r1	; 0x17
     6c0:	8c 89       	ldd	r24, Y+20	; 0x14
     6c2:	68 2f       	mov	r22, r24
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     6c4:	6f 71       	andi	r22, 0x1F	; 31

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     6c6:	80 76       	andi	r24, 0x60	; 96
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     6c8:	9f dd       	rcall	.-1218   	; 0x208 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
     6ca:	2a 98       	cbi	0x05, 2	; 5

            // get the data
            uint8_t odIn = odRead(channel, address);
     6cc:	90 e9       	ldi	r25, 0x90	; 144
     6ce:	9e bd       	out	0x2e, r25	; 46
     6d0:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     6d2:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1d0>
     6d6:	1e b5       	in	r17, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6d8:	8e bd       	out	0x2e, r24	; 46
     6da:	0d b4       	in	r0, 0x2d	; 45
     6dc:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     6de:	fd cf       	rjmp	.-6      	; 0x6da <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1da>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6e0:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6e2:	9f 89       	ldd	r25, Y+23	; 0x17
     6e4:	89 27       	eor	r24, r25
     6e6:	8f 8b       	std	Y+23, r24	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     6ea:	91 11       	cpse	r25, r1
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f2>
     6ee:	60 e4       	ldi	r22, 0x40	; 64

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f4>
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	a5 dd       	rcall	.-1206   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     6f6:	8e 8b       	std	Y+22, r24	; 0x16
     6f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	8a 8f       	std	Y+26, r24	; 0x1a
     6fe:	81 11       	cpse	r24, r1

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x206>
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	39 c0       	rjmp	.+114    	; 0x778 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	89 e0       	ldi	r24, 0x09	; 9
     70a:	36 c0       	rjmp	.+108    	; 0x778 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
            {
                _frameState = FRAME_SND_ODX;
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	88 23       	and	r24, r24
            }
            else
            {
                _i = 0;
     710:	31 f0       	breq	.+12     	; 0x71e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x21e>
                _frameState = FRAME_SND_PD;
     712:	8a 8d       	ldd	r24, Y+26	; 0x1a
     714:	fe 01       	movw	r30, r28
frame_snd_pd:
        // with frame type 2, send the process data
        if (pdInSize > 0)
        {
            // get process data
            const uint8_t pd = _processDataIn.isValid ? _processDataIn.buffer[_i] : 0;
     716:	e8 0f       	add	r30, r24
     718:	f1 1d       	adc	r31, r1
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	01 c0       	rjmp	.+2      	; 0x720 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x220>
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2a 98       	cbi	0x05, 2	; 5
     722:	80 e9       	ldi	r24, 0x90	; 144
     724:	8e bd       	out	0x2e, r24	; 46
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     72a:	fd cf       	rjmp	.-6      	; 0x726 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x226>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     72c:	1e b5       	in	r17, 0x2e	; 46
     72e:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     730:	0d b4       	in	r0, 0x2d	; 45
     732:	07 fe       	sbrs	r0, 7
     734:	fd cf       	rjmp	.-6      	; 0x730 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x230>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     736:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     738:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     73a:	89 27       	eor	r24, r25
     73c:	8f 8b       	std	Y+23, r24	; 0x17
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     740:	91 11       	cpse	r25, r1

            // send process data
            status = registerWrite(REG_FR0, pd);

            // update checksum-8
            _checksum8 ^= pd;
     742:	02 c0       	rjmp	.+4      	; 0x748 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x248>
     744:	60 e4       	ldi	r22, 0x40	; 64
     746:	01 c0       	rjmp	.+2      	; 0x74a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24a>

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	7a dd       	rcall	.-1292   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     74c:	8e 8b       	std	Y+22, r24	; 0x16
     74e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	8a 8f       	std	Y+26, r24	; 0x1a
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	21 f5       	brne	.+72     	; 0x7a0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>

            // update checksum-8
            _checksum8 ^= pd;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     758:	8a e0       	ldi	r24, 0x0A	; 10
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            if (++_i == pdInSize)
     75a:	0e c0       	rjmp	.+28     	; 0x778 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x278>
     75c:	8e 89       	ldd	r24, Y+22	; 0x16
     75e:	2a 98       	cbi	0x05, 2	; 5
     760:	90 e9       	ldi	r25, 0x90	; 144
     762:	9e bd       	out	0x2e, r25	; 46
            {
                // enter next state
                _frameState = FRAME_SND_CKS;
     764:	0d b4       	in	r0, 0x2d	; 45
     766:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     768:	fd cf       	rjmp	.-6      	; 0x764 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x264>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     76a:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     76c:	8e bd       	out	0x2e, r24	; 46
     76e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x26e>
     774:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     776:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     778:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     77a:	12 c0       	rjmp	.+36     	; 0x7a0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a0>
     77c:	2a 98       	cbi	0x05, 2	; 5
     77e:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     780:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     782:	0d b4       	in	r0, 0x2d	; 45
     784:	07 fe       	sbrs	r0, 7
        }
        break;
     786:	fd cf       	rjmp	.-6      	; 0x782 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x282>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     788:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     78e:	0d b4       	in	r0, 0x2d	; 45
     790:	07 fe       	sbrs	r0, 7
     792:	fd cf       	rjmp	.-6      	; 0x78e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x28e>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     794:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	ce 01       	movw	r24, r28
     79e:	6d de       	rcall	.-806    	; 0x47a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7a0:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2a8>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2aa>
     7a8:	84 e0       	ldi	r24, 0x04	; 4
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     7ae:	1f 91       	pop	r17
     7b0:	08 95       	ret

000007b2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     7b6:	df 93       	push	r29
    else
        return ResultSuccess;
}
     7b8:	dc 01       	movw	r26, r24
     7ba:	52 96       	adiw	r26, 0x12	; 18
     7bc:	ec 91       	ld	r30, X
     7be:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	4c 30       	cpi	r20, 0x0C	; 12
     7c4:	51 05       	cpc	r21, r1
     7c6:	18 f5       	brcc	.+70     	; 0x80e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     7c8:	ec 01       	movw	r28, r24
     7ca:	fa 01       	movw	r30, r20
     7cc:	e0 5c       	subi	r30, 0xC0	; 192
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	f7 c4       	rjmp	.+2542   	; 0x11c0 <__tablejump2__>
     7d2:	8c 89       	ldd	r24, Y+20	; 0x14
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     7d4:	87 fd       	sbrc	r24, 7
     7d6:	10 c0       	rjmp	.+32     	; 0x7f8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x46>
     7d8:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     7da:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7dc:	8e bd       	out	0x2e, r24	; 46
     7de:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     7e4:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7e8:	8e bd       	out	0x2e, r24	; 46
     7ea:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7ec:	07 fe       	sbrs	r0, 7
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x38>
     7f0:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7f2:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     7f4:	8a 8b       	std	Y+18, r24	; 0x12
     7f6:	fe c0       	rjmp	.+508    	; 0x9f4 <__stack+0xf5>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     7f8:	6d 89       	ldd	r22, Y+21	; 0x15
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     7fa:	8f 89       	ldd	r24, Y+23	; 0x17
     7fc:	21 dd       	rcall	.-1470   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     7fe:	9d 89       	ldd	r25, Y+21	; 0x15
     800:	89 17       	cp	r24, r25
     802:	11 f0       	breq	.+4      	; 0x808 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x56>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	f9 c0       	rjmp	.+498    	; 0x9fa <__stack+0xfb>
                    return ResultChecksumError;
     808:	8c 8d       	ldd	r24, Y+28	; 0x1c
     80a:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     80c:	ad c0       	rjmp	.+346    	; 0x968 <__stack+0x69>
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	f4 c0       	rjmp	.+488    	; 0x9fa <__stack+0xfb>
                    return ResultIllegalMessageType;
     812:	2a 98       	cbi	0x05, 2	; 5
     814:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     816:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     818:	0d b4       	in	r0, 0x2d	; 45
     81a:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     81c:	fd cf       	rjmp	.-6      	; 0x818 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x66>
     81e:	1e b5       	in	r17, 0x2e	; 46
     820:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     822:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     824:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     826:	84 30       	cpi	r24, 0x04	; 4
     828:	69 f7       	brne	.-38     	; 0x804 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     82a:	ea 8d       	ldd	r30, Y+26	; 0x1a
     82c:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     832:	fd cf       	rjmp	.-6      	; 0x82e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     834:	9e b5       	in	r25, 0x2e	; 46
     836:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     838:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     83a:	fd 1f       	adc	r31, r29
     83c:	91 8f       	std	Z+25, r25	; 0x19
     83e:	8f 89       	ldd	r24, Y+23	; 0x17
     840:	89 27       	eor	r24, r25
     842:	8f 8b       	std	Y+23, r24	; 0x17
     844:	9a 8d       	ldd	r25, Y+26	; 0x1a
     846:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     848:	9a 8f       	std	Y+26, r25	; 0x1a
     84a:	9c 89       	ldd	r25, Y+20	; 0x14
     84c:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     84e:	11 c0       	rjmp	.+34     	; 0x872 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     850:	2a 98       	cbi	0x05, 2	; 5
     852:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     854:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     856:	0d b4       	in	r0, 0x2d	; 45
     858:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     85a:	fd cf       	rjmp	.-6      	; 0x856 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     85c:	8e b5       	in	r24, 0x2e	; 46
     85e:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     860:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     862:	0d b4       	in	r0, 0x2d	; 45
     864:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     866:	fd cf       	rjmp	.-6      	; 0x862 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     868:	2a 9a       	sbi	0x05, 2	; 5
     86a:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     86c:	8a 8b       	std	Y+18, r24	; 0x12
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     86e:	1a 8e       	std	Y+26, r1	; 0x1a
     870:	bf c0       	rjmp	.+382    	; 0x9f0 <__stack+0xf1>
                _i = 0;
     872:	6d 89       	ldd	r22, Y+21	; 0x15
     874:	e5 dc       	rcall	.-1590   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     876:	9d 89       	ldd	r25, Y+21	; 0x15
     878:	89 13       	cpse	r24, r25
     87a:	c4 cf       	rjmp	.-120    	; 0x804 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     87c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     87e:	88 23       	and	r24, r24
     880:	31 f2       	breq	.-116    	; 0x80e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     882:	89 8d       	ldd	r24, Y+25	; 0x19
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	1a 8e       	std	Y+26, r1	; 0x1a
                    return ResultIllegalMessageType;                    

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     888:	6f c0       	rjmp	.+222    	; 0x968 <__stack+0x69>
     88a:	2a 98       	cbi	0x05, 2	; 5

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     88c:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     88e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     890:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     892:	07 fe       	sbrs	r0, 7
     894:	fd cf       	rjmp	.-6      	; 0x890 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xde>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     896:	1e b5       	in	r17, 0x2e	; 46
     898:	1e bd       	out	0x2e, r17	; 46
     89a:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     89c:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     89e:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
     8a2:	b0 cf       	rjmp	.-160    	; 0x804 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     8a4:	0d b4       	in	r0, 0x2d	; 45
     8a6:	07 fe       	sbrs	r0, 7
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8aa:	9e b5       	in	r25, 0x2e	; 46
     8ac:	2a 9a       	sbi	0x05, 2	; 5
     8ae:	98 8f       	std	Y+24, r25	; 0x18
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8b0:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8b2:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     8b4:	8f 8b       	std	Y+23, r24	; 0x17
     8b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8b8:	9f 5f       	subi	r25, 0xFF	; 255
     8ba:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next OD octet
     8bc:	91 11       	cpse	r25, r1
     8be:	37 c0       	rjmp	.+110    	; 0x92e <__stack+0x2f>
     8c0:	2a 98       	cbi	0x05, 2	; 5
     8c2:	83 e8       	ldi	r24, 0x83	; 131
     8c4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8c6:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8c8:	07 fe       	sbrs	r0, 7
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x114>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8cc:	8e b5       	in	r24, 0x2e	; 46
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8d2:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8d4:	07 fe       	sbrs	r0, 7
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8d8:	2a 9a       	sbi	0x05, 2	; 5
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	75 c0       	rjmp	.+234    	; 0x9c8 <__stack+0xc9>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8de:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     8e0:	80 e1       	ldi	r24, 0x10	; 16
     8e2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8e4:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8e6:	07 fe       	sbrs	r0, 7
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x132>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8ea:	1e b5       	in	r17, 0x2e	; 46
     8ec:	1e bd       	out	0x2e, r17	; 46
     8ee:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8f0:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8f2:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
     8f6:	86 cf       	rjmp	.-244    	; 0x804 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     8f8:	0d b4       	in	r0, 0x2d	; 45
     8fa:	07 fe       	sbrs	r0, 7
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8fe:	9e b5       	in	r25, 0x2e	; 46
     900:	2a 9a       	sbi	0x05, 2	; 5
     902:	8f 89       	ldd	r24, Y+23	; 0x17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     904:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     906:	8f 8b       	std	Y+23, r24	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     908:	9a 8d       	ldd	r25, Y+26	; 0x1a
     90a:	9f 5f       	subi	r25, 0xFF	; 255
     90c:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next PD octet
     90e:	91 11       	cpse	r25, r1
     910:	0e c0       	rjmp	.+28     	; 0x92e <__stack+0x2f>
     912:	2a 98       	cbi	0x05, 2	; 5
     914:	83 e8       	ldi	r24, 0x83	; 131
     916:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     918:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     91a:	07 fe       	sbrs	r0, 7
     91c:	fd cf       	rjmp	.-6      	; 0x918 <__stack+0x19>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     91e:	8e b5       	in	r24, 0x2e	; 46
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     924:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     926:	07 fe       	sbrs	r0, 7
     928:	fd cf       	rjmp	.-6      	; 0x924 <__stack+0x25>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     92a:	2a 9a       	sbi	0x05, 2	; 5
     92c:	61 c0       	rjmp	.+194    	; 0x9f0 <__stack+0xf1>
     92e:	6d 89       	ldd	r22, Y+21	; 0x15
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     930:	87 dc       	rcall	.-1778   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     932:	9d 89       	ldd	r25, Y+21	; 0x15
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     934:	89 13       	cpse	r24, r25
     936:	66 cf       	rjmp	.-308    	; 0x804 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     938:	8c 8d       	ldd	r24, Y+28	; 0x1c
     93a:	88 23       	and	r24, r24
     93c:	09 f4       	brne	.+2      	; 0x940 <__stack+0x41>
     93e:	67 cf       	rjmp	.-306    	; 0x80e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     940:	8c 89       	ldd	r24, Y+20	; 0x14
     942:	98 8d       	ldd	r25, Y+24	; 0x18
     944:	28 2f       	mov	r18, r24
     946:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     948:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     94a:	41 f0       	breq	.+16     	; 0x95c <__stack+0x5d>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     94c:	89 89       	ldd	r24, Y+17	; 0x11
     94e:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     950:	89 8b       	std	Y+17, r24	; 0x11
     952:	89 8d       	ldd	r24, Y+25	; 0x19
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	1a 8e       	std	Y+26, r1	; 0x1a
     958:	1f 8a       	std	Y+23, r1	; 0x17
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     95a:	28 c0       	rjmp	.+80     	; 0x9ac <__stack+0xad>
     95c:	8f 71       	andi	r24, 0x1F	; 31

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     95e:	88 87       	std	Y+8, r24	; 0x08
                _checksum8 = 0;
     960:	99 87       	std	Y+9, r25	; 0x09
                goto frame_snd_pd;
     962:	89 89       	ldd	r24, Y+17	; 0x11
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     964:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     966:	f4 cf       	rjmp	.-24     	; 0x950 <__stack+0x51>
        _parameterWrite.value = data;
     968:	1f 8a       	std	Y+23, r1	; 0x17
        _prmWriteAvailable = true;
     96a:	8c 89       	ldd	r24, Y+20	; 0x14
     96c:	68 2f       	mov	r22, r24
     96e:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     970:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     972:	4a dc       	rcall	.-1900   	; 0x208 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     974:	2a 98       	cbi	0x05, 2	; 5
     976:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     978:	9e bd       	out	0x2e, r25	; 46
     97a:	0d b4       	in	r0, 0x2d	; 45
     97c:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     97e:	fd cf       	rjmp	.-6      	; 0x97a <__stack+0x7b>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     980:	1e b5       	in	r17, 0x2e	; 46
     982:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     984:	0d b4       	in	r0, 0x2d	; 45
     986:	07 fe       	sbrs	r0, 7
     988:	fd cf       	rjmp	.-6      	; 0x984 <__stack+0x85>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     98a:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     98c:	9f 89       	ldd	r25, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     98e:	89 27       	eor	r24, r25
     990:	8f 8b       	std	Y+23, r24	; 0x17
     992:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     994:	55 dc       	rcall	.-1878   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     996:	8e 8b       	std	Y+22, r24	; 0x16
     998:	8a 8d       	ldd	r24, Y+26	; 0x1a
     99a:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     99c:	8a 8f       	std	Y+26, r24	; 0x1a
     99e:	81 11       	cpse	r24, r1
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     9a2:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <__stack+0xc9>
     9a6:	1a 8e       	std	Y+26, r1	; 0x1a
     9a8:	89 e0       	ldi	r24, 0x09	; 9
     9aa:	0e c0       	rjmp	.+28     	; 0x9c8 <__stack+0xc9>
     9ac:	8e 89       	ldd	r24, Y+22	; 0x16
            {
                _frameState = FRAME_SND_ODX;
     9ae:	2a 98       	cbi	0x05, 2	; 5
     9b0:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     9b2:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <__stack+0xb5>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9ba:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9bc:	8e bd       	out	0x2e, r24	; 46
     9be:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9c0:	07 fe       	sbrs	r0, 7
     9c2:	fd cf       	rjmp	.-6      	; 0x9be <__stack+0xbf>
     9c4:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9c6:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9c8:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9ca:	12 c0       	rjmp	.+36     	; 0x9f0 <__stack+0xf1>
     9cc:	2a 98       	cbi	0x05, 2	; 5
     9ce:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9d0:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     9d2:	0d b4       	in	r0, 0x2d	; 45
     9d4:	07 fe       	sbrs	r0, 7
        }
        break;
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <__stack+0xd3>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9d8:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9de:	0d b4       	in	r0, 0x2d	; 45
     9e0:	07 fe       	sbrs	r0, 7
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <__stack+0xdf>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9e4:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	ce 01       	movw	r24, r28
     9ee:	45 dd       	rcall	.-1398   	; 0x47a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9f0:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__stack+0xf9>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     9fe:	1f 91       	pop	r17
     a00:	08 95       	ret

00000a02 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     a06:	df 93       	push	r29
    else
        return ResultSuccess;
}
     a08:	dc 01       	movw	r26, r24
     a0a:	52 96       	adiw	r26, 0x12	; 18
     a0c:	ec 91       	ld	r30, X
     a0e:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	4c 30       	cpi	r20, 0x0C	; 12
     a14:	51 05       	cpc	r21, r1
     a16:	18 f5       	brcc	.+70     	; 0xa5e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     a18:	ec 01       	movw	r28, r24
     a1a:	fa 01       	movw	r30, r20
     a1c:	e4 5b       	subi	r30, 0xB4	; 180
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	cf c3       	rjmp	.+1950   	; 0x11c0 <__tablejump2__>
     a22:	8c 89       	ldd	r24, Y+20	; 0x14
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     a24:	87 fd       	sbrc	r24, 7
     a26:	10 c0       	rjmp	.+32     	; 0xa48 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x46>
     a28:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a2a:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a2c:	8e bd       	out	0x2e, r24	; 46
     a2e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a30:	07 fe       	sbrs	r0, 7
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     a34:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a36:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a38:	8e bd       	out	0x2e, r24	; 46
     a3a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a3c:	07 fe       	sbrs	r0, 7
     a3e:	fd cf       	rjmp	.-6      	; 0xa3a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x38>
     a40:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a42:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     a44:	8a 8b       	std	Y+18, r24	; 0x12
     a46:	00 c1       	rjmp	.+512    	; 0xc48 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x246>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     a48:	6d 89       	ldd	r22, Y+21	; 0x15
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	f9 db       	rcall	.-2062   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     a4e:	9d 89       	ldd	r25, Y+21	; 0x15
     a50:	89 17       	cp	r24, r25
     a52:	11 f0       	breq	.+4      	; 0xa58 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x56>
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	fb c0       	rjmp	.+502    	; 0xc4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
                    return ResultChecksumError;
     a58:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a5a:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     a5c:	ad c0       	rjmp	.+346    	; 0xbb8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b6>
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	f6 c0       	rjmp	.+492    	; 0xc4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
                    return ResultIllegalMessageType;
     a62:	2a 98       	cbi	0x05, 2	; 5
     a64:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a66:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a68:	0d b4       	in	r0, 0x2d	; 45
     a6a:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a6c:	fd cf       	rjmp	.-6      	; 0xa68 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x66>
     a6e:	1e b5       	in	r17, 0x2e	; 46
     a70:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a72:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a74:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     a76:	84 30       	cpi	r24, 0x04	; 4
     a78:	69 f7       	brne	.-38     	; 0xa54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     a7a:	ea 8d       	ldd	r30, Y+26	; 0x1a
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     a7e:	0d b4       	in	r0, 0x2d	; 45
     a80:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     a84:	9e b5       	in	r25, 0x2e	; 46
     a86:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a88:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a8a:	fd 1f       	adc	r31, r29
     a8c:	91 8f       	std	Z+25, r25	; 0x19
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	89 27       	eor	r24, r25
     a92:	8f 8b       	std	Y+23, r24	; 0x17
     a94:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a96:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     a98:	9a 8f       	std	Y+26, r25	; 0x1a
     a9a:	9c 89       	ldd	r25, Y+20	; 0x14
     a9c:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     a9e:	11 c0       	rjmp	.+34     	; 0xac2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     aa0:	2a 98       	cbi	0x05, 2	; 5
     aa2:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     aa4:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     aa6:	0d b4       	in	r0, 0x2d	; 45
     aa8:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     aac:	8e b5       	in	r24, 0x2e	; 46
     aae:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     ab0:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ab2:	0d b4       	in	r0, 0x2d	; 45
     ab4:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     ab8:	2a 9a       	sbi	0x05, 2	; 5
     aba:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     abc:	8a 8b       	std	Y+18, r24	; 0x12
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     abe:	1a 8e       	std	Y+26, r1	; 0x1a
     ac0:	c1 c0       	rjmp	.+386    	; 0xc44 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
                _i = 0;
     ac2:	6d 89       	ldd	r22, Y+21	; 0x15
     ac4:	bd db       	rcall	.-2182   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     ac6:	9d 89       	ldd	r25, Y+21	; 0x15
     ac8:	89 13       	cpse	r24, r25
     aca:	c4 cf       	rjmp	.-120    	; 0xa54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     acc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ace:	88 23       	and	r24, r24
     ad0:	31 f2       	breq	.-116    	; 0xa5e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     ad2:	89 8d       	ldd	r24, Y+25	; 0x19
     ad4:	8b 83       	std	Y+3, r24	; 0x03
     ad6:	1a 8e       	std	Y+26, r1	; 0x1a
                    return ResultIllegalMessageType;                    

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     ad8:	6f c0       	rjmp	.+222    	; 0xbb8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1b6>
     ada:	2a 98       	cbi	0x05, 2	; 5

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     adc:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     ade:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     ae0:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ae2:	07 fe       	sbrs	r0, 7
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xde>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ae6:	1e b5       	in	r17, 0x2e	; 46
     ae8:	1e bd       	out	0x2e, r17	; 46
     aea:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     aec:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     aee:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     af0:	09 f0       	breq	.+2      	; 0xaf4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
     af2:	b0 cf       	rjmp	.-160    	; 0xa54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     af4:	0d b4       	in	r0, 0x2d	; 45
     af6:	07 fe       	sbrs	r0, 7
     af8:	fd cf       	rjmp	.-6      	; 0xaf4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0xf2>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     afa:	9e b5       	in	r25, 0x2e	; 46
     afc:	2a 9a       	sbi	0x05, 2	; 5
     afe:	98 8f       	std	Y+24, r25	; 0x18
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b00:	8f 89       	ldd	r24, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b02:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     b04:	8f 8b       	std	Y+23, r24	; 0x17
     b06:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b08:	9f 5f       	subi	r25, 0xFF	; 255
     b0a:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next OD octet
     b0c:	91 11       	cpse	r25, r1
     b0e:	37 c0       	rjmp	.+110    	; 0xb7e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17c>
     b10:	2a 98       	cbi	0x05, 2	; 5
     b12:	83 e8       	ldi	r24, 0x83	; 131
     b14:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b16:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b18:	07 fe       	sbrs	r0, 7
     b1a:	fd cf       	rjmp	.-6      	; 0xb16 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x114>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b1c:	8e b5       	in	r24, 0x2e	; 46
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b22:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b24:	07 fe       	sbrs	r0, 7
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b28:	2a 9a       	sbi	0x05, 2	; 5
     b2a:	86 e0       	ldi	r24, 0x06	; 6
     b2c:	75 c0       	rjmp	.+234    	; 0xc18 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b2e:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     b30:	80 e1       	ldi	r24, 0x10	; 16
     b32:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b34:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b36:	07 fe       	sbrs	r0, 7
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x132>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b3a:	1e b5       	in	r17, 0x2e	; 46
     b3c:	1e bd       	out	0x2e, r17	; 46
     b3e:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b40:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b42:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     b44:	09 f0       	breq	.+2      	; 0xb48 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
     b46:	86 cf       	rjmp	.-244    	; 0xa54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b48:	0d b4       	in	r0, 0x2d	; 45
     b4a:	07 fe       	sbrs	r0, 7
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x146>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b4e:	9e b5       	in	r25, 0x2e	; 46
     b50:	2a 9a       	sbi	0x05, 2	; 5
     b52:	8f 89       	ldd	r24, Y+23	; 0x17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b54:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b56:	8f 8b       	std	Y+23, r24	; 0x17
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     b58:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5a:	9f 5f       	subi	r25, 0xFF	; 255
     b5c:	9a 8f       	std	Y+26, r25	; 0x1a

            if (++_i < odCount) // get next PD octet
     b5e:	91 11       	cpse	r25, r1
     b60:	0e c0       	rjmp	.+28     	; 0xb7e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x17c>
     b62:	2a 98       	cbi	0x05, 2	; 5
     b64:	83 e8       	ldi	r24, 0x83	; 131
     b66:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b68:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b6a:	07 fe       	sbrs	r0, 7
     b6c:	fd cf       	rjmp	.-6      	; 0xb68 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x166>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b6e:	8e b5       	in	r24, 0x2e	; 46
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b74:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b76:	07 fe       	sbrs	r0, 7
     b78:	fd cf       	rjmp	.-6      	; 0xb74 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x172>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b7a:	2a 9a       	sbi	0x05, 2	; 5
     b7c:	63 c0       	rjmp	.+198    	; 0xc44 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
     b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b80:	5f db       	rcall	.-2370   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>
     b82:	9d 89       	ldd	r25, Y+21	; 0x15
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     b84:	89 13       	cpse	r24, r25
     b86:	66 cf       	rjmp	.-308    	; 0xa54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b88:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b8a:	88 23       	and	r24, r24
     b8c:	09 f4       	brne	.+2      	; 0xb90 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x18e>
     b8e:	67 cf       	rjmp	.-306    	; 0xa5e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     b90:	8c 89       	ldd	r24, Y+20	; 0x14
     b92:	98 8d       	ldd	r25, Y+24	; 0x18
     b94:	28 2f       	mov	r18, r24
     b96:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     b98:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     b9a:	41 f0       	breq	.+16     	; 0xbac <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1aa>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     b9c:	89 89       	ldd	r24, Y+17	; 0x11
     b9e:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     ba0:	89 8b       	std	Y+17, r24	; 0x11
     ba2:	89 8d       	ldd	r24, Y+25	; 0x19
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     ba4:	8b 83       	std	Y+3, r24	; 0x03
     ba6:	1a 8e       	std	Y+26, r1	; 0x1a
     ba8:	1f 8a       	std	Y+23, r1	; 0x17
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);

                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);
     baa:	28 c0       	rjmp	.+80     	; 0xbfc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1fa>
     bac:	8f 71       	andi	r24, 0x1F	; 31

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     bae:	88 87       	std	Y+8, r24	; 0x08
                _checksum8 = 0;
     bb0:	99 87       	std	Y+9, r25	; 0x09
                goto frame_snd_pd;
     bb2:	89 89       	ldd	r24, Y+17	; 0x11
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     bb4:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     bb6:	f4 cf       	rjmp	.-24     	; 0xba0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x19e>
        _parameterWrite.value = data;
     bb8:	1f 8a       	std	Y+23, r1	; 0x17
        _prmWriteAvailable = true;
     bba:	8c 89       	ldd	r24, Y+20	; 0x14
     bbc:	68 2f       	mov	r22, r24
     bbe:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     bc0:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bc2:	22 db       	rcall	.-2492   	; 0x208 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE6odReadEhh.isra.2>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     bc4:	2a 98       	cbi	0x05, 2	; 5
     bc6:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     bc8:	9e bd       	out	0x2e, r25	; 46
     bca:	0d b4       	in	r0, 0x2d	; 45
     bcc:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     bce:	fd cf       	rjmp	.-6      	; 0xbca <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1c8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bd0:	1e b5       	in	r17, 0x2e	; 46
     bd2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bd4:	0d b4       	in	r0, 0x2d	; 45
     bd6:	07 fe       	sbrs	r0, 7
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1d2>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     bda:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bdc:	9f 89       	ldd	r25, Y+23	; 0x17
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bde:	89 27       	eor	r24, r25
     be0:	8f 8b       	std	Y+23, r24	; 0x17
     be2:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     be4:	2d db       	rcall	.-2470   	; 0x240 <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     be6:	8e 8b       	std	Y+22, r24	; 0x16
     be8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bea:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     bec:	8a 8f       	std	Y+26, r24	; 0x1a
     bee:	81 11       	cpse	r24, r1
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x1f4>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     bf2:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     bf4:	11 c0       	rjmp	.+34     	; 0xc18 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
     bf6:	1a 8e       	std	Y+26, r1	; 0x1a
     bf8:	89 e0       	ldi	r24, 0x09	; 9
     bfa:	0e c0       	rjmp	.+28     	; 0xc18 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x216>
     bfc:	8e 89       	ldd	r24, Y+22	; 0x16
            {
                _frameState = FRAME_SND_ODX;
     bfe:	2a 98       	cbi	0x05, 2	; 5
     c00:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     c02:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     c04:	0d b4       	in	r0, 0x2d	; 45
     c06:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     c08:	fd cf       	rjmp	.-6      	; 0xc04 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x202>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c0a:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c0c:	8e bd       	out	0x2e, r24	; 46
     c0e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c10:	07 fe       	sbrs	r0, 7
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x20c>
     c14:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c16:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c18:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c1a:	14 c0       	rjmp	.+40     	; 0xc44 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x242>
     c1c:	2a 98       	cbi	0x05, 2	; 5
     c1e:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c20:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     c22:	0d b4       	in	r0, 0x2d	; 45
     c24:	07 fe       	sbrs	r0, 7
        }
        break;
     c26:	fd cf       	rjmp	.-6      	; 0xc22 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x220>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c28:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c2e:	0d b4       	in	r0, 0x2d	; 45
     c30:	07 fe       	sbrs	r0, 7
     c32:	fd cf       	rjmp	.-6      	; 0xc2e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x22c>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c34:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	8a 8b       	std	Y+18, r24	; 0x12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	88 83       	st	Y, r24
     c3e:	60 e0       	ldi	r22, 0x00	; 0
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c40:	ce 01       	movw	r24, r28
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     c42:	1b dc       	rcall	.-1994   	; 0x47a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
     c44:	17 ff       	sbrs	r17, 7

            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24a>
     c48:	80 e0       	ldi	r24, 0x00	; 0
              
            // start user call-back timer
            startCallbackTimer();
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv+0x24c>
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     c56:	fc 01       	movw	r30, r24
     c58:	2a 98       	cbi	0x05, 2	; 5
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     c5a:	80 e8       	ldi	r24, 0x80	; 128
    else
        return ResultSuccess;
}
     c5c:	8e bd       	out	0x2e, r24	; 46
     c5e:	0d b4       	in	r0, 0x2d	; 45
     c60:	07 fe       	sbrs	r0, 7
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c64:	8c e0       	ldi	r24, 0x0C	; 12
     c66:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c68:	0d b4       	in	r0, 0x2d	; 45
     c6a:	07 fe       	sbrs	r0, 7
     c6c:	fd cf       	rjmp	.-6      	; 0xc68 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x12>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c6e:	82 e3       	ldi	r24, 0x32	; 50
     c70:	8e bd       	out	0x2e, r24	; 46
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     c72:	87 81       	ldd	r24, Z+7	; 0x07
     c74:	80 fd       	sbrc	r24, 0
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x26>
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x28>
     c7c:	92 e0       	ldi	r25, 0x02	; 2
    
    // REG_CTL
    StackBase::registerWriteNext(StackT::PHY_CTL_SCT | 
                                 StackT::PHY_CTL_MODE | 
                                 Phy::CTL_SIO_MODE | 
                                 driveModeBits());
     c7e:	9c 60       	ori	r25, 0x0C	; 12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c80:	0d b4       	in	r0, 0x2d	; 45
     c82:	07 fe       	sbrs	r0, 7
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x2a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c86:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c88:	0d b4       	in	r0, 0x2d	; 45
     c8a:	07 fe       	sbrs	r0, 7
     c8c:	fd cf       	rjmp	.-6      	; 0xc88 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x32>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c8e:	1e bc       	out	0x2e, r1	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c90:	0d b4       	in	r0, 0x2d	; 45
     c92:	07 fe       	sbrs	r0, 7
     c94:	fd cf       	rjmp	.-6      	; 0xc90 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x3a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c9a:	0d b4       	in	r0, 0x2d	; 45
     c9c:	07 fe       	sbrs	r0, 7
     c9e:	fd cf       	rjmp	.-6      	; 0xc9a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x44>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ca0:	1e bc       	out	0x2e, r1	; 46
    
    // REG_STATUS (HMT7742) / REG_TEMP (HMT7748) - (dummy write)
    Phy::registerWriteNext(0);        
    
    // LEDs
    StackBase::registerWriteNext(this->_ledRegister);        
     ca2:	87 85       	ldd	r24, Z+15	; 0x0f
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ca4:	0d b4       	in	r0, 0x2d	; 45
     ca6:	07 fe       	sbrs	r0, 7
     ca8:	fd cf       	rjmp	.-6      	; 0xca4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x4e>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     caa:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     cac:	0d b4       	in	r0, 0x2d	; 45
     cae:	07 fe       	sbrs	r0, 7
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv+0x56>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     cb2:	2a 9a       	sbi	0x05, 2	; 5
#endif

    registerWriteDone();

    // set the stack to SIO mode to be in sync with the PHY.
    _ddlMode = IoLink::DDL_MODE_IDLE;
     cb4:	10 82       	st	Z, r1
     cb6:	08 95       	ret

00000cb8 <__vector_4>:
Interrupt service routine for the PHY interrupt.

We immediately forward the call to onPhyInterrupt().
*/
ISR(PCINT1_vect)
{
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
    // 
    // (If INT isn't cleared after the handler, then the PHY state is probably
    //  out of sync with the one expected by the firmware. In that case, this
    //  ISR will never be called again. Looping the handler ensures we eventually
    //  resync before exiting the ISR)
    while (bit_is_set(PINC, PINC0))
     cda:	30 9b       	sbis	0x06, 0	; 6
     cdc:	79 c0       	rjmp	.+242    	; 0xdd0 <__vector_4+0x118>

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     cde:	80 91 13 01 	lds	r24, 0x0113
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	20 f4       	brcc	.+8      	; 0xcee <__vector_4+0x36>
    {
        result = handleFirstOperatingModes();
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	b5 da       	rcall	.-2710   	; 0x256 <_ZN15StackSingleByte25handleFirstOperatingModesEv>
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <__vector_4+0x38>
     cee:	80 e0       	ldi	r24, 0x00	; 0

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     cf0:	90 91 13 01 	lds	r25, 0x0113
    {
        result = handleFirstOperatingModes();
    }
    
    if (_frameState > FRAME_RCV_CKT)
     cf4:	93 30       	cpi	r25, 0x03	; 3
     cf6:	88 f0       	brcs	.+34     	; 0xd1a <__vector_4+0x62>
     cf8:	80 91 14 01 	lds	r24, 0x0114
    {
        // call appropriate state handler
        switch (_receiveDdlMode)
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	31 f0       	breq	.+12     	; 0xd0c <__vector_4+0x54>
     d00:	84 30       	cpi	r24, 0x04	; 4
     d02:	41 f4       	brne	.+16     	; 0xd14 <__vector_4+0x5c>
     d04:	81 e0       	ldi	r24, 0x01	; 1
        {
        case IoLink::DDL_MODE_OPERATE:    
            result = handleOperatingMode<IoLink::DDL_MODE_OPERATE>(); 
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	fb db       	rcall	.-2058   	; 0x500 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <__vector_4+0x62>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	91 e0       	ldi	r25, 0x01	; 1
            break;
        case IoLink::DDL_MODE_PREOPERATE:
            result = handleOperatingMode<IoLink::DDL_MODE_PREOPERATE>();
     d10:	50 dd       	rcall	.-1376   	; 0x7b2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <__vector_4+0x62>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	74 de       	rcall	.-792    	; 0xa02 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li1ELi1E16DefaultSsHandlerE13HandlerResultEv>
            break;
        default:                  
            result = handleOperatingMode<IoLink::DDL_MODE_STARTUP>(); 
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	19 f1       	breq	.+70     	; 0xd64 <__vector_4+0xac>
     d1e:	84 30       	cpi	r24, 0x04	; 4
     d20:	c9 f1       	breq	.+114    	; 0xd94 <__vector_4+0xdc>
            break;
        }
    }

    // handle result codes
    switch (result)
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	09 f0       	breq	.+2      	; 0xd28 <__vector_4+0x70>
     d26:	4a c0       	rjmp	.+148    	; 0xdbc <__vector_4+0x104>
     d28:	2a 99       	sbic	0x05, 2	; 5
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__vector_4+0x7c>
     d2c:	0d b4       	in	r0, 0x2d	; 45
     d2e:	07 fe       	sbrs	r0, 7

//------------------------------------------------------------------------------
template <class SpiSsHndlr> 
void PhyDriver<SpiSsHndlr>::registerAbortAccess()
{
    if (_ssHndlr.asserted())
     d30:	fd cf       	rjmp	.-6      	; 0xd2c <__vector_4+0x74>
     d32:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d34:	2a 98       	cbi	0x05, 2	; 5
     d36:	83 e8       	ldi	r24, 0x83	; 131
     d38:	8e bd       	out	0x2e, r24	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     d3a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d3c:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d3e:	fd cf       	rjmp	.-6      	; 0xd3a <__vector_4+0x82>
     d40:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	9e bd       	out	0x2e, r25	; 46
     d46:	0d b4       	in	r0, 0x2d	; 45
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d48:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <__vector_4+0x8e>
     d4c:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d4e:	81 ff       	sbrs	r24, 1
     d50:	31 c0       	rjmp	.+98     	; 0xdb4 <__vector_4+0xfc>
     d52:	80 91 01 01 	lds	r24, 0x0101
            registerAbortAccess();

            // bad data has been received, so decline to respond
            uint8_t status = registerWrite(REG_LINK, LINK_END);
        
            if ((status & STATUS_SSC) && (_ddlMode == IoLink::DDL_MODE_IDLE))
     d56:	81 11       	cpse	r24, r1
     d58:	2d c0       	rjmp	.+90     	; 0xdb4 <__vector_4+0xfc>
     d5a:	6f e7       	ldi	r22, 0x7F	; 127
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	8c db       	rcall	.-2280   	; 0x47a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE18startCallbackTimerEh>
            {
                // setIoLinkListen();
                
                // a possible WURQ has been received, go quiet
                startCallbackTimer(127);
     d62:	28 c0       	rjmp	.+80     	; 0xdb4 <__vector_4+0xfc>
     d64:	2a 98       	cbi	0x05, 2	; 5
     d66:	83 e8       	ldi	r24, 0x83	; 131
     d68:	8e bd       	out	0x2e, r24	; 46
     d6a:	0d b4       	in	r0, 0x2d	; 45
     d6c:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d6e:	fd cf       	rjmp	.-6      	; 0xd6a <__vector_4+0xb2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d70:	8e b5       	in	r24, 0x2e	; 46
     d72:	82 e0       	ldi	r24, 0x02	; 2
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d74:	8e bd       	out	0x2e, r24	; 46
     d76:	0d b4       	in	r0, 0x2d	; 45
     d78:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d7a:	fd cf       	rjmp	.-6      	; 0xd76 <__vector_4+0xbe>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d7c:	2a 9a       	sbi	0x05, 2	; 5
     d7e:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d80:	80 93 13 01 	sts	0x0113, r24
     d84:	80 91 01 01 	lds	r24, 0x0101
    case ResultIllegalMessageType:
        // bad data has been received, so decline to respond
        registerWrite(REG_LINK, LINK_END);

        // reset state
        _frameState = FRAME_RCV_MC;
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	b8 f0       	brcs	.+46     	; 0xdba <__vector_4+0x102>
     d8c:	82 e0       	ldi	r24, 0x02	; 2

        // revert to startup mode
        if (_ddlMode>IoLink::DDL_MODE_STARTUP)
     d8e:	80 93 01 01 	sts	0x0101, r24
     d92:	13 c0       	rjmp	.+38     	; 0xdba <__vector_4+0x102>
     d94:	2a 98       	cbi	0x05, 2	; 5
            _ddlMode = IoLink::DDL_MODE_STARTUP;
     d96:	85 e8       	ldi	r24, 0x85	; 133
     d98:	8e bd       	out	0x2e, r24	; 46
     d9a:	0d b4       	in	r0, 0x2d	; 45
     d9c:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d9e:	fd cf       	rjmp	.-6      	; 0xd9a <__vector_4+0xe2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     da0:	8e b5       	in	r24, 0x2e	; 46
     da2:	80 e8       	ldi	r24, 0x80	; 128
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     da4:	8e bd       	out	0x2e, r24	; 46
     da6:	0d b4       	in	r0, 0x2d	; 45
     da8:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <__vector_4+0xee>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     dac:	2a 9a       	sbi	0x05, 2	; 5
     dae:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	51 df       	rcall	.-350    	; 0xc56 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE12configurePhyEv>
     db4:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     db6:	80 93 13 01 	sts	0x0113, r24
        break;

    case ResultPhyReset:
        // reset the reset bit
        registerWrite(REG_STATUS, STATUS_RST);
        configurePhy();
     dba:	3b da       	rcall	.-2954   	; 0x232 <_ZN15StackSingleByte12restartTimerEv.isra.0.constprop.7>
     dbc:	80 91 13 01 	lds	r24, 0x0113

        // reset state
        _frameState = FRAME_RCV_MC;
     dc0:	88 50       	subi	r24, 0x08	; 8
     dc2:	83 30       	cpi	r24, 0x03	; 3
     dc4:	10 f4       	brcc	.+4      	; 0xdca <__vector_4+0x112>
        
        // restart the timer
        restartTimer();
     dc6:	30 9b       	sbis	0x06, 0	; 6
     dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <__vector_4+0x10e>

    // When sending, the UART transmission delay t2 (see A.3.4) must be less
    // than 3*Tbit (= 13us @ 230'400baud). We can't meet this timing constraint
    // if we wait for the next interrupt, so we loop until the last octet has
    // been sent, and immediately re-enter the ISR.
    switch (_frameState)
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	8b bb       	out	0x1b, r24	; 27
     dce:	85 cf       	rjmp	.-246    	; 0xcda <__vector_4+0x22>
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
    {
    case FRAME_SND_ODX:
    case FRAME_SND_PD:
    case FRAME_SND_CKS:
        // wait until byte sent (can be removed if MPU frequency 20Mhz)
        loop_until_bit_is_set(PINC, PINC0);
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
    while (bit_is_set(PINC, PINC0))
    {
        StackSingleByte::instance.onPhyInterrupt();

        // clear interrupt flag
        PCIFR = _BV(PCIF1);
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
    }
}
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	0f 90       	pop	r0
     dee:	1f 90       	pop	r1
     df0:	18 95       	reti

00000df2 <_GLOBAL__sub_I_directParameter>:
     df2:	e1 e0       	ldi	r30, 0x01	; 1
     df4:	f1 e0       	ldi	r31, 0x01	; 1
     df6:	10 82       	st	Z, r1
     df8:	9f ef       	ldi	r25, 0xFF	; 255
     dfa:	95 83       	std	Z+5, r25	; 0x05
     dfc:	a8 e0       	ldi	r26, 0x08	; 8
     dfe:	b1 e0       	ldi	r27, 0x01	; 1
    , _ledRegister(0)
    , _fallbackCounter(0)
    , _runUserCode(false)
    , _sioLevel(true)
    , _prmWriteAvailable(false)
    , _flag(false)
     e00:	8c 91       	ld	r24, X
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	8c 93       	st	X, r24
     e06:	13 86       	std	Z+11, r1	; 0x0b
     e08:	12 86       	std	Z+10, r1	; 0x0a
     e0a:	15 86       	std	Z+13, r1	; 0x0d
     e0c:	14 86       	std	Z+12, r1	; 0x0c
     e0e:	96 87       	std	Z+14, r25	; 0x0e
     e10:	17 86       	std	Z+15, r1	; 0x0f
     e12:	10 8a       	std	Z+16, r1	; 0x10
     e14:	a2 e1       	ldi	r26, 0x12	; 18
     e16:	b1 e0       	ldi	r27, 0x01	; 1
     e18:	8c 91       	ld	r24, X
     e1a:	8c 7f       	andi	r24, 0xFC	; 252
     e1c:	8b 7f       	andi	r24, 0xFB	; 251
     e1e:	8c 93       	st	X, r24
{
    _parameterWrite.address = IoLink::PAGE_NO_PARAMETER;
     e20:	90 87       	std	Z+8, r25	; 0x08
     * 
     * \note Use \c Stack::instance to access the stack instance
     */
    StackSingleByte() : _frameState(FRAME_RESET),
                        _tccr0bRecord(0),
                        _receiveDdlMode(IoLink::DDL_MODE_IDLE) {}
     e22:	12 8a       	std	Z+18, r1	; 0x12
     e24:	13 8a       	std	Z+19, r1	; 0x13
     e26:	13 8e       	std	Z+27, r1	; 0x1b
     e28:	08 95       	ret

00000e2a <_ZN7DemoApp9configureEv>:

//------------------------------------------------------------------------------
void DemoApp::configure()
{
    // Configure a timer with 10ms cycle
    OCR2A   = F_CPU / 1024 / 100;
     e2a:	8e e4       	ldi	r24, 0x4E	; 78
     e2c:	80 93 b3 00 	sts	0x00B3, r24

    /* Start the timer
       WGM    = 3'b010  - clear timer on match
       COMxx  = 2'b0    - pins not used
       CS     = 3'b111   - divide by 1024 */
    TCCR2A = _BV(WGM21);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);
     e36:	87 e0       	ldi	r24, 0x07	; 7
     e38:	80 93 b1 00 	sts	0x00B1, r24

    // configure digital input
    DDRB &= ~_BV(DDB7);
     e3c:	27 98       	cbi	0x04, 7	; 4
     e3e:	08 95       	ret

00000e40 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>:
    updateProcessInputData();
}

//------------------------------------------------------------------------------
void DemoApp::handleParameterWrite(const Stack::Parameter* param)
{
     e40:	fb 01       	movw	r30, r22
    // (this is the location to intercept the write access if desired)
    bool commit = true;

    switch (param->address)
     e42:	80 81       	ld	r24, Z
     e44:	81 31       	cpi	r24, 0x11	; 17
     e46:	09 f4       	brne	.+2      	; 0xe4a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa>
     e48:	7a c0       	rjmp	.+244    	; 0xf3e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	82 31       	cpi	r24, 0x12	; 18
     e4e:	29 f0       	breq	.+10     	; 0xe5a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x1a>
     e50:	80 31       	cpi	r24, 0x10	; 16
     e52:	59 f4       	brne	.+22     	; 0xe6a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
    case IoLink::PAGE_DEVICE_SPECIFIC_1B:
    case IoLink::PAGE_DEVICE_SPECIFIC_1C:
    case IoLink::PAGE_DEVICE_SPECIFIC_1D:
    case IoLink::PAGE_DEVICE_SPECIFIC_1E:
    case IoLink::PAGE_DEVICE_SPECIFIC_1F:
        directParameter[address] = value;
     e54:	90 93 37 01 	sts	0x0137, r25
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
        // read-only access => ignore
        commit = false;
        break;

    case VendorParamPidMode:  // process input data selection
        switch (param->value)
     e5a:	91 30       	cpi	r25, 0x01	; 1
     e5c:	31 f4       	brne	.+12     	; 0xe6a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x2a>
        {
        case PidAnalogInput:
            // configure ADC
            ADMUX = _BV(REFS0) | 7; 
     e5e:	87 e4       	ldi	r24, 0x47	; 71
     e60:	80 93 7c 00 	sts	0x007C, r24
            ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADEN) | _BV(ADSC);
     e64:	87 ec       	ldi	r24, 0xC7	; 199
     e66:	80 93 7a 00 	sts	0x007A, r24
    }

    if (commit)
    {
        // commit to stack
        Stack::instance.parameterWrite(param->address, param->value);
     e6a:	21 81       	ldd	r18, Z+1	; 0x01
     e6c:	e0 81       	ld	r30, Z
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e6e:	ec 30       	cpi	r30, 0x0C	; 12
     e70:	08 f0       	brcs	.+2      	; 0xe74 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x34>
     e72:	60 c0       	rjmp	.+192    	; 0xf34 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xf4>
     e74:	e9 30       	cpi	r30, 0x09	; 9
     e76:	50 f0       	brcs	.+20     	; 0xe8c <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x4c>

    case IoLink::PAGE_REVISION_ID:
    case IoLink::PAGE_DEVICE_ID_1:
    case IoLink::PAGE_DEVICE_ID_2:
    case IoLink::PAGE_DEVICE_ID_3:
        if (_ddlMode == IoLink::DDL_MODE_STARTUP)
     e78:	80 91 01 01 	lds	r24, 0x0101
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	09 f0       	breq	.+2      	; 0xe82 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
     e80:	5e c0       	rjmp	.+188    	; 0xf3e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
        {
            directParameter[address] = value;
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ea 5d       	subi	r30, 0xDA	; 218
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	20 83       	st	Z, r18
     e8a:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e8c:	e1 30       	cpi	r30, 0x01	; 1
     e8e:	69 f5       	brne	.+90     	; 0xeea <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xaa>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     e90:	80 91 01 01 	lds	r24, 0x0101
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	21 f4       	brne	.+8      	; 0xea0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x60>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     e98:	80 91 27 01 	lds	r24, 0x0127
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     e9c:	81 11       	cpse	r24, r1
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x64>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     ea0:	80 91 28 01 	lds	r24, 0x0128
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	d0 f0       	brcs	.+52     	; 0xedc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x9c>
     ea8:	80 34       	cpi	r24, 0x40	; 64
     eaa:	10 f4       	brcc	.+4      	; 0xeb0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x70>
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	18 c0       	rjmp	.+48     	; 0xee0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     eb0:	98 2f       	mov	r25, r24
     eb2:	90 7c       	andi	r25, 0xC0	; 192
     eb4:	90 34       	cpi	r25, 0x40	; 64
     eb6:	41 f4       	brne	.+16     	; 0xec8 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x88>
     eb8:	34 e0       	ldi	r19, 0x04	; 4
     eba:	83 9f       	mul	r24, r19
     ebc:	c0 01       	movw	r24, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	99 27       	eor	r25, r25
     ec2:	80 5c       	subi	r24, 0xC0	; 192
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	0c c0       	rjmp	.+24     	; 0xee0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     ec8:	90 38       	cpi	r25, 0x80	; 128
     eca:	41 f4       	brne	.+16     	; 0xedc <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x9c>
     ecc:	8f 73       	andi	r24, 0x3F	; 63
     ece:	30 e1       	ldi	r19, 0x10	; 16
     ed0:	83 9f       	mul	r24, r19
     ed2:	c0 01       	movw	r24, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	80 5c       	subi	r24, 0xC0	; 192
     ed8:	9e 4f       	sbci	r25, 0xFE	; 254
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xa0>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	90 93 0c 01 	sts	0x010C, r25
     ee4:	80 93 0b 01 	sts	0x010B, r24
     ee8:	cc cf       	rjmp	.-104    	; 0xe82 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     eea:	e1 30       	cpi	r30, 0x01	; 1
     eec:	f8 f4       	brcc	.+62     	; 0xf2c <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xec>
    {
    case IoLink::PAGE_MASTER_CMD:
        switch (value)
     eee:	28 39       	cpi	r18, 0x98	; 152
     ef0:	a1 f0       	breq	.+40     	; 0xf1a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xda>
     ef2:	28 f4       	brcc	.+10     	; 0xefe <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xbe>
     ef4:	2a 35       	cpi	r18, 0x5A	; 90
     ef6:	b1 f0       	breq	.+44     	; 0xf24 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xe4>
     ef8:	27 39       	cpi	r18, 0x97	; 151
     efa:	31 f0       	breq	.+12     	; 0xf08 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xc8>
     efc:	08 95       	ret
     efe:	29 39       	cpi	r18, 0x99	; 153
     f00:	49 f0       	breq	.+18     	; 0xf14 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xd4>
     f02:	2a 39       	cpi	r18, 0x9A	; 154
     f04:	19 f0       	breq	.+6      	; 0xf0c <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xcc>
     f06:	08 95       	ret
        {
        case IoLink::MCMD_DEVICE_STARTUP:   
            _ddlMode = IoLink::DDL_MODE_STARTUP;  
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_DEVICE_PREOPERATE:
            _ddlMode = IoLink::DDL_MODE_PREOPERATE; 
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	80 93 01 01 	sts	0x0101, r24
     f12:	08 95       	ret
            break;
        case IoLink::MCMD_DEVICE_OPERATE:   
            _processDataOut.isValid = false;
     f14:	10 92 05 01 	sts	0x0105, r1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xe0>
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
            break;
        case IoLink::MCMD_PD_OUT_OPERATE:   // Process output data valid
            _processDataOut.isValid = true;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 05 01 	sts	0x0105, r24
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
     f20:	84 e0       	ldi	r24, 0x04	; 4
     f22:	f5 cf       	rjmp	.-22     	; 0xf0e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_FALLBACK:
            // switch to SIO mode after 3 cycles
            _fallbackCounter = 3;
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	80 93 11 01 	sts	0x0111, r24
     f2a:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     f2c:	e4 30       	cpi	r30, 0x04	; 4
     f2e:	09 f4       	brne	.+2      	; 0xf32 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xf2>
     f30:	a3 cf       	rjmp	.-186    	; 0xe78 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x38>
     f32:	08 95       	ret
     f34:	81 ef       	ldi	r24, 0xF1	; 241
     f36:	8e 0f       	add	r24, r30
     f38:	81 31       	cpi	r24, 0x11	; 17
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0xfe>
     f3c:	a2 cf       	rjmp	.-188    	; 0xe82 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x42>
     f3e:	08 95       	ret

00000f40 <_ZN7DemoApp11elapsed10msEv>:
}

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
     f40:	b9 9b       	sbis	0x17, 1	; 23
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <_ZN7DemoApp11elapsed10msEv+0xc>
        return false;

    TIFR2 = _BV(OCF2A);
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	87 bb       	out	0x17, r24	; 23
    return true;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	08 95       	ret

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
        return false;
     f4c:	80 e0       	ldi	r24, 0x00	; 0

    TIFR2 = _BV(OCF2A);
    return true;
}
     f4e:	08 95       	ret

00000f50 <_ZN7DemoApp22updateProcessInputDataEv>:
    }
}

//------------------------------------------------------------------------------
void DemoApp::updateProcessInputData()
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
    if (elapsed10ms())
     f56:	f4 df       	rcall	.-24     	; 0xf40 <_ZN7DemoApp11elapsed10msEv>
     f58:	88 23       	and	r24, r24
     f5a:	61 f1       	breq	.+88     	; 0xfb4 <_ZN7DemoApp22updateProcessInputDataEv+0x64>
     f5c:	88 81       	ld	r24, Y
    {
        // the green LED cycles if IO-Link comms are up, red if not
        ++_ctr;
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	88 83       	st	Y, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t level = ((_ctr >> 3) & 0x0f);
     f64:	23 e0       	ldi	r18, 0x03	; 3
     f66:	95 95       	asr	r25
     f68:	87 95       	ror	r24
     f6a:	2a 95       	dec	r18
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <_ZN7DemoApp22updateProcessInputDataEv+0x16>
     f6e:	98 2f       	mov	r25, r24
     f70:	9f 70       	andi	r25, 0x0F	; 15
     f72:	83 ff       	sbrs	r24, 3
        if (level & 0x8) level = ((~level) & 0x7);
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <_ZN7DemoApp22updateProcessInputDataEv+0x2a>
     f76:	90 95       	com	r25
     f78:	97 70       	andi	r25, 0x07	; 7
     f7a:	80 91 06 01 	lds	r24, 0x0106

        if (Stack::instance.masterLost())
     f7e:	85 30       	cpi	r24, 0x05	; 5
     f80:	18 f0       	brcs	.+6      	; 0xf88 <_ZN7DemoApp22updateProcessInputDataEv+0x38>
     f82:	19 82       	std	Y+1, r1	; 0x01
            {
                // flash the red LED
                _ledLevel1 = Stack::LED_LEVEL_OFF;
     f84:	9a 83       	std	Y+2, r25	; 0x02
                _ledLevel2 = (Stack::LedLevel)(level);
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <_ZN7DemoApp22updateProcessInputDataEv+0x3c>
     f88:	99 83       	std	Y+1, r25	; 0x01
            }
            else
            {
                // flash the green LED
                _ledLevel1 = (Stack::LedLevel)(level);
     f8a:	1a 82       	std	Y+2, r1	; 0x02
                _ledLevel2 = Stack::LED_LEVEL_OFF;
     f8c:	1f 99       	sbic	0x03, 7	; 3
            };

        // the red LED is over-ridden if the push-button is pressed
        if (isDigitalButtonPressed())
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <_ZN7DemoApp22updateProcessInputDataEv+0x44>
     f90:	8f e0       	ldi	r24, 0x0F	; 15
        {
            _ledLevel2 = (Stack::LedLevel)(0xf);
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	89 81       	ldd	r24, Y+1	; 0x01
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
        _ledRegister |= (level << 4);
     f96:	20 e1       	ldi	r18, 0x10	; 16
     f98:	82 9f       	mul	r24, r18
     f9a:	c0 01       	movw	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	90 91 10 01 	lds	r25, 0x0110
void StackBase<T, PDI, PDO, SpiSsHndlr>::setLedLevel(Led led, typename Phy::LedLevel level)
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
     fa2:	9f 70       	andi	r25, 0x0F	; 15
     fa4:	89 2b       	or	r24, r25
        _ledRegister |= (level << 4);
     fa6:	80 93 10 01 	sts	0x0110, r24
     faa:	80 7f       	andi	r24, 0xF0	; 240
        break;

    case LED_2:
        _ledRegister &= 0xf0;
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
        _ledRegister |= level;
     fae:	89 2b       	or	r24, r25
     fb0:	80 93 10 01 	sts	0x0110, r24
     fb4:	80 91 38 01 	lds	r24, 0x0138

        Stack::instance.setLedLevel(Stack::LED_1, _ledLevel1);
        Stack::instance.setLedLevel(Stack::LED_2, _ledLevel2);
    }

    switch (Stack::instance.parameterRead(VendorParamPidMode))
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	59 f0       	breq	.+22     	; 0xfd2 <_ZN7DemoApp22updateProcessInputDataEv+0x82>
     fbc:	20 f0       	brcs	.+8      	; 0xfc6 <_ZN7DemoApp22updateProcessInputDataEv+0x76>
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	21 f5       	brne	.+72     	; 0x100a <_ZN7DemoApp22updateProcessInputDataEv+0xba>
     fc2:	88 81       	ld	r24, Y
        }
        break;

    case PidSawtooth:
        // copy counter to process input data
        Stack::instance.processInputData().buffer[0] = _ctr;
     fc4:	1c c0       	rjmp	.+56     	; 0xffe <_ZN7DemoApp22updateProcessInputDataEv+0xae>
     fc6:	83 b1       	in	r24, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
     fc8:	80 95       	com	r24

    switch (Stack::instance.parameterRead(VendorParamPidMode))
    {
    case PidDigitalInput:
        // check digital sensor 
        Stack::instance.processInputData().buffer[0] = isDigitalButtonPressed() ? 0x01 : 0x00;
     fca:	88 1f       	adc	r24, r24
     fcc:	88 27       	eor	r24, r24
     fce:	88 1f       	adc	r24, r24
     fd0:	16 c0       	rjmp	.+44     	; 0xffe <_ZN7DemoApp22updateProcessInputDataEv+0xae>
     fd2:	90 91 7a 00 	lds	r25, 0x007A
        Stack::instance.processInputData().isValid = true;
        break;

    case PidAnalogInput:
        // check analog sensor
        if (!(ADCSRA & _BV(ADSC)))
     fd6:	96 fd       	sbrc	r25, 6
     fd8:	1a c0       	rjmp	.+52     	; 0x100e <_ZN7DemoApp22updateProcessInputDataEv+0xbe>
     fda:	20 91 78 00 	lds	r18, 0x0078
        {
            uint16_t sensorValue = ADC;
     fde:	30 91 79 00 	lds	r19, 0x0079
     fe2:	36 95       	lsr	r19

            Stack::instance.processInputData().buffer[0] = sensorValue >> 2;
     fe4:	27 95       	ror	r18
     fe6:	36 95       	lsr	r19
     fe8:	27 95       	ror	r18
     fea:	20 93 02 01 	sts	0x0102, r18
     fee:	80 93 03 01 	sts	0x0103, r24
            Stack::instance.processInputData().isValid = true;
     ff2:	80 91 7a 00 	lds	r24, 0x007A

            // restart sampling
            ADCSRA |= _BV(ADSC);
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	80 93 7a 00 	sts	0x007A, r24
     ffc:	08 c0       	rjmp	.+16     	; 0x100e <_ZN7DemoApp22updateProcessInputDataEv+0xbe>
     ffe:	80 93 02 01 	sts	0x0102, r24
        }
        break;

    case PidSawtooth:
        // copy counter to process input data
        Stack::instance.processInputData().buffer[0] = _ctr;
    1002:	81 e0       	ldi	r24, 0x01	; 1
        Stack::instance.processInputData().isValid = true;
    1004:	80 93 03 01 	sts	0x0103, r24
    1008:	02 c0       	rjmp	.+4      	; 0x100e <_ZN7DemoApp22updateProcessInputDataEv+0xbe>
        break;
    100a:	10 92 03 01 	sts	0x0103, r1

    default:
        Stack::instance.processInputData().isValid = false;
    100e:	df 91       	pop	r29
        break;
    }
}
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>:
    1014:	cf 93       	push	r28
    DDRB &= ~_BV(DDB7);
}

//------------------------------------------------------------------------------
void DemoApp::run(const Stack::Parameter* param)
{
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
    // check for write access to direct parameter page
    if (param)
    101a:	61 15       	cp	r22, r1
    101c:	71 05       	cpc	r23, r1
    101e:	11 f0       	breq	.+4      	; 0x1024 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x10>
    {
        handleParameterWrite(param);
    1020:	0f df       	rcall	.-482    	; 0xe40 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>
    1022:	27 c0       	rjmp	.+78     	; 0x1072 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x5e>
    1024:	80 91 01 01 	lds	r24, 0x0101
    }
    else if (Stack::instance.stackMode() == Stack::STACK_MODE_SIO)
    1028:	81 11       	cpse	r24, r1
    102a:	23 c0       	rjmp	.+70     	; 0x1072 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x5e>
    102c:	93 b1       	in	r25, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
    102e:	90 95       	com	r25
    1030:	99 1f       	adc	r25, r25
    1032:	99 27       	eor	r25, r25
    1034:	99 1f       	adc	r25, r25
    1036:	80 91 08 01 	lds	r24, 0x0108

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::setSioLevel(bool active)
{
    _sioLevel = active;
    103a:	90 fb       	bst	r25, 0
    103c:	80 f9       	bld	r24, 0
    103e:	80 93 08 01 	sts	0x0108, r24
    1042:	91 11       	cpse	r25, r1
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
    1044:	02 c0       	rjmp	.+4      	; 0x104a <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x36>
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	01 c0       	rjmp	.+2      	; 0x104c <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x38>
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
    104e:	80 93 07 01 	sts	0x0107, r24
    1052:	81 e0       	ldi	r24, 0x01	; 1
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
    1054:	80 93 00 01 	sts	0x0100, r24
    1058:	9c 60       	ori	r25, 0x0C	; 12
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
    105a:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
    105c:	82 e8       	ldi	r24, 0x82	; 130
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    105e:	8e bd       	out	0x2e, r24	; 46
    1060:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    1062:	07 fe       	sbrs	r0, 7
    1064:	fd cf       	rjmp	.-6      	; 0x1060 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x4c>
    1066:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
    1068:	9e bd       	out	0x2e, r25	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    106a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    106c:	07 fe       	sbrs	r0, 7
    106e:	fd cf       	rjmp	.-6      	; 0x106a <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE+0x56>
    1070:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
    1072:	ce 01       	movw	r24, r28
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    1074:	df 91       	pop	r29
}
    1076:	cf 91       	pop	r28
    1078:	6b cf       	rjmp	.-298    	; 0xf50 <_ZN7DemoApp22updateProcessInputDataEv>

0000107a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv>:
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    return StackBase::registerRead(Phy::REG_TEMP);
}

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::configure()
    107e:	ec 01       	movw	r28, r24
    DORD   = 1'b0   - MSB first
    MSTR   = 1'b1   - Master
    CPOL   = 1'b1   - clock idles high
    CPHA   = 1'b1   - sample on trailing edge
    SPR    = 2'b00  - fosc/2 */
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(CPHA);
    1080:	8c e5       	ldi	r24, 0x5C	; 92
    1082:	8c bd       	out	0x2c, r24	; 44

    /* and the SPI2X bit to speed it up */
    SPSR = _BV(SPI2X);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	8d bd       	out	0x2d, r24	; 45

    /* Data direction in the SPI bits, PB2/SS, PB5/SCK
    and PB3/MOSI are outputs.  Drive SS high in advance */
    PORTB |= _BV(PORTB2) | _BV(PORTB5);
    1088:	85 b1       	in	r24, 0x05	; 5
    108a:	84 62       	ori	r24, 0x24	; 36
    108c:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(_BV(PORTB3)); 
    108e:	2b 98       	cbi	0x05, 3	; 5
    DDRB  |= _BV(DDB5) | _BV(DDB3) | _BV(DDB2);
    1090:	84 b1       	in	r24, 0x04	; 4
    1092:	8c 62       	ori	r24, 0x2C	; 44
    1094:	84 b9       	out	0x04, r24	; 4
    DDRB  &= ~(_BV(DDB4));
    1096:	24 98       	cbi	0x04, 4	; 4
        HIBYTE(StackT::DEVICE_ID),                      // PAGE_DEVICE_ID_2
        LOBYTE(StackT::DEVICE_ID)                       // PAGE_DEVICE_ID_3
    };

    // copy the default parameters from flash to RAM
    (void)memcpy_P(directParameter, directDefaultConfig, sizeof(directDefaultConfig));
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	60 eb       	ldi	r22, 0xB0	; 176
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	86 e2       	ldi	r24, 0x26	; 38
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	93 d0       	rcall	.+294    	; 0x11cc <memcpy_P>
    10a6:	18 82       	st	Y, r1

    // stack initial state is STACK_MODE_SIO operation
    _ddlMode = IoLink::DDL_MODE_IDLE;
    10a8:	1a 82       	std	Y+2, r1	; 0x02

    // set up the process data buffers and default process data
    _processDataIn.isValid = false;
    10aa:	1c 82       	std	Y+4, r1	; 0x04
    _processDataOut.isValid = false;
    10ac:	80 91 68 00 	lds	r24, 0x0068
{
    // Configure and enable interrupt
    // 
    // Only pin change interrupts are available, so the routine must check
    // the level before returning
    PCICR  |= _BV(PCIE1);
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	80 93 68 00 	sts	0x0068, r24
    10b6:	80 91 6c 00 	lds	r24, 0x006C
    PCMSK1 |= _BV(PCINT8);
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	80 93 6c 00 	sts	0x006C, r24
    10c0:	fb dd       	rcall	.-1034   	; 0xcb8 <__vector_4>

    // call ISR handler
    PCINT1_vect();
    10c2:	1d 82       	std	Y+5, r1	; 0x05
    10c4:	15 bc       	out	0x25, r1	; 37
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
    10c6:	16 bc       	out	0x26, r1	; 38

    // disable timer
    TCCR0B = 0;
    10c8:	85 b3       	in	r24, 0x15	; 21
    TCNT0 = 0;
    10ca:	87 60       	ori	r24, 0x07	; 7

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
    10cc:	85 bb       	out	0x15, r24	; 21
    10ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	49 f5       	brne	.+82     	; 0x1128 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xae>
    10d6:	28 81       	ld	r18, Y
    10d8:	24 30       	cpi	r18, 0x04	; 4
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    10da:	21 f4       	brne	.+8      	; 0x10e4 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x6a>
    10dc:	20 91 27 01 	lds	r18, 0x0127
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    10e0:	21 11       	cpse	r18, r1
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x6e>
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
    10e4:	20 91 28 01 	lds	r18, 0x0128
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    10e8:	24 30       	cpi	r18, 0x04	; 4
    10ea:	e0 f0       	brcs	.+56     	; 0x1124 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
    10ec:	20 34       	cpi	r18, 0x40	; 64
    10ee:	18 f4       	brcc	.+6      	; 0x10f6 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x7c>
    10f0:	82 2f       	mov	r24, r18
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	17 c0       	rjmp	.+46     	; 0x1124 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    10f6:	32 2f       	mov	r19, r18
    10f8:	30 7c       	andi	r19, 0xC0	; 192
    10fa:	30 34       	cpi	r19, 0x40	; 64
    10fc:	49 f4       	brne	.+18     	; 0x1110 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0x96>
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	28 9f       	mul	r18, r24
    1102:	90 01       	movw	r18, r0
    1104:	11 24       	eor	r1, r1
    1106:	33 27       	eor	r19, r19
    1108:	c9 01       	movw	r24, r18
    110a:	80 5c       	subi	r24, 0xC0	; 192
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	0a c0       	rjmp	.+20     	; 0x1124 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    1110:	30 38       	cpi	r19, 0x80	; 128
    1112:	41 f4       	brne	.+16     	; 0x1124 <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv+0xaa>
    1114:	2f 73       	andi	r18, 0x3F	; 63
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	28 9f       	mul	r18, r24
    111a:	90 01       	movw	r18, r0
    111c:	11 24       	eor	r1, r1
    111e:	c9 01       	movw	r24, r18
    1120:	80 5c       	subi	r24, 0xC0	; 192
    1122:	9e 4f       	sbci	r25, 0xFE	; 254
    1124:	9b 87       	std	Y+11, r25	; 0x0b
    1126:	8a 87       	std	Y+10, r24	; 0x0a
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
    112c:	9d 87       	std	Y+13, r25	; 0x0d
    112e:	8c 87       	std	Y+12, r24	; 0x0c
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	80 93 6e 00 	sts	0x006E, r24

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	84 bd       	out	0x24, r24	; 36

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
    113a:	94 e6       	ldi	r25, 0x64	; 100
    113c:	97 bd       	out	0x27, r25	; 39

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
    113e:	98 bd       	out	0x28, r25	; 40
    1140:	85 bd       	out	0x25, r24	; 37
    1142:	df 91       	pop	r29
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
    1144:	cf 91       	pop	r28
    configureStackBase();
    Phy::configure();

    // start timer responsible for calling the application "main loop"
    startCallbackTimer();
};
    1146:	08 95       	ret

00001148 <main>:
    1148:	2f ef       	ldi	r18, 0xFF	; 255
    114a:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	21 50       	subi	r18, 0x01	; 1
    1150:	80 40       	sbci	r24, 0x00	; 0
    1152:	90 40       	sbci	r25, 0x00	; 0
    1154:	e1 f7       	brne	.-8      	; 0x114e <main+0x6>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <main+0x10>
    1158:	00 00       	nop
public:
    //! setup the HW configuration
    static void configure()
    {
        // Port PD4 and PD5 as output
        DDRD  |= _BV(DDD4) | _BV(DDD5);
    115a:	8a b1       	in	r24, 0x0a	; 10
    115c:	80 63       	ori	r24, 0x30	; 48
    115e:	8a b9       	out	0x0a, r24	; 10
        {
            PORTD |= _BV(PORTD4);
        }
        else
        {
            PORTD &= ~(_BV(PORTD4));
    1160:	5c 98       	cbi	0x0b, 4	; 11
    // instantiate DemoApp
    DemoApp& theApp = DemoApp::instance;

    // configure all software modules
    DebugPin::configure();
    DemoApp::configure();   
    1162:	63 de       	rcall	.-826    	; 0xe2a <_ZN7DemoApp9configureEv>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    Stack::instance.configure();
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	88 df       	rcall	.-240    	; 0x107a <_ZN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9configureEv>
    116a:	78 94       	sei
    116c:	83 b7       	in	r24, 0x33	; 51

    // enable interrupts
    sei();
    116e:	81 7f       	andi	r24, 0xF1	; 241

    // select sleep mode
    set_sleep_mode(SLEEP_MODE_IDLE);
    1170:	83 bf       	out	0x33, r24	; 51
    1172:	83 b7       	in	r24, 0x33	; 51
    1174:	81 60       	ori	r24, 0x01	; 1

    // enter infinite loop: processing is interrupt controlled from now on
    for (;;)
    {
        // enter sleep until interrupt wakes us up
        sleep_mode();
    1176:	83 bf       	out	0x33, r24	; 51
    1178:	88 95       	sleep
    117a:	83 b7       	in	r24, 0x33	; 51
    117c:	8e 7f       	andi	r24, 0xFE	; 254
    117e:	83 bf       	out	0x33, r24	; 51
    1180:	80 91 12 01 	lds	r24, 0x0112
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
bool StackBase<T, PDI, PDO, SpiSsHndlr>::canRunUserCode(const Parameter*& lastWrittenParameter)
{
    // allow execution of user code?
    if (!_runUserCode)
    1184:	80 ff       	sbrs	r24, 0
    1186:	f5 cf       	rjmp	.-22     	; 0x1172 <main+0x2a>
    1188:	8e 7f       	andi	r24, 0xFE	; 254
    118a:	80 93 12 01 	sts	0x0112, r24
        return false;

    // reset flag
    _runUserCode = false;
    118e:	81 ff       	sbrs	r24, 1
    1190:	06 c0       	rjmp	.+12     	; 0x119e <main+0x56>

    // test for parameter write access
    if (_prmWriteAvailable)
    1192:	8d 7f       	andi	r24, 0xFD	; 253
    1194:	80 93 12 01 	sts	0x0112, r24
    {
        lastWrittenParameter = &_parameterWrite;

        // reset write access
        _prmWriteAvailable = false;
    1198:	69 e0       	ldi	r22, 0x09	; 9
    119a:	71 e0       	ldi	r23, 0x01	; 1
    _runUserCode = false;

    // test for parameter write access
    if (_prmWriteAvailable)
    {
        lastWrittenParameter = &_parameterWrite;
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <main+0x5a>
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
        // reset write access
        _prmWriteAvailable = false;
    }
    else
    {
        lastWrittenParameter = NULL;
    11a2:	80 91 6c 00 	lds	r24, 0x006C

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::stopInterrupt()
{
    PCMSK1 &= ~(_BV(PCINT8));
    11a6:	8e 7f       	andi	r24, 0xFE	; 254
    11a8:	80 93 6c 00 	sts	0x006C, r24
    11ac:	86 e4       	ldi	r24, 0x46	; 70
    11ae:	91 e0       	ldi	r25, 0x01	; 1
        // check if it's time to run user code
        const Stack::Parameter* paramWrite;
        if (Stack::instance.canRunUserCode(paramWrite))
        {
            Stack::instance.stopInterrupt();
            theApp.run(paramWrite);
    11b0:	31 df       	rcall	.-414    	; 0x1014 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi1ELi1E16DefaultSsHandlerE9ParameterE>
    11b2:	80 91 6c 00 	lds	r24, 0x006C
    11b6:	81 60       	ori	r24, 0x01	; 1

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::restartInterrupt()
{
    PCMSK1 |= _BV(PCINT8);
    11b8:	80 93 6c 00 	sts	0x006C, r24
    11bc:	7d dd       	rcall	.-1286   	; 0xcb8 <__vector_4>
    11be:	d9 cf       	rjmp	.-78     	; 0x1172 <main+0x2a>

000011c0 <__tablejump2__>:
    11c0:	ee 0f       	add	r30, r30

    // call ISR handler
    PCINT1_vect();
    11c2:	ff 1f       	adc	r31, r31
    11c4:	05 90       	lpm	r0, Z+
    11c6:	f4 91       	lpm	r31, Z
    11c8:	e0 2d       	mov	r30, r0
    11ca:	09 94       	ijmp

000011cc <memcpy_P>:
    11cc:	fb 01       	movw	r30, r22
    11ce:	dc 01       	movw	r26, r24
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <memcpy_P+0xa>
    11d2:	05 90       	lpm	r0, Z+
    11d4:	0d 92       	st	X+, r0
    11d6:	41 50       	subi	r20, 0x01	; 1
    11d8:	50 40       	sbci	r21, 0x00	; 0
    11da:	d8 f7       	brcc	.-10     	; 0x11d2 <memcpy_P+0x6>
    11dc:	08 95       	ret

000011de <_exit>:
    11de:	f8 94       	cli

000011e0 <__stop_program>:
    11e0:	ff cf       	rjmp	.-2      	; 0x11e0 <__stop_program>
