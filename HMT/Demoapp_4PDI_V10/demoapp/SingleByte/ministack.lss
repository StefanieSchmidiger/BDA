
ministack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800100  00800100  00001356  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .signature    00000003  00840000  00840000  00001359  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      00000030  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f8  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000851b  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000143c  00000000  00000000  000099df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f7d  00000000  00000000  0000ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000298  00000000  00000000  0000bd98  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002b9a  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002172  00000000  00000000  0000ebca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000200  00000000  00000000  00010d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e8 c0       	rjmp	.+464    	; 0x1d2 <__ctors_end>
       2:	00 00       	nop
       4:	03 c1       	rjmp	.+518    	; 0x20c <__bad_interrupt>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__bad_interrupt>
       a:	00 00       	nop
       c:	ff c0       	rjmp	.+510    	; 0x20c <__bad_interrupt>
       e:	00 00       	nop
      10:	4e c6       	rjmp	.+3228   	; 0xcae <__vector_4>
      12:	00 00       	nop
      14:	fb c0       	rjmp	.+502    	; 0x20c <__bad_interrupt>
      16:	00 00       	nop
      18:	f9 c0       	rjmp	.+498    	; 0x20c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f7 c0       	rjmp	.+494    	; 0x20c <__bad_interrupt>
      1e:	00 00       	nop
      20:	f5 c0       	rjmp	.+490    	; 0x20c <__bad_interrupt>
      22:	00 00       	nop
      24:	f3 c0       	rjmp	.+486    	; 0x20c <__bad_interrupt>
      26:	00 00       	nop
      28:	f1 c0       	rjmp	.+482    	; 0x20c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ef c0       	rjmp	.+478    	; 0x20c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ed c0       	rjmp	.+474    	; 0x20c <__bad_interrupt>
      32:	00 00       	nop
      34:	eb c0       	rjmp	.+470    	; 0x20c <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2b c2       	rjmp	.+1110   	; 0x494 <__vector_15>
      3e:	00 00       	nop
      40:	e5 c0       	rjmp	.+458    	; 0x20c <__bad_interrupt>
      42:	00 00       	nop
      44:	e3 c0       	rjmp	.+454    	; 0x20c <__bad_interrupt>
      46:	00 00       	nop
      48:	e1 c0       	rjmp	.+450    	; 0x20c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	df c0       	rjmp	.+446    	; 0x20c <__bad_interrupt>
      4e:	00 00       	nop
      50:	dd c0       	rjmp	.+442    	; 0x20c <__bad_interrupt>
      52:	00 00       	nop
      54:	db c0       	rjmp	.+438    	; 0x20c <__bad_interrupt>
      56:	00 00       	nop
      58:	d9 c0       	rjmp	.+434    	; 0x20c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d7 c0       	rjmp	.+430    	; 0x20c <__bad_interrupt>
      5e:	00 00       	nop
      60:	d5 c0       	rjmp	.+426    	; 0x20c <__bad_interrupt>
      62:	00 00       	nop
      64:	d3 c0       	rjmp	.+422    	; 0x20c <__bad_interrupt>
      66:	00 00       	nop
      68:	08 04       	cpc	r0, r8
      6a:	e9 02       	muls	r30, r25
      6c:	e9 02       	muls	r30, r25
      6e:	cb 02       	muls	r28, r27
      70:	eb 02       	muls	r30, r27
      72:	25 03       	mulsu	r18, r21
      74:	4f 03       	fmul	r20, r23
      76:	92 03       	fmuls	r17, r18
      78:	b8 03       	fmulsu	r19, r16
      7a:	b8 03       	fmulsu	r19, r16
      7c:	e3 03       	fmuls	r22, r19
      7e:	f2 03       	fmuls	r23, r18
      80:	2c 05       	cpc	r18, r12
      82:	3b 04       	cpc	r3, r11
      84:	3b 04       	cpc	r3, r11
      86:	1d 04       	cpc	r1, r13
      88:	3d 04       	cpc	r3, r13
      8a:	77 04       	cpc	r7, r7
      8c:	a1 04       	cpc	r10, r1
      8e:	e4 04       	cpc	r14, r4
      90:	06 05       	cpc	r16, r6
      92:	06 05       	cpc	r16, r6
      94:	06 05       	cpc	r16, r6
      96:	16 05       	cpc	r17, r6
      98:	52 06       	cpc	r5, r18
      9a:	5f 05       	cpc	r21, r15
      9c:	5f 05       	cpc	r21, r15
      9e:	41 05       	cpc	r20, r1
      a0:	61 05       	cpc	r22, r1
      a2:	9b 05       	cpc	r25, r11
      a4:	c5 05       	cpc	r28, r5
      a6:	08 06       	cpc	r0, r24
      a8:	2a 06       	cpc	r2, r26
      aa:	2a 06       	cpc	r2, r26
      ac:	2a 06       	cpc	r2, r26
      ae:	3a 06       	cpc	r3, r26

000000b0 <__trampolines_end>:
      b0:	2d 3c       	cpi	r18, 0xCD	; 205
      b2:	0c 1d       	adc	r16, r12
      b4:	3f 2e       	mov	r3, r31
      b6:	1e 0f       	add	r17, r30
      b8:	0f 1e       	adc	r0, r31
      ba:	2e 3f       	cpi	r18, 0xFE	; 254
      bc:	1d 0c       	add	r1, r13
      be:	3c 2d       	mov	r19, r12
      c0:	39 28       	or	r3, r9
      c2:	18 09       	sbc	r17, r8
      c4:	2b 3a       	cpi	r18, 0xAB	; 171
      c6:	0a 1b       	sub	r16, r26
      c8:	1b 0a       	sbc	r1, r27
      ca:	3a 2b       	or	r19, r26
      cc:	09 18       	sub	r0, r9
      ce:	28 39       	cpi	r18, 0x98	; 152
      d0:	09 18       	sub	r0, r9
      d2:	28 39       	cpi	r18, 0x98	; 152
      d4:	1b 0a       	sbc	r1, r27
      d6:	3a 2b       	or	r19, r26
      d8:	2b 3a       	cpi	r18, 0xAB	; 171
      da:	0a 1b       	sub	r16, r26
      dc:	39 28       	or	r3, r9
      de:	18 09       	sbc	r17, r8
      e0:	1d 0c       	add	r1, r13
      e2:	3c 2d       	mov	r19, r12
      e4:	0f 1e       	adc	r0, r31
      e6:	2e 3f       	cpi	r18, 0xFE	; 254
      e8:	3f 2e       	mov	r3, r31
      ea:	1e 0f       	add	r17, r30
      ec:	2d 3c       	cpi	r18, 0xCD	; 205
      ee:	0c 1d       	adc	r16, r12
      f0:	35 24       	eor	r3, r5
      f2:	14 05       	cpc	r17, r4
      f4:	27 36       	cpi	r18, 0x67	; 103
      f6:	06 17       	cp	r16, r22
      f8:	17 06       	cpc	r1, r23
      fa:	36 27       	eor	r19, r22
      fc:	05 14       	cp	r0, r5
      fe:	24 35       	cpi	r18, 0x54	; 84
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	00 11       	cpse	r16, r0
     104:	33 22       	and	r3, r19
     106:	12 03       	mulsu	r17, r18
     108:	03 12       	cpse	r0, r19
     10a:	22 33       	cpi	r18, 0x32	; 50
     10c:	11 00       	.word	0x0011	; ????
     10e:	30 21       	and	r19, r0
     110:	11 00       	.word	0x0011	; ????
     112:	30 21       	and	r19, r0
     114:	03 12       	cpse	r0, r19
     116:	22 33       	cpi	r18, 0x32	; 50
     118:	33 22       	and	r3, r19
     11a:	12 03       	mulsu	r17, r18
     11c:	21 30       	cpi	r18, 0x01	; 1
     11e:	00 11       	cpse	r16, r0
     120:	05 14       	cp	r0, r5
     122:	24 35       	cpi	r18, 0x54	; 84
     124:	17 06       	cpc	r1, r23
     126:	36 27       	eor	r19, r22
     128:	27 36       	cpi	r18, 0x67	; 103
     12a:	06 17       	cp	r16, r22
     12c:	35 24       	eor	r3, r5
     12e:	14 05       	cpc	r17, r4
	...

000001b0 <_ZZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18configureStackBaseEvE19directDefaultConfig>:
     1b0:	00 00 1e 08 11 c3 00 01 a6 12 34 56 00 00 00 00     ..........4V....
	...

000001d0 <__ctors_start>:
     1d0:	f4 06       	cpc	r15, r20

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d8 e0       	ldi	r29, 0x08	; 8
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_clear_bss>:
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ab 34       	cpi	r26, 0x4B	; 75
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>

000001ee <__do_global_ctors>:
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c9 ee       	ldi	r28, 0xE9	; 233
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	04 c0       	rjmp	.+8      	; 0x1fe <__do_global_ctors+0x10>
     1f6:	21 97       	sbiw	r28, 0x01	; 1
     1f8:	fe 01       	movw	r30, r28
     1fa:	0e 94 40 09 	call	0x1280	; 0x1280 <__tablejump2__>
     1fe:	c8 3e       	cpi	r28, 0xE8	; 232
     200:	d1 07       	cpc	r29, r17
     202:	c9 f7       	brne	.-14     	; 0x1f6 <__do_global_ctors+0x8>
     204:	0e 94 04 09 	call	0x1208	; 0x1208 <main>
     208:	0c 94 4f 09 	jmp	0x129e	; 0x129e <_exit>

0000020c <__bad_interrupt>:
     20c:	f9 ce       	rjmp	.-526    	; 0x0 <__vectors>

0000020e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3>:
template <class T, int PDI, int PDO, class SpiSsHndlr>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::odRead(uint8_t channel, uint8_t address)
{
    uint8_t data;

    switch (channel)
     20e:	80 32       	cpi	r24, 0x20	; 32
     210:	19 f0       	breq	.+6      	; 0x218 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3+0xa>
     212:	80 34       	cpi	r24, 0x40	; 64
     214:	31 f0       	breq	.+12     	; 0x222 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3+0x14>
     216:	0d c0       	rjmp	.+26     	; 0x232 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3+0x24>
    {
    case IoLink::MC_CHNL_PAGE:  // Direct parameter page channel
        data = directParameter[address];
     218:	e6 2f       	mov	r30, r22
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	e9 5d       	subi	r30, 0xD9	; 217
     21e:	fe 4f       	sbci	r31, 0xFE	; 254
     220:	06 c0       	rjmp	.+12     	; 0x22e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3+0x20>
        break;

    case IoLink::MC_CHNL_DIAG:  // Diagnosis channel
        if (address > 6)
     222:	67 30       	cpi	r22, 0x07	; 7
     224:	38 f4       	brcc	.+14     	; 0x234 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3+0x26>
            break;

        data = eventPage[address];
     226:	e6 2f       	mov	r30, r22
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	e1 5e       	subi	r30, 0xE1	; 225
     22c:	fe 4f       	sbci	r31, 0xFE	; 254
     22e:	90 81       	ld	r25, Z
     230:	01 c0       	rjmp	.+2      	; 0x234 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3+0x26>
        break;

    default:            // SPDU and process data not handled
//        ASSERT(address == IoLink::MC_ADDR_ISDU_IDLE1 || address == IoLink::MC_ADDR_ISDU_IDLE2);
        data = 0;
     232:	90 e0       	ldi	r25, 0x00	; 0
    }

    return data;
}
     234:	89 2f       	mov	r24, r25
     236:	08 95       	ret

00000238 <_ZN15StackSingleByte12restartTimerEv.isra.1.constprop.8>:
     * Restarts a stopped timer
     * 
     */
    void inline restartTimer()
    {
        if (TCCR0B == 0)
     238:	85 b5       	in	r24, 0x25	; 37
     23a:	81 11       	cpse	r24, r1
     23c:	03 c0       	rjmp	.+6      	; 0x244 <_ZN15StackSingleByte12restartTimerEv.isra.1.constprop.8+0xc>
           TCCR0B = _tccr0bRecord;          
     23e:	80 91 1d 01 	lds	r24, 0x011D
     242:	85 bd       	out	0x25, r24	; 37
     244:	08 95       	ret

00000246 <_ZN6IoLink17calculateChecksumEhh>:
            0x11, 0x00, 0x30, 0x21, 0x03, 0x12, 0x22, 0x33, 0x33, 0x22, 0x12, 0x03, 0x21, 0x30, 0x00, 0x11,
            0x05, 0x14, 0x24, 0x35, 0x17, 0x06, 0x36, 0x27, 0x27, 0x36, 0x06, 0x17, 0x35, 0x24, 0x14, 0x05
        };

        // include CKT octet with Checksum bits (0..6) set to "0" (see A.1.6)
        ckt &= CKT_TYPE_MASK;
     246:	60 7c       	andi	r22, 0xC0	; 192
        checksum8 ^= ckt;
     248:	86 27       	eor	r24, r22

        // fold checksum8 at 0x80
        if (checksum8 >= 0x80)
     24a:	87 fd       	sbrc	r24, 7
        {
            checksum8 = ~checksum8;
     24c:	80 95       	com	r24
            checksum8 = ((checksum8 >> 1) & 0xf8) | (checksum8 & 0x07);
        }
#endif

        // calculate result checksum and combine with type bits (7..8) in original CKT
        ckt |=  pgm_read_byte(&checksum6[checksum8]);
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e0 55       	subi	r30, 0x50	; 80
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	84 91       	lpm	r24, Z

        return ckt;
    }
     258:	86 2b       	or	r24, r22
     25a:	08 95       	ret

0000025c <_ZN15StackSingleByte25handleFirstOperatingModesEv>:
uint8_t   eventPage[8];          //!< event buffer

StackSingleByte StackSingleByte::instance;
//------------------------------------------------------------------------------
StackSingleByte::HandlerResult StackSingleByte::handleFirstOperatingModes()
{
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	fc 01       	movw	r30, r24
    // 
    uint8_t status;

    //  state machine
    switch (_frameState)
     264:	84 89       	ldd	r24, Z+20	; 0x14
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	39 f0       	breq	.+14     	; 0x278 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x1c>
     26a:	08 f4       	brcc	.+2      	; 0x26e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x12>
     26c:	81 c0       	rjmp	.+258    	; 0x370 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x114>
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	09 f4       	brne	.+2      	; 0x274 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x18>
     272:	47 c0       	rjmp	.+142    	; 0x302 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xa6>
            }
        }
        break;
        
    default:
        return ResultIllegalMessageType;
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	82 c0       	rjmp	.+260    	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     278:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     27a:	80 e1       	ldi	r24, 0x10	; 16
     27c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x22>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     284:	ce b5       	in	r28, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     286:	ce bd       	out	0x2e, r28	; 46
        
    case FRAME_RCV_MC:      // expecting MC octet
        {
            // request MC octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     288:	8c 2f       	mov	r24, r28
     28a:	8c 70       	andi	r24, 0x0C	; 12
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	11 f0       	breq	.+4      	; 0x294 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
                return ResultChecksumError;
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	74 c0       	rjmp	.+232    	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x38>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     29a:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     29c:	2a 9a       	sbi	0x05, 2	; 5

            // get master sequence control (MC) octet
            _mc = registerReadLast();
     29e:	86 8b       	std	Z+22, r24	; 0x16

            // ensure that we are in IoLinkListen from here on
            if (_ddlMode < IoLink::DDL_MODE_STARTUP)
     2a0:	80 81       	ld	r24, Z
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	68 f4       	brcc	.+26     	; 0x2c0 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x64>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2a6:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2a8:	82 e8       	ldi	r24, 0x82	; 130
     2aa:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2ac:	0d b4       	in	r0, 0x2d	; 45
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x50>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2b2:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2b4:	88 e0       	ldi	r24, 0x08	; 8
     2b6:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2b8:	0d b4       	in	r0, 0x2d	; 45
     2ba:	07 fe       	sbrs	r0, 7
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x5c>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2be:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     2c0:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2c2:	83 e8       	ldi	r24, 0x83	; 131
     2c4:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2c6:	0d b4       	in	r0, 0x2d	; 45
     2c8:	07 fe       	sbrs	r0, 7
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x6a>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     2cc:	8e b5       	in	r24, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     2d2:	0d b4       	in	r0, 0x2d	; 45
     2d4:	07 fe       	sbrs	r0, 7
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x76>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     2d8:	2a 9a       	sbi	0x05, 2	; 5
            // signal ready to receive next byte
            registerWrite(REG_LINK, LINK_END);

            // precalculate the checksum, assuming no returned PD or OD frames
            _cks = IoLink::calculateChecksum(0, (_processDataIn.isValid ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     2da:	85 81       	ldd	r24, Z+5	; 0x05
     2dc:	81 11       	cpse	r24, r1
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x88>
     2e0:	60 e4       	ldi	r22, 0x40	; 64
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x8a>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	8f 01       	movw	r16, r30
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	ad df       	rcall	.-166    	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     2ec:	f8 01       	movw	r30, r16
     2ee:	80 8f       	std	Z+24, r24	; 0x18
     2f0:	85 b5       	in	r24, 0x25	; 37

            // disable the cycle timer (Timer0): it will be restarted after this frame...
            _tccr0bRecord = TCCR0B;
     2f2:	84 8f       	std	Z+28, r24	; 0x1c
     2f4:	15 bc       	out	0x25, r1	; 37
            TCCR0B = 0;
     2f6:	85 b3       	in	r24, 0x15	; 21

            // ...and clear any outstanding timer interrupt requests
            TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     2f8:	87 60       	ori	r24, 0x07	; 7
     2fa:	85 bb       	out	0x15, r24	; 21
     2fc:	82 e0       	ldi	r24, 0x02	; 2

            // enter next state
            _frameState = FRAME_RCV_CKT;
     2fe:	84 8b       	std	Z+20, r24	; 0x14
     300:	2f c0       	rjmp	.+94     	; 0x360 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x104>
        }
        break;
     302:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     304:	80 e1       	ldi	r24, 0x10	; 16
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     306:	8e bd       	out	0x2e, r24	; 46
     308:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     30a:	07 fe       	sbrs	r0, 7
     30c:	fd cf       	rjmp	.-6      	; 0x308 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xac>
     30e:	ce b5       	in	r28, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     310:	ce bd       	out	0x2e, r28	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     312:	8c 2f       	mov	r24, r28

    case FRAME_RCV_CKT: // expecting CKT octet in read access
        {
            // request CKT octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     314:	8c 70       	andi	r24, 0x0C	; 12
     316:	84 30       	cpi	r24, 0x04	; 4
     318:	09 f0       	breq	.+2      	; 0x31c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     31a:	ba cf       	rjmp	.-140    	; 0x290 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x34>
     31c:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     31e:	07 fe       	sbrs	r0, 7
     320:	fd cf       	rjmp	.-6      	; 0x31c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xc0>
     322:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     324:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     326:	87 8b       	std	Z+23, r24	; 0x17
                return ResultChecksumError;

            // get CKT octet
            _ckt = registerReadLast();
     328:	96 89       	ldd	r25, Z+22	; 0x16

            // prepare checksum-8
            _checksum8 = _mc;
     32a:	91 8f       	std	Z+25, r25	; 0x19
     32c:	13 8e       	std	Z+27, r1	; 0x1b
            _i = 0;
     32e:	93 e0       	ldi	r25, 0x03	; 3

            // indicate continuation required
            _frameState     = FRAME_RCV_CKT_CONT;
     330:	94 8b       	std	Z+20, r25	; 0x14
     332:	91 e0       	ldi	r25, 0x01	; 1
            _frameTypeOk    = true;
     334:	95 8f       	std	Z+29, r25	; 0x1d
     336:	90 81       	ld	r25, Z
            _receiveDdlMode = _ddlMode; 
     338:	95 8b       	std	Z+21, r25	; 0x15
     33a:	80 7c       	andi	r24, 0xC0	; 192
     33c:	93 30       	cpi	r25, 0x03	; 3
            
            switch (_ddlMode)
     33e:	29 f0       	breq	.+10     	; 0x34a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     340:	94 30       	cpi	r25, 0x04	; 4
     342:	19 f4       	brne	.+6      	; 0x34a <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xee>
     344:	80 38       	cpi	r24, 0x80	; 128
            break;

        case IoLink::MSEQCAP_OP_CODE_4:
            if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE >= 3 || PD_IN_SIZE >= 3))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     346:	19 f4       	brne	.+6      	; 0x34e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xf2>
     348:	15 c0       	rjmp	.+42     	; 0x374 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     34a:	88 23       	and	r24, r24
    switch (DDL_MODE)
    {
        // see table A.7
    case IoLink::DDL_MODE_IDLE:
    case IoLink::DDL_MODE_STARTUP:
        if (frameType == IoLink::CKT_TYPE_0) 
     34c:	99 f0       	breq	.+38     	; 0x374 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x118>
     34e:	15 8e       	std	Z+29, r1	; 0x1d
                 if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
                    return ResultSuccess;
                break;
            }
            
            _frameTypeOk    = false;
     350:	81 11       	cpse	r24, r1
     352:	02 c0       	rjmp	.+4      	; 0x358 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0xfc>
     354:	82 e0       	ldi	r24, 0x02	; 2
            
            // look for a viable alternative
            if (validateFrameType<IoLink::DDL_MODE_STARTUP>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_STARTUP;
     356:	03 c0       	rjmp	.+6      	; 0x35e <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x102>
     358:	80 38       	cpi	r24, 0x80	; 128
            break;

        case IoLink::MSEQCAP_OP_CODE_4:
            if ((StackT::REVISION_ID == IoLink::REVISION_ID_1_1) && (PD_OUT_SIZE >= 3 || PD_IN_SIZE >= 3))
            {
                if (frameType == IoLink::CKT_TYPE_2)
     35a:	71 f4       	brne	.+28     	; 0x378 <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x11c>
     35c:	84 e0       	ldi	r24, 0x04	; 4
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else if (validateFrameType<IoLink::DDL_MODE_OPERATE>(_ckt))
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
     35e:	85 8b       	std	Z+21, r24	; 0x15
     360:	8c 2f       	mov	r24, r28
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
     362:	80 95       	com	r24
     364:	88 1f       	adc	r24, r24
     366:	88 27       	eor	r24, r24
     368:	88 1f       	adc	r24, r24
     36a:	88 0f       	add	r24, r24
     36c:	88 0f       	add	r24, r24
     36e:	06 c0       	rjmp	.+12     	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     370:	84 e0       	ldi	r24, 0x04	; 4

    //  state machine
    switch (_frameState)
    {
    case FRAME_RESET:
        return ResultPhyReset;
     372:	04 c0       	rjmp	.+8      	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     374:	80 e0       	ldi	r24, 0x00	; 0
            
            switch (_ddlMode)
            {
            case IoLink::DDL_MODE_PREOPERATE:
                if (validateFrameType<IoLink::DDL_MODE_PREOPERATE>(_ckt))
                    return ResultSuccess;
     376:	02 c0       	rjmp	.+4      	; 0x37c <_ZN15StackSingleByte25handleFirstOperatingModesEv+0x120>
     378:	82 e0       	ldi	r24, 0x02	; 2
            {
                _receiveDdlMode = IoLink::DDL_MODE_OPERATE;    
            }
            else
            {
                _frameState     = FRAME_RCV_CKT;
     37a:	84 8b       	std	Z+20, r24	; 0x14
     37c:	cf 91       	pop	r28

    if (!(status & STATUS_RST))
        return ResultPhyReset;
    else
        return ResultSuccess;
}
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv>:
     384:	fc 01       	movw	r30, r24
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     386:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     388:	80 e8       	ldi	r24, 0x80	; 128
     38a:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     38c:	0d b4       	in	r0, 0x2d	; 45
     38e:	07 fe       	sbrs	r0, 7
     390:	fd cf       	rjmp	.-6      	; 0x38c <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x8>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     396:	0d b4       	in	r0, 0x2d	; 45
     398:	07 fe       	sbrs	r0, 7
     39a:	fd cf       	rjmp	.-6      	; 0x396 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x12>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     39c:	82 e3       	ldi	r24, 0x32	; 50
     39e:	8e bd       	out	0x2e, r24	; 46
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3a0:	81 85       	ldd	r24, Z+9	; 0x09
     3a2:	80 fd       	sbrc	r24, 0
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x26>
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x28>
     3aa:	92 e0       	ldi	r25, 0x02	; 2
    
    // REG_CTL
    StackBase::registerWriteNext(StackT::PHY_CTL_SCT | 
                                 StackT::PHY_CTL_MODE | 
                                 Phy::CTL_SIO_MODE | 
                                 driveModeBits());
     3ac:	9c 60       	ori	r25, 0x0C	; 12
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x2a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3b4:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3b6:	0d b4       	in	r0, 0x2d	; 45
     3b8:	07 fe       	sbrs	r0, 7
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x32>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3bc:	1e bc       	out	0x2e, r1	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3be:	0d b4       	in	r0, 0x2d	; 45
     3c0:	07 fe       	sbrs	r0, 7
     3c2:	fd cf       	rjmp	.-6      	; 0x3be <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x3a>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3c8:	0d b4       	in	r0, 0x2d	; 45
     3ca:	07 fe       	sbrs	r0, 7
     3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x44>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3ce:	1e bc       	out	0x2e, r1	; 46
    
    // REG_STATUS (HMT7742) / REG_TEMP (HMT7748) - (dummy write)
    Phy::registerWriteNext(0);        
    
    // LEDs
    StackBase::registerWriteNext(this->_ledRegister);        
     3d0:	81 89       	ldd	r24, Z+17	; 0x11
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3d2:	0d b4       	in	r0, 0x2d	; 45
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x4e>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     3d8:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     3da:	0d b4       	in	r0, 0x2d	; 45
     3dc:	07 fe       	sbrs	r0, 7
     3de:	fd cf       	rjmp	.-6      	; 0x3da <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv+0x56>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     3e0:	2a 9a       	sbi	0x05, 2	; 5
#endif

    registerWriteDone();

    // set the stack to SIO mode to be in sync with the PHY.
    _ddlMode = IoLink::DDL_MODE_IDLE;
     3e2:	10 82       	st	Z, r1
     3e4:	08 95       	ret

000003e6 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv>:
      };
}

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::onTimer0CompBInterrupt()
     3e6:	fc 01       	movw	r30, r24
{
    // decrement hiZ timer
    if (_hiZCounter >= 0 && --_hiZCounter < 0)
     3e8:	80 85       	ldd	r24, Z+8	; 0x08
     3ea:	87 fd       	sbrc	r24, 7
     3ec:	1a c0       	rjmp	.+52     	; 0x422 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x3c>
     3ee:	81 50       	subi	r24, 0x01	; 1
     3f0:	80 87       	std	Z+8, r24	; 0x08
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	b1 f4       	brne	.+44     	; 0x422 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x3c>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     3f6:	81 85       	ldd	r24, Z+9	; 0x09
     3f8:	80 fd       	sbrc	r24, 0
     3fa:	20 c0       	rjmp	.+64     	; 0x43c <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x56>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
     3fe:	9f ef       	ldi	r25, 0xFF	; 255
     400:	90 87       	std	Z+8, r25	; 0x08
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	90 93 00 01 	sts	0x0100, r25
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
     408:	8c 60       	ori	r24, 0x0C	; 12
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     40a:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     40c:	92 e8       	ldi	r25, 0x82	; 130
     40e:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     410:	0d b4       	in	r0, 0x2d	; 45
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x2a>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     416:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     418:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     41a:	0d b4       	in	r0, 0x2d	; 45
     41c:	07 fe       	sbrs	r0, 7
     41e:	fd cf       	rjmp	.-6      	; 0x41a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x34>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     420:	2a 9a       	sbi	0x05, 2	; 5
    {
        stack().setSioActive();
    }

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
     422:	26 85       	ldd	r18, Z+14	; 0x0e
     424:	37 85       	ldd	r19, Z+15	; 0x0f
     426:	83 89       	ldd	r24, Z+19	; 0x13
     428:	21 15       	cp	r18, r1
     42a:	31 05       	cpc	r19, r1
     42c:	49 f0       	breq	.+18     	; 0x440 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x5a>
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	31 09       	sbc	r19, r1
     432:	37 87       	std	Z+15, r19	; 0x0f
     434:	26 87       	std	Z+14, r18	; 0x0e
     436:	23 2b       	or	r18, r19
     438:	31 f0       	breq	.+12     	; 0x446 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x60>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x5a>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	df cf       	rjmp	.-66     	; 0x3fe <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x18>
        }
    }
    else
    {
        // too late for user code
        _runUserCode = false;
     440:	8e 7f       	andi	r24, 0xFE	; 254
     442:	83 8b       	std	Z+19, r24	; 0x13
     444:	08 95       	ret

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
    {
        // user code may run
        _runUserCode = true;
     446:	81 60       	ori	r24, 0x01	; 1
     448:	83 8b       	std	Z+19, r24	; 0x13

        // restart cycle timer
        _cycleTimer = _cyclePeriod;
     44a:	84 85       	ldd	r24, Z+12	; 0x0c
     44c:	95 85       	ldd	r25, Z+13	; 0x0d
     44e:	97 87       	std	Z+15, r25	; 0x0f
     450:	86 87       	std	Z+14, r24	; 0x0e

        // advance the count of dead cycles
        if (_deadCycleCtr != 0xff)
     452:	87 81       	ldd	r24, Z+7	; 0x07
     454:	8f 3f       	cpi	r24, 0xFF	; 255
     456:	11 f0       	breq	.+4      	; 0x45c <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x76>
        {
            ++_deadCycleCtr;
     458:	8f 5f       	subi	r24, 0xFF	; 255
     45a:	87 83       	std	Z+7, r24	; 0x07
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
     45c:	82 89       	ldd	r24, Z+18	; 0x12
     45e:	88 23       	and	r24, r24
     460:	21 f0       	breq	.+8      	; 0x46a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x84>
     462:	81 50       	subi	r24, 0x01	; 1
     464:	82 8b       	std	Z+18, r24	; 0x12
     466:	88 23       	and	r24, r24
     468:	91 f0       	breq	.+36     	; 0x48e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0xa8>
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
        }

        // update LED register if necessary
        if (_savedLedRegister != _ledRegister)
     46a:	81 89       	ldd	r24, Z+17	; 0x11
     46c:	90 89       	ldd	r25, Z+16	; 0x10
     46e:	98 17       	cp	r25, r24
     470:	81 f0       	breq	.+32     	; 0x492 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0xac>
        {
            _savedLedRegister = _ledRegister;
     472:	80 8b       	std	Z+16, r24	; 0x10
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     474:	2a 98       	cbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     476:	96 e8       	ldi	r25, 0x86	; 134
     478:	9e bd       	out	0x2e, r25	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x94>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     480:	9e b5       	in	r25, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     482:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     484:	0d b4       	in	r0, 0x2d	; 45
     486:	07 fe       	sbrs	r0, 7
     488:	fd cf       	rjmp	.-6      	; 0x484 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x9e>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     48a:	2a 9a       	sbi	0x05, 2	; 5
     48c:	08 95       	ret
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
     48e:	10 82       	st	Z, r1
     490:	ec cf       	rjmp	.-40     	; 0x46a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv+0x84>
     492:	08 95       	ret

00000494 <__vector_15>:
    }
}

// Interrupt on Timer0 compare match B
ISR(TIMER0_COMPB_vect)
{
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	6f 93       	push	r22
     4a8:	7f 93       	push	r23
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
    StackSingleByte::instance.onTimer0CompBInterrupt();
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	95 df       	rcall	.-214    	; 0x3e6 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv>
     4bc:	ff 91       	pop	r31
}
     4be:	ef 91       	pop	r30
     4c0:	bf 91       	pop	r27
     4c2:	af 91       	pop	r26
     4c4:	9f 91       	pop	r25
     4c6:	8f 91       	pop	r24
     4c8:	7f 91       	pop	r23
     4ca:	6f 91       	pop	r22
     4cc:	5f 91       	pop	r21
     4ce:	4f 91       	pop	r20
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh>:
     4de:	cf 93       	push	r28
}


//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
     4e0:	fc 01       	movw	r30, r24
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
     4e2:	17 82       	std	Z+7, r1	; 0x07

    // disable timer
    TCCR0B = 0;
     4e4:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
     4e6:	16 bc       	out	0x26, r1	; 38

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
     4e8:	85 b3       	in	r24, 0x15	; 21
     4ea:	87 60       	ori	r24, 0x07	; 7
     4ec:	85 bb       	out	0x15, r24	; 21
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
     4ee:	84 85       	ldd	r24, Z+12	; 0x0c
     4f0:	95 85       	ldd	r25, Z+13	; 0x0d
     4f2:	00 97       	sbiw	r24, 0x00	; 0
     4f4:	49 f5       	brne	.+82     	; 0x548 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x6a>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     4f6:	20 81       	ld	r18, Z
     4f8:	24 30       	cpi	r18, 0x04	; 4
     4fa:	21 f4       	brne	.+8      	; 0x504 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x26>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     4fc:	20 91 28 01 	lds	r18, 0x0128
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     500:	21 11       	cpse	r18, r1
     502:	02 c0       	rjmp	.+4      	; 0x508 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x2a>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     504:	20 91 29 01 	lds	r18, 0x0129
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     508:	24 30       	cpi	r18, 0x04	; 4
     50a:	e0 f0       	brcs	.+56     	; 0x544 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x66>
     50c:	20 34       	cpi	r18, 0x40	; 64
     50e:	18 f4       	brcc	.+6      	; 0x516 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x38>
     510:	82 2f       	mov	r24, r18
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	17 c0       	rjmp	.+46     	; 0x544 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x66>
     516:	32 2f       	mov	r19, r18
     518:	30 7c       	andi	r19, 0xC0	; 192
     51a:	30 34       	cpi	r19, 0x40	; 64
     51c:	49 f4       	brne	.+18     	; 0x530 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x52>
     51e:	84 e0       	ldi	r24, 0x04	; 4
     520:	28 9f       	mul	r18, r24
     522:	90 01       	movw	r18, r0
     524:	11 24       	eor	r1, r1
     526:	33 27       	eor	r19, r19
     528:	c9 01       	movw	r24, r18
     52a:	80 5c       	subi	r24, 0xC0	; 192
     52c:	9f 4f       	sbci	r25, 0xFF	; 255
     52e:	0a c0       	rjmp	.+20     	; 0x544 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x66>
     530:	30 38       	cpi	r19, 0x80	; 128
     532:	41 f4       	brne	.+16     	; 0x544 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x66>
     534:	2f 73       	andi	r18, 0x3F	; 63
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	28 9f       	mul	r18, r24
     53a:	90 01       	movw	r18, r0
     53c:	11 24       	eor	r1, r1
     53e:	c9 01       	movw	r24, r18
     540:	80 5c       	subi	r24, 0xC0	; 192
     542:	9e 4f       	sbci	r25, 0xFE	; 254
     544:	95 87       	std	Z+13, r25	; 0x0d
     546:	84 87       	std	Z+12, r24	; 0x0c
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
     548:	86 2f       	mov	r24, r22
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	97 87       	std	Z+15, r25	; 0x0f
     550:	86 87       	std	Z+14, r24	; 0x0e

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	80 93 6e 00 	sts	0x006E, r24

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	84 bd       	out	0x24, r24	; 36

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
     55c:	94 e6       	ldi	r25, 0x64	; 100
     55e:	97 bd       	out	0x27, r25	; 39
     560:	98 bd       	out	0x28, r25	; 40
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
     562:	85 bd       	out	0x25, r24	; 37
#else
# error Unsupported CPU frequency
#endif
    }

    if (delay == 0)
     564:	61 11       	cpse	r22, r1
     566:	05 c0       	rjmp	.+10     	; 0x572 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh+0x94>
     568:	cf 01       	movw	r24, r30
      ATOMIC_BLOCK( ATOMIC_RESTORESTATE)
     56a:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     56c:	f8 94       	cli
      {
        onTimer0CompBInterrupt();
     56e:	3b df       	rcall	.-394    	; 0x3e6 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE22onTimer0CompBInterruptEv>
     570:	cf bf       	out	0x3f, r28	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     572:	cf 91       	pop	r28
      };
}
     574:	08 95       	ret

00000576 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv>:
     576:	1f 93       	push	r17
        return ResultSuccess;
}

//------------------------------------------------------------------------------
template <IoLink::DeviceDLMode DDL_MODE>
StackSingleByte::HandlerResult StackSingleByte::handleOperatingMode()
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     57c:	dc 01       	movw	r26, r24
     57e:	54 96       	adiw	r26, 0x14	; 20
     580:	ec 91       	ld	r30, X
     582:	4e 2f       	mov	r20, r30
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	4c 30       	cpi	r20, 0x0C	; 12
     588:	51 05       	cpc	r21, r1
     58a:	18 f5       	brcc	.+70     	; 0x5d2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     58c:	ec 01       	movw	r28, r24
     58e:	fa 01       	movw	r30, r20
     590:	ec 5c       	subi	r30, 0xCC	; 204
     592:	ff 4f       	sbci	r31, 0xFF	; 255
     594:	75 c6       	rjmp	.+3306   	; 0x1280 <__tablejump2__>
     596:	8e 89       	ldd	r24, Y+22	; 0x16
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     598:	87 fd       	sbrc	r24, 7
     59a:	10 c0       	rjmp	.+32     	; 0x5bc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x46>
     59c:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     59e:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5a0:	8e bd       	out	0x2e, r24	; 46
     5a2:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5a4:	07 fe       	sbrs	r0, 7
     5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     5a8:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5ac:	8e bd       	out	0x2e, r24	; 46
     5ae:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5b0:	07 fe       	sbrs	r0, 7
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x38>
     5b4:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     5b6:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     5b8:	8c 8b       	std	Y+20, r24	; 0x14
     5ba:	28 c1       	rjmp	.+592    	; 0x80c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x296>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     5bc:	6f 89       	ldd	r22, Y+23	; 0x17
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     5be:	89 8d       	ldd	r24, Y+25	; 0x19
     5c0:	42 de       	rcall	.-892    	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     5c2:	9f 89       	ldd	r25, Y+23	; 0x17
     5c4:	89 17       	cp	r24, r25
     5c6:	11 f0       	breq	.+4      	; 0x5cc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x56>
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	23 c1       	rjmp	.+582    	; 0x812 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x29c>
                    return ResultChecksumError;
     5cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     5ce:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     5d0:	a9 c0       	rjmp	.+338    	; 0x724 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ae>
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	1e c1       	rjmp	.+572    	; 0x812 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x29c>
                    return ResultIllegalMessageType;
     5d6:	2a 98       	cbi	0x05, 2	; 5
     5d8:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     5da:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5dc:	0d b4       	in	r0, 0x2d	; 45
     5de:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x66>
     5e2:	1e b5       	in	r17, 0x2e	; 46
     5e4:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5e6:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     5e8:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     5ea:	84 30       	cpi	r24, 0x04	; 4
     5ec:	69 f7       	brne	.-38     	; 0x5c8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     5ee:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     5f2:	0d b4       	in	r0, 0x2d	; 45
     5f4:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     5f8:	9e b5       	in	r25, 0x2e	; 46
     5fa:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     5fc:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     5fe:	fd 1f       	adc	r31, r29
     600:	93 8f       	std	Z+27, r25	; 0x1b
     602:	89 8d       	ldd	r24, Y+25	; 0x19
     604:	89 27       	eor	r24, r25
     606:	89 8f       	std	Y+25, r24	; 0x19
     608:	9b 8d       	ldd	r25, Y+27	; 0x1b
     60a:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     60c:	9b 8f       	std	Y+27, r25	; 0x1b
     60e:	9e 89       	ldd	r25, Y+22	; 0x16
     610:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     612:	11 c0       	rjmp	.+34     	; 0x636 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     614:	2a 98       	cbi	0x05, 2	; 5
     616:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     618:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     61a:	0d b4       	in	r0, 0x2d	; 45
     61c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     61e:	fd cf       	rjmp	.-6      	; 0x61a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     620:	8e b5       	in	r24, 0x2e	; 46
     622:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     624:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     626:	0d b4       	in	r0, 0x2d	; 45
     628:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     62a:	fd cf       	rjmp	.-6      	; 0x626 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     62c:	2a 9a       	sbi	0x05, 2	; 5
     62e:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     630:	8c 8b       	std	Y+20, r24	; 0x14
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     632:	1b 8e       	std	Y+27, r1	; 0x1b
     634:	e9 c0       	rjmp	.+466    	; 0x808 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x292>
                _i = 0;
     636:	6f 89       	ldd	r22, Y+23	; 0x17
     638:	06 de       	rcall	.-1012   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     63a:	9f 89       	ldd	r25, Y+23	; 0x17
     63c:	89 13       	cpse	r24, r25
     63e:	c4 cf       	rjmp	.-120    	; 0x5c8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     640:	8d 8d       	ldd	r24, Y+29	; 0x1d
     642:	88 23       	and	r24, r24
     644:	31 f2       	breq	.-116    	; 0x5d2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     646:	1b 8e       	std	Y+27, r1	; 0x1b
     648:	6d c0       	rjmp	.+218    	; 0x724 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ae>
     64a:	2a 98       	cbi	0x05, 2	; 5
                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     64c:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     64e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     650:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     652:	07 fe       	sbrs	r0, 7
     654:	fd cf       	rjmp	.-6      	; 0x650 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xda>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     656:	1e b5       	in	r17, 0x2e	; 46
     658:	1e bd       	out	0x2e, r17	; 46
     65a:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     65c:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     65e:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     660:	09 f0       	breq	.+2      	; 0x664 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xee>
     662:	b2 cf       	rjmp	.-156    	; 0x5c8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xee>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     66a:	9e b5       	in	r25, 0x2e	; 46
     66c:	2a 9a       	sbi	0x05, 2	; 5
     66e:	9a 8f       	std	Y+26, r25	; 0x1a
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     670:	89 8d       	ldd	r24, Y+25	; 0x19
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     672:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     674:	89 8f       	std	Y+25, r24	; 0x19
     676:	9b 8d       	ldd	r25, Y+27	; 0x1b
     678:	9f 5f       	subi	r25, 0xFF	; 255
     67a:	9b 8f       	std	Y+27, r25	; 0x1b

            if (++_i < odCount) // get next OD octet
     67c:	91 11       	cpse	r25, r1
     67e:	37 c0       	rjmp	.+110    	; 0x6ee <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x178>
     680:	2a 98       	cbi	0x05, 2	; 5
     682:	83 e8       	ldi	r24, 0x83	; 131
     684:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     686:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     688:	07 fe       	sbrs	r0, 7
     68a:	fd cf       	rjmp	.-6      	; 0x686 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x110>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     68c:	8e b5       	in	r24, 0x2e	; 46
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     692:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     694:	07 fe       	sbrs	r0, 7
     696:	fd cf       	rjmp	.-6      	; 0x692 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x11c>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     698:	2a 9a       	sbi	0x05, 2	; 5
     69a:	86 e0       	ldi	r24, 0x06	; 6
     69c:	90 c0       	rjmp	.+288    	; 0x7be <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x248>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     69e:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     6a0:	80 e1       	ldi	r24, 0x10	; 16
     6a2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     6a4:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x12e>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6aa:	1e b5       	in	r17, 0x2e	; 46
     6ac:	1e bd       	out	0x2e, r17	; 46
     6ae:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     6b0:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6b2:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x142>
     6b6:	88 cf       	rjmp	.-240    	; 0x5c8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     6b8:	0d b4       	in	r0, 0x2d	; 45
     6ba:	07 fe       	sbrs	r0, 7
     6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x142>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6be:	9e b5       	in	r25, 0x2e	; 46
     6c0:	2a 9a       	sbi	0x05, 2	; 5
     6c2:	89 8d       	ldd	r24, Y+25	; 0x19
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     6c4:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     6c6:	89 8f       	std	Y+25, r24	; 0x19
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     6c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6ca:	9f 5f       	subi	r25, 0xFF	; 255
     6cc:	9b 8f       	std	Y+27, r25	; 0x1b

            if (++_i < odCount) // get next PD octet
     6ce:	91 11       	cpse	r25, r1
     6d0:	0e c0       	rjmp	.+28     	; 0x6ee <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x178>
     6d2:	2a 98       	cbi	0x05, 2	; 5
     6d4:	83 e8       	ldi	r24, 0x83	; 131
     6d6:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     6d8:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x162>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6de:	8e b5       	in	r24, 0x2e	; 46
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     6e4:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     6e6:	07 fe       	sbrs	r0, 7
     6e8:	fd cf       	rjmp	.-6      	; 0x6e4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x16e>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     6ea:	2a 9a       	sbi	0x05, 2	; 5
     6ec:	8d c0       	rjmp	.+282    	; 0x808 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x292>
     6ee:	6f 89       	ldd	r22, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     6f0:	aa dd       	rcall	.-1196   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     6f2:	9f 89       	ldd	r25, Y+23	; 0x17
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     6f4:	89 13       	cpse	r24, r25
     6f6:	68 cf       	rjmp	.-304    	; 0x5c8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     6f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6fa:	88 23       	and	r24, r24
     6fc:	09 f4       	brne	.+2      	; 0x700 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x18a>
     6fe:	69 cf       	rjmp	.-302    	; 0x5d2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     700:	8e 89       	ldd	r24, Y+22	; 0x16
     702:	9a 8d       	ldd	r25, Y+26	; 0x1a
     704:	28 2f       	mov	r18, r24
     706:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     708:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     70a:	31 f0       	breq	.+12     	; 0x718 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1a2>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     70c:	8b 89       	ldd	r24, Y+19	; 0x13
     70e:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     710:	8b 8b       	std	Y+19, r24	; 0x13
     712:	1b 8e       	std	Y+27, r1	; 0x1b
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     714:	19 8e       	std	Y+25, r1	; 0x19
     716:	2c c0       	rjmp	.+88     	; 0x770 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1fa>
     718:	8f 71       	andi	r24, 0x1F	; 31
                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     71a:	8a 87       	std	Y+10, r24	; 0x0a
                _checksum8 = 0;
     71c:	9b 87       	std	Y+11, r25	; 0x0b
                goto frame_snd_pd;
     71e:	8b 89       	ldd	r24, Y+19	; 0x13
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     720:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     722:	f6 cf       	rjmp	.-20     	; 0x710 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x19a>
        _parameterWrite.value = data;
     724:	19 8e       	std	Y+25, r1	; 0x19
        _prmWriteAvailable = true;
     726:	8e 89       	ldd	r24, Y+22	; 0x16
     728:	68 2f       	mov	r22, r24
     72a:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     72c:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     72e:	6f dd       	rcall	.-1314   	; 0x20e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     730:	2a 98       	cbi	0x05, 2	; 5
     732:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     734:	9e bd       	out	0x2e, r25	; 46
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     73a:	fd cf       	rjmp	.-6      	; 0x736 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1c0>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     73c:	1e b5       	in	r17, 0x2e	; 46
     73e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     740:	0d b4       	in	r0, 0x2d	; 45
     742:	07 fe       	sbrs	r0, 7
     744:	fd cf       	rjmp	.-6      	; 0x740 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ca>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     746:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     748:	99 8d       	ldd	r25, Y+25	; 0x19
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     74a:	89 27       	eor	r24, r25
     74c:	89 8f       	std	Y+25, r24	; 0x19
     74e:	9d 81       	ldd	r25, Y+5	; 0x05
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     750:	91 11       	cpse	r25, r1

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     752:	02 c0       	rjmp	.+4      	; 0x758 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1e2>
     754:	60 e4       	ldi	r22, 0x40	; 64
     756:	01 c0       	rjmp	.+2      	; 0x75a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1e4>

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	75 dd       	rcall	.-1302   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     75c:	88 8f       	std	Y+24, r24	; 0x18
     75e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     760:	8f 5f       	subi	r24, 0xFF	; 255
     762:	8b 8f       	std	Y+27, r24	; 0x1b
     764:	81 11       	cpse	r24, r1
     766:	02 c0       	rjmp	.+4      	; 0x76c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1f6>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     768:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     76a:	29 c0       	rjmp	.+82     	; 0x7be <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x248>
     76c:	1b 8e       	std	Y+27, r1	; 0x1b
     76e:	29 c0       	rjmp	.+82     	; 0x7c2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x24c>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	88 23       	and	r24, r24
            {
                _frameState = FRAME_SND_ODX;
     774:	31 f0       	breq	.+12     	; 0x782 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x20c>
     776:	8b 8d       	ldd	r24, Y+27	; 0x1b
            }
            else
            {
                _i = 0;
     778:	fe 01       	movw	r30, r28
     77a:	e8 0f       	add	r30, r24
frame_snd_pd:
        // with frame type 2, send the process data
        if (pdInSize > 0)
        {
            // get process data
            const uint8_t pd = _processDataIn.isValid ? _processDataIn.buffer[_i] : 0;
     77c:	f1 1d       	adc	r31, r1
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	01 c0       	rjmp	.+2      	; 0x784 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x20e>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2a 98       	cbi	0x05, 2	; 5
     786:	80 e9       	ldi	r24, 0x90	; 144
     788:	8e bd       	out	0x2e, r24	; 46
     78a:	0d b4       	in	r0, 0x2d	; 45
     78c:	07 fe       	sbrs	r0, 7
     78e:	fd cf       	rjmp	.-6      	; 0x78a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x214>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     790:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     792:	9e bd       	out	0x2e, r25	; 46
     794:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     796:	07 fe       	sbrs	r0, 7
     798:	fd cf       	rjmp	.-6      	; 0x794 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x21e>
     79a:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     79c:	89 8d       	ldd	r24, Y+25	; 0x19
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     79e:	89 27       	eor	r24, r25
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7a0:	89 8f       	std	Y+25, r24	; 0x19
     7a2:	9d 81       	ldd	r25, Y+5	; 0x05
     7a4:	91 11       	cpse	r25, r1
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x236>

            // send process data
            status = registerWrite(REG_FR0, pd);

            // update checksum-8
            _checksum8 ^= pd;
     7a8:	60 e4       	ldi	r22, 0x40	; 64
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x238>
     7ac:	60 e0       	ldi	r22, 0x00	; 0

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     7ae:	4b dd       	rcall	.-1386   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     7b0:	88 8f       	std	Y+24, r24	; 0x18
     7b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	8b 8f       	std	Y+27, r24	; 0x1b
     7b8:	84 30       	cpi	r24, 0x04	; 4
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x24c>
     7bc:	8a e0       	ldi	r24, 0x0A	; 10

            // update checksum-8
            _checksum8 ^= pd;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     7be:	8c 8b       	std	Y+20, r24	; 0x14
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            if (++_i == pdInSize)
     7c0:	23 c0       	rjmp	.+70     	; 0x808 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x292>
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	fc cf       	rjmp	.-8      	; 0x7be <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x248>
     7c6:	88 8d       	ldd	r24, Y+24	; 0x18
     7c8:	2a 98       	cbi	0x05, 2	; 5
            {
                // enter next state
                _frameState = FRAME_SND_CKS;
     7ca:	90 e9       	ldi	r25, 0x90	; 144
     7cc:	9e bd       	out	0x2e, r25	; 46
     7ce:	0d b4       	in	r0, 0x2d	; 45
            }
            else
            {
                _frameState = FRAME_SND_PD;
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x258>
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     7d4:	1e b5       	in	r17, 0x2e	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     7d6:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7d8:	0d b4       	in	r0, 0x2d	; 45
     7da:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x262>
     7de:	2a 9a       	sbi	0x05, 2	; 5
     7e0:	8b e0       	ldi	r24, 0x0B	; 11
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     7e2:	ed cf       	rjmp	.-38     	; 0x7be <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x248>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7e4:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7e6:	83 e8       	ldi	r24, 0x83	; 131
     7e8:	8e bd       	out	0x2e, r24	; 46
     7ea:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     7ec:	07 fe       	sbrs	r0, 7

            // wait for completion
            _frameState = FRAME_SND_DONE;
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x274>
     7f0:	1e b5       	in	r17, 0x2e	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     7f4:	8e bd       	out	0x2e, r24	; 46
     7f6:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x280>
     7fc:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     800:	8c 8b       	std	Y+20, r24	; 0x14
     802:	60 e0       	ldi	r22, 0x00	; 0
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     804:	ce 01       	movw	r24, r28
     806:	6b de       	rcall	.-810    	; 0x4de <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh>
     808:	17 ff       	sbrs	r17, 7
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     80a:	02 c0       	rjmp	.+4      	; 0x810 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x29a>
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	01 c0       	rjmp	.+2      	; 0x812 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x29c>
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     818:	08 95       	ret

0000081a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv>:
     81a:	1f 93       	push	r17
        return ResultPhyReset;
    else
        return ResultSuccess;
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     820:	dc 01       	movw	r26, r24
    else
        return ResultSuccess;
}
     822:	54 96       	adiw	r26, 0x14	; 20
     824:	ec 91       	ld	r30, X
     826:	4e 2f       	mov	r20, r30
     828:	50 e0       	ldi	r21, 0x00	; 0
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     82a:	4c 30       	cpi	r20, 0x0C	; 12
     82c:	51 05       	cpc	r21, r1
     82e:	18 f5       	brcc	.+70     	; 0x876 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     830:	ec 01       	movw	r28, r24
     832:	fa 01       	movw	r30, r20
     834:	e0 5c       	subi	r30, 0xC0	; 192
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	23 c5       	rjmp	.+2630   	; 0x1280 <__tablejump2__>
     83a:	8e 89       	ldd	r24, Y+22	; 0x16
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     83c:	87 fd       	sbrc	r24, 7
     83e:	10 c0       	rjmp	.+32     	; 0x860 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x46>
     840:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     842:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     844:	8e bd       	out	0x2e, r24	; 46
     846:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     848:	07 fe       	sbrs	r0, 7
     84a:	fd cf       	rjmp	.-6      	; 0x846 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     84c:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     84e:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     850:	8e bd       	out	0x2e, r24	; 46
     852:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     854:	07 fe       	sbrs	r0, 7
     856:	fd cf       	rjmp	.-6      	; 0x852 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x38>
     858:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     85a:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     85c:	8c 8b       	std	Y+20, r24	; 0x14
     85e:	fa c0       	rjmp	.+500    	; 0xa54 <__stack+0x155>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     860:	6f 89       	ldd	r22, Y+23	; 0x17
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     862:	89 8d       	ldd	r24, Y+25	; 0x19
     864:	f0 dc       	rcall	.-1568   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     866:	9f 89       	ldd	r25, Y+23	; 0x17
     868:	89 17       	cp	r24, r25
     86a:	11 f0       	breq	.+4      	; 0x870 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x56>
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	f5 c0       	rjmp	.+490    	; 0xa5a <__stack+0x15b>
                    return ResultChecksumError;
     870:	8d 8d       	ldd	r24, Y+29	; 0x1d
     872:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     874:	a9 c0       	rjmp	.+338    	; 0x9c8 <__stack+0xc9>
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	f0 c0       	rjmp	.+480    	; 0xa5a <__stack+0x15b>
                    return ResultIllegalMessageType;
     87a:	2a 98       	cbi	0x05, 2	; 5
     87c:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     87e:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     880:	0d b4       	in	r0, 0x2d	; 45
     882:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     884:	fd cf       	rjmp	.-6      	; 0x880 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x66>
     886:	1e b5       	in	r17, 0x2e	; 46
     888:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     88a:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     88c:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	69 f7       	brne	.-38     	; 0x86c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     892:	eb 8d       	ldd	r30, Y+27	; 0x1b
     894:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     896:	0d b4       	in	r0, 0x2d	; 45
     898:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     89a:	fd cf       	rjmp	.-6      	; 0x896 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     89c:	9e b5       	in	r25, 0x2e	; 46
     89e:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8a0:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8a2:	fd 1f       	adc	r31, r29
     8a4:	93 8f       	std	Z+27, r25	; 0x1b
     8a6:	89 8d       	ldd	r24, Y+25	; 0x19
     8a8:	89 27       	eor	r24, r25
     8aa:	89 8f       	std	Y+25, r24	; 0x19
     8ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8ae:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     8b0:	9b 8f       	std	Y+27, r25	; 0x1b
     8b2:	9e 89       	ldd	r25, Y+22	; 0x16
     8b4:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     8b6:	11 c0       	rjmp	.+34     	; 0x8da <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     8b8:	2a 98       	cbi	0x05, 2	; 5
     8ba:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8bc:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8be:	0d b4       	in	r0, 0x2d	; 45
     8c0:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     8c4:	8e b5       	in	r24, 0x2e	; 46
     8c6:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     8c8:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8ca:	0d b4       	in	r0, 0x2d	; 45
     8cc:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     8d0:	2a 9a       	sbi	0x05, 2	; 5
     8d2:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     8d4:	8c 8b       	std	Y+20, r24	; 0x14
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     8d6:	1b 8e       	std	Y+27, r1	; 0x1b
     8d8:	bb c0       	rjmp	.+374    	; 0xa50 <__stack+0x151>
                _i = 0;
     8da:	6f 89       	ldd	r22, Y+23	; 0x17
     8dc:	b4 dc       	rcall	.-1688   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     8de:	9f 89       	ldd	r25, Y+23	; 0x17
     8e0:	89 13       	cpse	r24, r25
     8e2:	c4 cf       	rjmp	.-120    	; 0x86c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     8e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8e6:	88 23       	and	r24, r24
     8e8:	31 f2       	breq	.-116    	; 0x876 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     8ea:	1b 8e       	std	Y+27, r1	; 0x1b
     8ec:	6d c0       	rjmp	.+218    	; 0x9c8 <__stack+0xc9>
     8ee:	2a 98       	cbi	0x05, 2	; 5
                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     8f0:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     8f2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     8f4:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     8f6:	07 fe       	sbrs	r0, 7
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xda>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     8fa:	1e b5       	in	r17, 0x2e	; 46
     8fc:	1e bd       	out	0x2e, r17	; 46
     8fe:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     900:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     902:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     904:	09 f0       	breq	.+2      	; 0x908 <__stack+0x9>
     906:	b2 cf       	rjmp	.-156    	; 0x86c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     908:	0d b4       	in	r0, 0x2d	; 45
     90a:	07 fe       	sbrs	r0, 7
     90c:	fd cf       	rjmp	.-6      	; 0x908 <__stack+0x9>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     90e:	9e b5       	in	r25, 0x2e	; 46
     910:	2a 9a       	sbi	0x05, 2	; 5
     912:	9a 8f       	std	Y+26, r25	; 0x1a
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     914:	89 8d       	ldd	r24, Y+25	; 0x19
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     916:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     918:	89 8f       	std	Y+25, r24	; 0x19
     91a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     91c:	9f 5f       	subi	r25, 0xFF	; 255
     91e:	9b 8f       	std	Y+27, r25	; 0x1b

            if (++_i < odCount) // get next OD octet
     920:	91 11       	cpse	r25, r1
     922:	37 c0       	rjmp	.+110    	; 0x992 <__stack+0x93>
     924:	2a 98       	cbi	0x05, 2	; 5
     926:	83 e8       	ldi	r24, 0x83	; 131
     928:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     92a:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <__stack+0x2b>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     930:	8e b5       	in	r24, 0x2e	; 46
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     936:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     938:	07 fe       	sbrs	r0, 7
     93a:	fd cf       	rjmp	.-6      	; 0x936 <__stack+0x37>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     93c:	2a 9a       	sbi	0x05, 2	; 5
     93e:	86 e0       	ldi	r24, 0x06	; 6
     940:	73 c0       	rjmp	.+230    	; 0xa28 <__stack+0x129>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     942:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     944:	80 e1       	ldi	r24, 0x10	; 16
     946:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     948:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     94a:	07 fe       	sbrs	r0, 7
     94c:	fd cf       	rjmp	.-6      	; 0x948 <__stack+0x49>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     94e:	1e b5       	in	r17, 0x2e	; 46
     950:	1e bd       	out	0x2e, r17	; 46
     952:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     954:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     956:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
     95a:	88 cf       	rjmp	.-240    	; 0x86c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     95c:	0d b4       	in	r0, 0x2d	; 45
     95e:	07 fe       	sbrs	r0, 7
     960:	fd cf       	rjmp	.-6      	; 0x95c <__stack+0x5d>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     962:	9e b5       	in	r25, 0x2e	; 46
     964:	2a 9a       	sbi	0x05, 2	; 5
     966:	89 8d       	ldd	r24, Y+25	; 0x19
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     968:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     96a:	89 8f       	std	Y+25, r24	; 0x19
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     96c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     96e:	9f 5f       	subi	r25, 0xFF	; 255
     970:	9b 8f       	std	Y+27, r25	; 0x1b

            if (++_i < odCount) // get next PD octet
     972:	91 11       	cpse	r25, r1
     974:	0e c0       	rjmp	.+28     	; 0x992 <__stack+0x93>
     976:	2a 98       	cbi	0x05, 2	; 5
     978:	83 e8       	ldi	r24, 0x83	; 131
     97a:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     97c:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     97e:	07 fe       	sbrs	r0, 7
     980:	fd cf       	rjmp	.-6      	; 0x97c <__stack+0x7d>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     982:	8e b5       	in	r24, 0x2e	; 46
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     988:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     98a:	07 fe       	sbrs	r0, 7
     98c:	fd cf       	rjmp	.-6      	; 0x988 <__stack+0x89>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     98e:	2a 9a       	sbi	0x05, 2	; 5
     990:	5f c0       	rjmp	.+190    	; 0xa50 <__stack+0x151>
     992:	6f 89       	ldd	r22, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     994:	58 dc       	rcall	.-1872   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     996:	9f 89       	ldd	r25, Y+23	; 0x17
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     998:	89 13       	cpse	r24, r25
     99a:	68 cf       	rjmp	.-304    	; 0x86c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     99c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     99e:	88 23       	and	r24, r24
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	69 cf       	rjmp	.-302    	; 0x876 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     9a4:	8e 89       	ldd	r24, Y+22	; 0x16
     9a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9a8:	28 2f       	mov	r18, r24
     9aa:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     9ac:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     9ae:	31 f0       	breq	.+12     	; 0x9bc <__stack+0xbd>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     9b4:	8b 8b       	std	Y+19, r24	; 0x13
     9b6:	1b 8e       	std	Y+27, r1	; 0x1b
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     9b8:	19 8e       	std	Y+25, r1	; 0x19
     9ba:	28 c0       	rjmp	.+80     	; 0xa0c <__stack+0x10d>
     9bc:	8f 71       	andi	r24, 0x1F	; 31
                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     9be:	8a 87       	std	Y+10, r24	; 0x0a
                _checksum8 = 0;
     9c0:	9b 87       	std	Y+11, r25	; 0x0b
                goto frame_snd_pd;
     9c2:	8b 89       	ldd	r24, Y+19	; 0x13
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     9c4:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     9c6:	f6 cf       	rjmp	.-20     	; 0x9b4 <__stack+0xb5>
        _parameterWrite.value = data;
     9c8:	19 8e       	std	Y+25, r1	; 0x19
        _prmWriteAvailable = true;
     9ca:	8e 89       	ldd	r24, Y+22	; 0x16
     9cc:	68 2f       	mov	r22, r24
     9ce:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     9d0:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     9d2:	1d dc       	rcall	.-1990   	; 0x20e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     9d4:	2a 98       	cbi	0x05, 2	; 5
     9d6:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     9d8:	9e bd       	out	0x2e, r25	; 46
     9da:	0d b4       	in	r0, 0x2d	; 45
     9dc:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     9de:	fd cf       	rjmp	.-6      	; 0x9da <__stack+0xdb>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9e0:	1e b5       	in	r17, 0x2e	; 46
     9e2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9e4:	0d b4       	in	r0, 0x2d	; 45
     9e6:	07 fe       	sbrs	r0, 7
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <__stack+0xe5>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     9ea:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     9ec:	99 8d       	ldd	r25, Y+25	; 0x19
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     9ee:	89 27       	eor	r24, r25
     9f0:	89 8f       	std	Y+25, r24	; 0x19
     9f2:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     9f4:	28 dc       	rcall	.-1968   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     9f6:	88 8f       	std	Y+24, r24	; 0x18
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     9fc:	8b 8f       	std	Y+27, r24	; 0x1b
     9fe:	81 11       	cpse	r24, r1
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x107>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     a02:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     a04:	11 c0       	rjmp	.+34     	; 0xa28 <__stack+0x129>
     a06:	1b 8e       	std	Y+27, r1	; 0x1b
     a08:	89 e0       	ldi	r24, 0x09	; 9
     a0a:	0e c0       	rjmp	.+28     	; 0xa28 <__stack+0x129>
     a0c:	88 8d       	ldd	r24, Y+24	; 0x18
            {
                _frameState = FRAME_SND_ODX;
     a0e:	2a 98       	cbi	0x05, 2	; 5
     a10:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     a12:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     a14:	0d b4       	in	r0, 0x2d	; 45
     a16:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <__stack+0x115>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a1a:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a1c:	8e bd       	out	0x2e, r24	; 46
     a1e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a20:	07 fe       	sbrs	r0, 7
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <__stack+0x11f>
     a24:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a26:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a28:	8c 8b       	std	Y+20, r24	; 0x14
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a2a:	12 c0       	rjmp	.+36     	; 0xa50 <__stack+0x151>
     a2c:	2a 98       	cbi	0x05, 2	; 5
     a2e:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a30:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
        }
        break;
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <__stack+0x133>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a38:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a3e:	0d b4       	in	r0, 0x2d	; 45
     a40:	07 fe       	sbrs	r0, 7
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <__stack+0x13f>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a44:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	8c 8b       	std	Y+20, r24	; 0x14
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	ce 01       	movw	r24, r28
     a4e:	47 dd       	rcall	.-1394   	; 0x4de <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     a50:	17 ff       	sbrs	r17, 7
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x159>
     a54:	80 e0       	ldi	r24, 0x00	; 0
            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
              
            // start user call-back timer
            startCallbackTimer();
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__stack+0x15b>
     a58:	84 e0       	ldi	r24, 0x04	; 4
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     a5e:	1f 91       	pop	r17
     a60:	08 95       	ret

00000a62 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     a66:	df 93       	push	r29
    else
        return ResultSuccess;
}
     a68:	dc 01       	movw	r26, r24
     a6a:	54 96       	adiw	r26, 0x14	; 20
     a6c:	ec 91       	ld	r30, X
     a6e:	4e 2f       	mov	r20, r30
    const int8_t odCount = getOdOctetCount<DDL_MODE>();
    const uint8_t pdInSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_IN_SIZE : 0;
    const uint8_t pdOutSize = DDL_MODE == IoLink::DDL_MODE_OPERATE ? PD_OUT_SIZE : 0;

    //  state machine
    switch (_frameState)
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	4c 30       	cpi	r20, 0x0C	; 12
     a74:	51 05       	cpc	r21, r1
     a76:	18 f5       	brcc	.+70     	; 0xabe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
     a78:	ec 01       	movw	r28, r24
     a7a:	fa 01       	movw	r30, r20
     a7c:	e4 5b       	subi	r30, 0xB4	; 180
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	ff c3       	rjmp	.+2046   	; 0x1280 <__tablejump2__>
     a82:	8e 89       	ldd	r24, Y+22	; 0x16
                registerWrite(REG_LINK, LINK_END);

                // expecting PDout data
                _frameState = FRAME_RCV_PD;               
            }
            else if (odCount > 0 && (_mc & IoLink::MC_RW_MASK) == IoLink::MC_WRITE)
     a84:	87 fd       	sbrc	r24, 7
     a86:	10 c0       	rjmp	.+32     	; 0xaa8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x46>
     a88:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     a8a:	83 e8       	ldi	r24, 0x83	; 131
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a8c:	8e bd       	out	0x2e, r24	; 46
     a8e:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a90:	07 fe       	sbrs	r0, 7
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x2c>
     a94:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     a96:	82 e0       	ldi	r24, 0x02	; 2
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     a98:	8e bd       	out	0x2e, r24	; 46
     a9a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     a9c:	07 fe       	sbrs	r0, 7
     a9e:	fd cf       	rjmp	.-6      	; 0xa9a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x38>
     aa0:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     aa2:	85 e0       	ldi	r24, 0x05	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     aa4:	8c 8b       	std	Y+20, r24	; 0x14
     aa6:	fc c0       	rjmp	.+504    	; 0xca0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x23e>
                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                goto frame_snd_od;
            }
        }
        break;
     aa8:	6f 89       	ldd	r22, Y+23	; 0x17
                _frameState = FRAME_RCV_OD0;
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     aaa:	89 8d       	ldd	r24, Y+25	; 0x19
     aac:	cc db       	rcall	.-2152   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     aae:	9f 89       	ldd	r25, Y+23	; 0x17
     ab0:	89 17       	cp	r24, r25
     ab2:	11 f0       	breq	.+4      	; 0xab8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x56>
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	f7 c0       	rjmp	.+494    	; 0xca6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x244>
                    return ResultChecksumError;
     ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     aba:	81 11       	cpse	r24, r1

                if (!_frameTypeOk)
     abc:	a9 c0       	rjmp	.+338    	; 0xc10 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ae>
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	f2 c0       	rjmp	.+484    	; 0xca6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x244>
                    return ResultIllegalMessageType;
     ac2:	2a 98       	cbi	0x05, 2	; 5
     ac4:	80 e1       	ldi	r24, 0x10	; 16
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     ac6:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ac8:	0d b4       	in	r0, 0x2d	; 45
     aca:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     acc:	fd cf       	rjmp	.-6      	; 0xac8 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x66>
     ace:	1e b5       	in	r17, 0x2e	; 46
     ad0:	1e bd       	out	0x2e, r17	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     ad2:	81 2f       	mov	r24, r17
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     ad4:	8c 70       	andi	r24, 0x0C	; 12
        
    case FRAME_RCV_PD:
        {
            // request PD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	69 f7       	brne	.-38     	; 0xab4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     ada:	eb 8d       	ldd	r30, Y+27	; 0x1b
     adc:	f0 e0       	ldi	r31, 0x00	; 0
                return ResultChecksumError;

            // get PD octet
            _checksum8 ^= _pdOut[_i] = registerReadLast();            
     ade:	0d b4       	in	r0, 0x2d	; 45
     ae0:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     ae2:	fd cf       	rjmp	.-6      	; 0xade <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x7c>
     ae4:	9e b5       	in	r25, 0x2e	; 46
     ae6:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     ae8:	ec 0f       	add	r30, r28
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     aea:	fd 1f       	adc	r31, r29
     aec:	93 8f       	std	Z+27, r25	; 0x1b
     aee:	89 8d       	ldd	r24, Y+25	; 0x19
     af0:	89 27       	eor	r24, r25
     af2:	89 8f       	std	Y+25, r24	; 0x19
     af4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     af6:	9f 5f       	subi	r25, 0xFF	; 255
            
            if (++_i < pdOutSize) // get next PD octet
     af8:	9b 8f       	std	Y+27, r25	; 0x1b
     afa:	9e 89       	ldd	r25, Y+22	; 0x16
     afc:	97 fd       	sbrc	r25, 7
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);
            }
            else if (odCount > 0 // check for OD data
     afe:	11 c0       	rjmp	.+34     	; 0xb22 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xc0>
     b00:	2a 98       	cbi	0x05, 2	; 5
     b02:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b04:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b06:	0d b4       	in	r0, 0x2d	; 45
     b08:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b0a:	fd cf       	rjmp	.-6      	; 0xb06 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xa4>
     b0c:	8e b5       	in	r24, 0x2e	; 46
     b0e:	82 e0       	ldi	r24, 0x02	; 2
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b10:	8e bd       	out	0x2e, r24	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b12:	0d b4       	in	r0, 0x2d	; 45
     b14:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b16:	fd cf       	rjmp	.-6      	; 0xb12 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xb0>
     b18:	2a 9a       	sbi	0x05, 2	; 5
     b1a:	85 e0       	ldi	r24, 0x05	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b1c:	8c 8b       	std	Y+20, r24	; 0x14
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                // expecting OD data
                _frameState = FRAME_RCV_OD0;
     b1e:	1b 8e       	std	Y+27, r1	; 0x1b
     b20:	bd c0       	rjmp	.+378    	; 0xc9c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x23a>
                _i = 0;
     b22:	6f 89       	ldd	r22, Y+23	; 0x17
     b24:	90 db       	rcall	.-2272   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
            }
            else // done receiving
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     b26:	9f 89       	ldd	r25, Y+23	; 0x17
     b28:	89 13       	cpse	r24, r25
     b2a:	c4 cf       	rjmp	.-120    	; 0xab4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b2e:	88 23       	and	r24, r24
     b30:	31 f2       	breq	.-116    	; 0xabe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     b32:	1b 8e       	std	Y+27, r1	; 0x1b
     b34:	6d c0       	rjmp	.+218    	; 0xc10 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ae>
     b36:	2a 98       	cbi	0x05, 2	; 5
                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     b38:	80 e1       	ldi	r24, 0x10	; 16
                goto frame_snd_od;
     b3a:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b3c:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b3e:	07 fe       	sbrs	r0, 7
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xda>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b42:	1e b5       	in	r17, 0x2e	; 46
     b44:	1e bd       	out	0x2e, r17	; 46
     b46:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b48:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b4a:	84 30       	cpi	r24, 0x04	; 4
        
    case FRAME_RCV_OD0:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     b4c:	09 f0       	breq	.+2      	; 0xb50 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xee>
     b4e:	b2 cf       	rjmp	.-156    	; 0xab4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     b50:	0d b4       	in	r0, 0x2d	; 45
     b52:	07 fe       	sbrs	r0, 7
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0xee>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b56:	9e b5       	in	r25, 0x2e	; 46
     b58:	2a 9a       	sbi	0x05, 2	; 5
     b5a:	9a 8f       	std	Y+26, r25	; 0x1a
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b5c:	89 8d       	ldd	r24, Y+25	; 0x19
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b5e:	89 27       	eor	r24, r25
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= _odOut = registerReadLast();
     b60:	89 8f       	std	Y+25, r24	; 0x19
     b62:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b64:	9f 5f       	subi	r25, 0xFF	; 255
     b66:	9b 8f       	std	Y+27, r25	; 0x1b

            if (++_i < odCount) // get next OD octet
     b68:	91 11       	cpse	r25, r1
     b6a:	37 c0       	rjmp	.+110    	; 0xbda <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x178>
     b6c:	2a 98       	cbi	0x05, 2	; 5
     b6e:	83 e8       	ldi	r24, 0x83	; 131
     b70:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b72:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b74:	07 fe       	sbrs	r0, 7
     b76:	fd cf       	rjmp	.-6      	; 0xb72 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x110>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b78:	8e b5       	in	r24, 0x2e	; 46
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b7e:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b80:	07 fe       	sbrs	r0, 7
     b82:	fd cf       	rjmp	.-6      	; 0xb7e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x11c>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b84:	2a 9a       	sbi	0x05, 2	; 5
     b86:	86 e0       	ldi	r24, 0x06	; 6
     b88:	73 c0       	rjmp	.+230    	; 0xc70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x20e>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     b8a:	2a 98       	cbi	0x05, 2	; 5
            {
                // signal ready to receive next byte
                registerWrite(REG_LINK, LINK_END);

                _frameState = FRAME_RCV_ODX;
     b8c:	80 e1       	ldi	r24, 0x10	; 16
     b8e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     b90:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b92:	07 fe       	sbrs	r0, 7
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x12e>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     b96:	1e b5       	in	r17, 0x2e	; 46
     b98:	1e bd       	out	0x2e, r17	; 46
     b9a:	81 2f       	mov	r24, r17
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     b9c:	8c 70       	andi	r24, 0x0C	; 12
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     b9e:	84 30       	cpi	r24, 0x04	; 4

    case FRAME_RCV_ODX:  // expecting on-demand data in write access
        {
            // request OD octet
            status = registerReadBegin(REG_FR0);
            if ((status & (STATUS_DAT | STATUS_CHK)) != STATUS_DAT)
     ba0:	09 f0       	breq	.+2      	; 0xba4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x142>
     ba2:	88 cf       	rjmp	.-240    	; 0xab4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     ba4:	0d b4       	in	r0, 0x2d	; 45
     ba6:	07 fe       	sbrs	r0, 7
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x142>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     baa:	9e b5       	in	r25, 0x2e	; 46
     bac:	2a 9a       	sbi	0x05, 2	; 5
     bae:	89 8d       	ldd	r24, Y+25	; 0x19
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     bb0:	89 27       	eor	r24, r25
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     bb2:	89 8f       	std	Y+25, r24	; 0x19
                return ResultChecksumError;

            // read OD octet
            _checksum8 ^= registerReadLast();
     bb4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bb6:	9f 5f       	subi	r25, 0xFF	; 255
     bb8:	9b 8f       	std	Y+27, r25	; 0x1b

            if (++_i < odCount) // get next PD octet
     bba:	91 11       	cpse	r25, r1
     bbc:	0e c0       	rjmp	.+28     	; 0xbda <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x178>
     bbe:	2a 98       	cbi	0x05, 2	; 5
     bc0:	83 e8       	ldi	r24, 0x83	; 131
     bc2:	8e bd       	out	0x2e, r24	; 46
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     bc4:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bc6:	07 fe       	sbrs	r0, 7
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x162>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bca:	8e b5       	in	r24, 0x2e	; 46
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     bd0:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     bd2:	07 fe       	sbrs	r0, 7
     bd4:	fd cf       	rjmp	.-6      	; 0xbd0 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x16e>
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     bd6:	2a 9a       	sbi	0x05, 2	; 5
     bd8:	61 c0       	rjmp	.+194    	; 0xc9c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x23a>
     bda:	6f 89       	ldd	r22, Y+23	; 0x17
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     bdc:	34 db       	rcall	.-2456   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>
     bde:	9f 89       	ldd	r25, Y+23	; 0x17
                registerWrite(REG_LINK, LINK_END);
            }
            else
            {
                // verify message checksum
                if (IoLink::calculateChecksum(_checksum8, _ckt) != _ckt)
     be0:	89 13       	cpse	r24, r25
     be2:	68 cf       	rjmp	.-304    	; 0xab4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x52>
     be4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     be6:	88 23       	and	r24, r24
     be8:	09 f4       	brne	.+2      	; 0xbec <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x18a>
     bea:	69 cf       	rjmp	.-302    	; 0xabe <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x5c>
                    return ResultChecksumError;

                if (!_frameTypeOk)
     bec:	8e 89       	ldd	r24, Y+22	; 0x16
     bee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bf0:	28 2f       	mov	r18, r24
     bf2:	20 76       	andi	r18, 0x60	; 96
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bf4:	20 32       	cpi	r18, 0x20	; 32
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
                odWrite(channel, address, _odOut);
     bf6:	31 f0       	breq	.+12     	; 0xc04 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1a2>

                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     bf8:	8b 89       	ldd	r24, Y+19	; 0x13
     bfa:	8d 7f       	andi	r24, 0xFD	; 253

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
     bfc:	8b 8b       	std	Y+19, r24	; 0x13
     bfe:	1b 8e       	std	Y+27, r1	; 0x1b
        _parameterWrite.value = data;
        _prmWriteAvailable = true;
    }
    else
    {
        _prmWriteAvailable = false;
     c00:	19 8e       	std	Y+25, r1	; 0x19
     c02:	28 c0       	rjmp	.+80     	; 0xc54 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1f2>
     c04:	8f 71       	andi	r24, 0x1F	; 31
                // commit process output data (use double-buffer and swap instead?)
                memcpy(_processDataOut.buffer, _pdOut, PD_OUT_SIZE);

                // immediately enter next state
                // _frameState = FRAME_SND_OD;
                _i = 0;
     c06:	8a 87       	std	Y+10, r24	; 0x0a
                _checksum8 = 0;
     c08:	9b 87       	std	Y+11, r25	; 0x0b
                goto frame_snd_pd;
     c0a:	8b 89       	ldd	r24, Y+19	; 0x13
                if (!_frameTypeOk)
                    return ResultIllegalMessageType;                    
                 
                // commit on-demand data
                const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
                const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     c0c:	82 60       	ori	r24, 0x02	; 2
void StackBase<T, PDI, PDO, SpiSsHndlr>::odWrite(uint8_t channel, uint8_t address, uint8_t data)
{
    if (channel == IoLink::MC_CHNL_PAGE)
    {
        // store data for use in application
        _parameterWrite.address = address;
     c0e:	f6 cf       	rjmp	.-20     	; 0xbfc <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x19a>
        _parameterWrite.value = data;
     c10:	19 8e       	std	Y+25, r1	; 0x19
        _prmWriteAvailable = true;
     c12:	8e 89       	ldd	r24, Y+22	; 0x16
     c14:	68 2f       	mov	r22, r24
     c16:	6f 71       	andi	r22, 0x1F	; 31
        break;

    case FRAME_SND_OD0:  // sending on-demand octet
frame_snd_od:
        // prepare checksum
        _checksum8 = 0;
     c18:	80 76       	andi	r24, 0x60	; 96

        if (odCount > 0)
        {
            // get access mode, channel and address from MC octet
            const uint8_t channel = _mc & IoLink::MC_CHANNEL_MASK;
     c1a:	f9 da       	rcall	.-2574   	; 0x20e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE6odReadEhh.isra.3>
            const uint8_t address = _mc & IoLink::MC_ADDRESS_MASK;
     c1c:	2a 98       	cbi	0x05, 2	; 5
     c1e:	90 e9       	ldi	r25, 0x90	; 144

            // get the data
            uint8_t odIn = odRead(channel, address);
     c20:	9e bd       	out	0x2e, r25	; 46
     c22:	0d b4       	in	r0, 0x2d	; 45
     c24:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c26:	fd cf       	rjmp	.-6      	; 0xc22 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1c0>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c28:	1e b5       	in	r17, 0x2e	; 46
     c2a:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c2c:	0d b4       	in	r0, 0x2d	; 45
     c2e:	07 fe       	sbrs	r0, 7
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ca>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c32:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c34:	99 8d       	ldd	r25, Y+25	; 0x19
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c36:	89 27       	eor	r24, r25
     c38:	89 8f       	std	Y+25, r24	; 0x19
     c3a:	60 e4       	ldi	r22, 0x40	; 64
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c3c:	04 db       	rcall	.-2552   	; 0x246 <_ZN6IoLink17calculateChecksumEhh>

            // send output on-demand data
            status = registerWrite(REG_FR0, odIn);

            // update checksum-8
            _checksum8 ^= odIn;
     c3e:	88 8f       	std	Y+24, r24	; 0x18
     c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c42:	8f 5f       	subi	r24, 0xFF	; 255

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));
     c44:	8b 8f       	std	Y+27, r24	; 0x1b
     c46:	81 11       	cpse	r24, r1
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1ec>

            // update checksum-8
            _checksum8 ^= odIn;

            // pre-calculate CKS
            _cks = IoLink::calculateChecksum(_checksum8, ((pdInSize > 0 && _processDataIn.isValid) ? 
     c4a:	88 e0       	ldi	r24, 0x08	; 8
                                                 IoLink::CKS_PD_VALID : IoLink::CKS_PD_INVALID));

            // enter next state
            if (++_i < odCount)
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x20e>
     c4e:	1b 8e       	std	Y+27, r1	; 0x1b
     c50:	89 e0       	ldi	r24, 0x09	; 9
     c52:	0e c0       	rjmp	.+28     	; 0xc70 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x20e>
     c54:	88 8d       	ldd	r24, Y+24	; 0x18
            {
                _frameState = FRAME_SND_ODX;
     c56:	2a 98       	cbi	0x05, 2	; 5
     c58:	90 e9       	ldi	r25, 0x90	; 144
            }
            else
            {
                _i = 0;
     c5a:	9e bd       	out	0x2e, r25	; 46
                _frameState = FRAME_SND_PD;
     c5c:	0d b4       	in	r0, 0x2d	; 45
     c5e:	07 fe       	sbrs	r0, 7
        //lint -fallthrough

    case FRAME_SND_CKS:     // CKS octet
        {
            // calculate and send CKS octet
            status = registerWrite(REG_FR0, _cks);
     c60:	fd cf       	rjmp	.-6      	; 0xc5c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x1fa>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c62:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c64:	8e bd       	out	0x2e, r24	; 46
     c66:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c68:	07 fe       	sbrs	r0, 7
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x204>
     c6c:	2a 9a       	sbi	0x05, 2	; 5
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c6e:	8b e0       	ldi	r24, 0x0B	; 11
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c70:	8c 8b       	std	Y+20, r24	; 0x14
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x23a>
     c74:	2a 98       	cbi	0x05, 2	; 5
     c76:	83 e8       	ldi	r24, 0x83	; 131
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c78:	8e bd       	out	0x2e, r24	; 46

            // wait for completion
            _frameState = FRAME_SND_DONE;
     c7a:	0d b4       	in	r0, 0x2d	; 45
     c7c:	07 fe       	sbrs	r0, 7
        }
        break;
     c7e:	fd cf       	rjmp	.-6      	; 0xc7a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x218>
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     c80:	1e b5       	in	r17, 0x2e	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	8e bd       	out	0x2e, r24	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c86:	0d b4       	in	r0, 0x2d	; 45
     c88:	07 fe       	sbrs	r0, 7
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x224>
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     c8c:	2a 9a       	sbi	0x05, 2	; 5
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	8c 8b       	std	Y+20, r24	; 0x14
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	88 83       	st	Y, r24
     c96:	60 e0       	ldi	r22, 0x00	; 0
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     c98:	ce 01       	movw	r24, r28
        {
            // signal ready to receive next byte
            status = registerWrite(REG_LINK, LINK_END);

            // reset state machine
            _frameState = FRAME_RCV_MC;
     c9a:	21 dc       	rcall	.-1982   	; 0x4de <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh>
     c9c:	17 ff       	sbrs	r17, 7

            // if we have successfully completed an exchange, ensure we are in startup
            if (DDL_MODE == IoLink::DDL_MODE_STARTUP) 
                _ddlMode = IoLink::DDL_MODE_STARTUP;
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x242>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
              
            // start user call-back timer
            startCallbackTimer();
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv+0x244>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28

    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
     caa:	1f 91       	pop	r17
     cac:	08 95       	ret

00000cae <__vector_4>:
        return ResultPhyReset;
    else
        return ResultSuccess;
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0
    default:
        return ResultIllegalMessageType;
    }

    if (!(status & STATUS_RST))
        return ResultPhyReset;
     cb2:	0f b6       	in	r0, 0x3f	; 63
    else
        return ResultSuccess;
}
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	2f 93       	push	r18
     cba:	3f 93       	push	r19
Interrupt service routine for the PHY interrupt.

We immediately forward the call to onPhyInterrupt().
*/
ISR(PCINT1_vect)
{
     cbc:	4f 93       	push	r20
     cbe:	5f 93       	push	r21
     cc0:	6f 93       	push	r22
     cc2:	7f 93       	push	r23
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	af 93       	push	r26
     cca:	bf 93       	push	r27
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
    // 
    // (If INT isn't cleared after the handler, then the PHY state is probably
    //  out of sync with the one expected by the firmware. In that case, this
    //  ISR will never be called again. Looping the handler ensures we eventually
    //  resync before exiting the ISR)
    while (bit_is_set(PINC, PINC0))
     cd0:	30 9b       	sbis	0x06, 0	; 6
     cd2:	79 c0       	rjmp	.+242    	; 0xdc6 <__vector_4+0x118>

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     cd4:	80 91 15 01 	lds	r24, 0x0115
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	20 f4       	brcc	.+8      	; 0xce4 <__vector_4+0x36>
    {
        result = handleFirstOperatingModes();
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	bd da       	rcall	.-2694   	; 0x25c <_ZN15StackSingleByte25handleFirstOperatingModesEv>
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <__vector_4+0x38>
     ce4:	80 e0       	ldi	r24, 0x00	; 0

//------------------------------------------------------------------------------
void StackSingleByte::onPhyInterrupt()
{
    HandlerResult result;
    if (_frameState <= FRAME_RCV_CKT)
     ce6:	90 91 15 01 	lds	r25, 0x0115
    {
        result = handleFirstOperatingModes();
    }
    
    if (_frameState > FRAME_RCV_CKT)
     cea:	93 30       	cpi	r25, 0x03	; 3
     cec:	88 f0       	brcs	.+34     	; 0xd10 <__vector_4+0x62>
     cee:	80 91 16 01 	lds	r24, 0x0116
    {
        // call appropriate state handler
        switch (_receiveDdlMode)
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	31 f0       	breq	.+12     	; 0xd02 <__vector_4+0x54>
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	41 f4       	brne	.+16     	; 0xd0a <__vector_4+0x5c>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
        {
        case IoLink::DDL_MODE_OPERATE:    
            result = handleOperatingMode<IoLink::DDL_MODE_OPERATE>(); 
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	3b dc       	rcall	.-1930   	; 0x576 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE4EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv>
     d00:	07 c0       	rjmp	.+14     	; 0xd10 <__vector_4+0x62>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	91 e0       	ldi	r25, 0x01	; 1
            break;
        case IoLink::DDL_MODE_PREOPERATE:
            result = handleOperatingMode<IoLink::DDL_MODE_PREOPERATE>();
     d06:	89 dd       	rcall	.-1262   	; 0x81a <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE3EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv>
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <__vector_4+0x62>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	a9 de       	rcall	.-686    	; 0xa62 <_ZN15StackSingleByte19handleOperatingModeILN6IoLink12DeviceDLModeE2EEEN9StackBaseIS_Li4ELi0E16DefaultSsHandlerE13HandlerResultEv>
            break;
        default:                  
            result = handleOperatingMode<IoLink::DDL_MODE_STARTUP>(); 
     d10:	83 30       	cpi	r24, 0x03	; 3
     d12:	19 f1       	breq	.+70     	; 0xd5a <__vector_4+0xac>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	c9 f1       	breq	.+114    	; 0xd8a <__vector_4+0xdc>
            break;
        }
    }

    // handle result codes
    switch (result)
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__vector_4+0x70>
     d1c:	4a c0       	rjmp	.+148    	; 0xdb2 <__vector_4+0x104>
     d1e:	2a 99       	sbic	0x05, 2	; 5
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <__vector_4+0x7c>
     d22:	0d b4       	in	r0, 0x2d	; 45
     d24:	07 fe       	sbrs	r0, 7

//------------------------------------------------------------------------------
template <class SpiSsHndlr> 
void PhyDriver<SpiSsHndlr>::registerAbortAccess()
{
    if (_ssHndlr.asserted())
     d26:	fd cf       	rjmp	.-6      	; 0xd22 <__vector_4+0x74>
     d28:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d2a:	2a 98       	cbi	0x05, 2	; 5
     d2c:	83 e8       	ldi	r24, 0x83	; 131
     d2e:	8e bd       	out	0x2e, r24	; 46
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     d30:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d32:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d34:	fd cf       	rjmp	.-6      	; 0xd30 <__vector_4+0x82>
     d36:	8e b5       	in	r24, 0x2e	; 46
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	9e bd       	out	0x2e, r25	; 46
     d3c:	0d b4       	in	r0, 0x2d	; 45
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d3e:	07 fe       	sbrs	r0, 7
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <__vector_4+0x8e>
     d42:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d44:	81 ff       	sbrs	r24, 1
     d46:	31 c0       	rjmp	.+98     	; 0xdaa <__vector_4+0xfc>
     d48:	80 91 01 01 	lds	r24, 0x0101
            registerAbortAccess();

            // bad data has been received, so decline to respond
            uint8_t status = registerWrite(REG_LINK, LINK_END);
        
            if ((status & STATUS_SSC) && (_ddlMode == IoLink::DDL_MODE_IDLE))
     d4c:	81 11       	cpse	r24, r1
     d4e:	2d c0       	rjmp	.+90     	; 0xdaa <__vector_4+0xfc>
     d50:	6f e7       	ldi	r22, 0x7F	; 127
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	c3 db       	rcall	.-2170   	; 0x4de <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE18startCallbackTimerEh>
            {
                // setIoLinkListen();
                
                // a possible WURQ has been received, go quiet
                startCallbackTimer(127);
     d58:	28 c0       	rjmp	.+80     	; 0xdaa <__vector_4+0xfc>
     d5a:	2a 98       	cbi	0x05, 2	; 5
     d5c:	83 e8       	ldi	r24, 0x83	; 131
     d5e:	8e bd       	out	0x2e, r24	; 46
     d60:	0d b4       	in	r0, 0x2d	; 45
     d62:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d64:	fd cf       	rjmp	.-6      	; 0xd60 <__vector_4+0xb2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d66:	8e b5       	in	r24, 0x2e	; 46
     d68:	82 e0       	ldi	r24, 0x02	; 2
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d6a:	8e bd       	out	0x2e, r24	; 46
     d6c:	0d b4       	in	r0, 0x2d	; 45
     d6e:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     d70:	fd cf       	rjmp	.-6      	; 0xd6c <__vector_4+0xbe>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d72:	2a 9a       	sbi	0x05, 2	; 5
     d74:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d76:	80 93 15 01 	sts	0x0115, r24
     d7a:	80 91 01 01 	lds	r24, 0x0101
    case ResultIllegalMessageType:
        // bad data has been received, so decline to respond
        registerWrite(REG_LINK, LINK_END);

        // reset state
        _frameState = FRAME_RCV_MC;
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	b8 f0       	brcs	.+46     	; 0xdb0 <__vector_4+0x102>
     d82:	82 e0       	ldi	r24, 0x02	; 2

        // revert to startup mode
        if (_ddlMode>IoLink::DDL_MODE_STARTUP)
     d84:	80 93 01 01 	sts	0x0101, r24
     d88:	13 c0       	rjmp	.+38     	; 0xdb0 <__vector_4+0x102>
     d8a:	2a 98       	cbi	0x05, 2	; 5
            _ddlMode = IoLink::DDL_MODE_STARTUP;
     d8c:	85 e8       	ldi	r24, 0x85	; 133
     d8e:	8e bd       	out	0x2e, r24	; 46
     d90:	0d b4       	in	r0, 0x2d	; 45
     d92:	07 fe       	sbrs	r0, 7
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
     d94:	fd cf       	rjmp	.-6      	; 0xd90 <__vector_4+0xe2>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     d96:	8e b5       	in	r24, 0x2e	; 46
     d98:	80 e8       	ldi	r24, 0x80	; 128
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     d9a:	8e bd       	out	0x2e, r24	; 46
     d9c:	0d b4       	in	r0, 0x2d	; 45
     d9e:	07 fe       	sbrs	r0, 7
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <__vector_4+0xee>
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
     da2:	2a 9a       	sbi	0x05, 2	; 5
     da4:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	ed da       	rcall	.-2598   	; 0x384 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE12configurePhyEv>
     daa:	81 e0       	ldi	r24, 0x01	; 1
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
     dac:	80 93 15 01 	sts	0x0115, r24
        break;

    case ResultPhyReset:
        // reset the reset bit
        registerWrite(REG_STATUS, STATUS_RST);
        configurePhy();
     db0:	43 da       	rcall	.-2938   	; 0x238 <_ZN15StackSingleByte12restartTimerEv.isra.1.constprop.8>
     db2:	80 91 15 01 	lds	r24, 0x0115

        // reset state
        _frameState = FRAME_RCV_MC;
     db6:	88 50       	subi	r24, 0x08	; 8
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	10 f4       	brcc	.+4      	; 0xdc0 <__vector_4+0x112>
        
        // restart the timer
        restartTimer();
     dbc:	30 9b       	sbis	0x06, 0	; 6
     dbe:	fe cf       	rjmp	.-4      	; 0xdbc <__vector_4+0x10e>

    // When sending, the UART transmission delay t2 (see A.3.4) must be less
    // than 3*Tbit (= 13us @ 230'400baud). We can't meet this timing constraint
    // if we wait for the next interrupt, so we loop until the last octet has
    // been sent, and immediately re-enter the ISR.
    switch (_frameState)
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	8b bb       	out	0x1b, r24	; 27
     dc4:	85 cf       	rjmp	.-246    	; 0xcd0 <__vector_4+0x22>
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
    {
    case FRAME_SND_ODX:
    case FRAME_SND_PD:
    case FRAME_SND_CKS:
        // wait until byte sent (can be removed if MPU frequency 20Mhz)
        loop_until_bit_is_set(PINC, PINC0);
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
    while (bit_is_set(PINC, PINC0))
    {
        StackSingleByte::instance.onPhyInterrupt();

        // clear interrupt flag
        PCIFR = _BV(PCIF1);
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
    }
}
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <_GLOBAL__sub_I_directParameter>:
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	f1 e0       	ldi	r31, 0x01	; 1
     dec:	10 82       	st	Z, r1
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	97 83       	std	Z+7, r25	; 0x07
     df2:	aa e0       	ldi	r26, 0x0A	; 10
     df4:	b1 e0       	ldi	r27, 0x01	; 1
    , _ledRegister(0)
    , _fallbackCounter(0)
    , _runUserCode(false)
    , _sioLevel(true)
    , _prmWriteAvailable(false)
    , _flag(false)
     df6:	8c 91       	ld	r24, X
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	8c 93       	st	X, r24
     dfc:	15 86       	std	Z+13, r1	; 0x0d
     dfe:	14 86       	std	Z+12, r1	; 0x0c
     e00:	17 86       	std	Z+15, r1	; 0x0f
     e02:	16 86       	std	Z+14, r1	; 0x0e
     e04:	90 8b       	std	Z+16, r25	; 0x10
     e06:	11 8a       	std	Z+17, r1	; 0x11
     e08:	12 8a       	std	Z+18, r1	; 0x12
     e0a:	a4 e1       	ldi	r26, 0x14	; 20
     e0c:	b1 e0       	ldi	r27, 0x01	; 1
     e0e:	8c 91       	ld	r24, X
     e10:	8c 7f       	andi	r24, 0xFC	; 252
     e12:	8b 7f       	andi	r24, 0xFB	; 251
     e14:	8c 93       	st	X, r24
{
    _parameterWrite.address = IoLink::PAGE_NO_PARAMETER;
     e16:	92 87       	std	Z+10, r25	; 0x0a
     * 
     * \note Use \c Stack::instance to access the stack instance
     */
    StackSingleByte() : _frameState(FRAME_RESET),
                        _tccr0bRecord(0),
                        _receiveDdlMode(IoLink::DDL_MODE_IDLE) {}
     e18:	14 8a       	std	Z+20, r1	; 0x14
     e1a:	15 8a       	std	Z+21, r1	; 0x15
     e1c:	14 8e       	std	Z+28, r1	; 0x1c
     e1e:	08 95       	ret

00000e20 <_ZN7DemoApp9configureEv>:

//------------------------------------------------------------------------------
void DemoApp::configure()
{
    // Configure a timer with 10ms cycle
    OCR2A   = F_CPU / 1024 / 100;
     e20:	8e e4       	ldi	r24, 0x4E	; 78
     e22:	80 93 b3 00 	sts	0x00B3, r24

    /* Start the timer
       WGM    = 3'b010  - clear timer on match
       COMxx  = 2'b0    - pins not used
       CS     = 3'b111   - divide by 1024 */
    TCCR2A = _BV(WGM21);
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20);
     e2c:	87 e0       	ldi	r24, 0x07	; 7
     e2e:	80 93 b1 00 	sts	0x00B1, r24

    // configure digital input
    DDRB &= ~_BV(DDB7);
     e32:	27 98       	cbi	0x04, 7	; 4
     e34:	08 95       	ret

00000e36 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE>:
    updateProcessInputData();
}

//------------------------------------------------------------------------------
void DemoApp::handleParameterWrite(const Stack::Parameter* param)
{
     e36:	fb 01       	movw	r30, r22
    // (this is the location to intercept the write access if desired)
    bool commit = true;

    switch (param->address)
     e38:	80 81       	ld	r24, Z
     e3a:	81 31       	cpi	r24, 0x11	; 17
     e3c:	09 f4       	brne	.+2      	; 0xe40 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xa>
     e3e:	7a c0       	rjmp	.+244    	; 0xf34 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xfe>
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	82 31       	cpi	r24, 0x12	; 18
     e44:	29 f0       	breq	.+10     	; 0xe50 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x1a>
     e46:	80 31       	cpi	r24, 0x10	; 16
     e48:	59 f4       	brne	.+22     	; 0xe60 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x2a>
    case IoLink::PAGE_DEVICE_SPECIFIC_1B:
    case IoLink::PAGE_DEVICE_SPECIFIC_1C:
    case IoLink::PAGE_DEVICE_SPECIFIC_1D:
    case IoLink::PAGE_DEVICE_SPECIFIC_1E:
    case IoLink::PAGE_DEVICE_SPECIFIC_1F:
        directParameter[address] = value;
     e4a:	90 93 38 01 	sts	0x0138, r25
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x2a>
        // read-only access => ignore
        commit = false;
        break;

    case VendorParamPidMode:  // process input data selection
        switch (param->value)
     e50:	91 30       	cpi	r25, 0x01	; 1
     e52:	31 f4       	brne	.+12     	; 0xe60 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x2a>
        {
        case PidAnalogInput:
            // configure ADC
            ADMUX = _BV(REFS0) | 7; 
     e54:	87 e4       	ldi	r24, 0x47	; 71
     e56:	80 93 7c 00 	sts	0x007C, r24
            ADCSRA = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2) | _BV(ADEN) | _BV(ADSC);
     e5a:	87 ec       	ldi	r24, 0xC7	; 199
     e5c:	80 93 7a 00 	sts	0x007A, r24
    }

    if (commit)
    {
        // commit to stack
        Stack::instance.parameterWrite(param->address, param->value);
     e60:	21 81       	ldd	r18, Z+1	; 0x01
     e62:	e0 81       	ld	r30, Z
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e64:	ec 30       	cpi	r30, 0x0C	; 12
     e66:	08 f0       	brcs	.+2      	; 0xe6a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x34>
     e68:	60 c0       	rjmp	.+192    	; 0xf2a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xf4>
     e6a:	e9 30       	cpi	r30, 0x09	; 9
     e6c:	50 f0       	brcs	.+20     	; 0xe82 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x4c>

    case IoLink::PAGE_REVISION_ID:
    case IoLink::PAGE_DEVICE_ID_1:
    case IoLink::PAGE_DEVICE_ID_2:
    case IoLink::PAGE_DEVICE_ID_3:
        if (_ddlMode == IoLink::DDL_MODE_STARTUP)
     e6e:	80 91 01 01 	lds	r24, 0x0101
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	09 f0       	breq	.+2      	; 0xe78 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x42>
     e76:	5e c0       	rjmp	.+188    	; 0xf34 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xfe>
        {
            directParameter[address] = value;
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e9 5d       	subi	r30, 0xD9	; 217
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	20 83       	st	Z, r18
     e80:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     e82:	e1 30       	cpi	r30, 0x01	; 1
     e84:	69 f5       	brne	.+90     	; 0xee0 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xaa>
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
     e86:	80 91 01 01 	lds	r24, 0x0101
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	21 f4       	brne	.+8      	; 0xe96 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x60>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     e8e:	80 91 28 01 	lds	r24, 0x0128
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
     e92:	81 11       	cpse	r24, r1
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x64>
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
     e96:	80 91 29 01 	lds	r24, 0x0129
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	d0 f0       	brcs	.+52     	; 0xed2 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x9c>
     e9e:	80 34       	cpi	r24, 0x40	; 64
     ea0:	10 f4       	brcc	.+4      	; 0xea6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x70>
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	18 c0       	rjmp	.+48     	; 0xed6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xa0>
     ea6:	98 2f       	mov	r25, r24
     ea8:	90 7c       	andi	r25, 0xC0	; 192
     eaa:	90 34       	cpi	r25, 0x40	; 64
     eac:	41 f4       	brne	.+16     	; 0xebe <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x88>
     eae:	34 e0       	ldi	r19, 0x04	; 4
     eb0:	83 9f       	mul	r24, r19
     eb2:	c0 01       	movw	r24, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	99 27       	eor	r25, r25
     eb8:	80 5c       	subi	r24, 0xC0	; 192
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	0c c0       	rjmp	.+24     	; 0xed6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xa0>
     ebe:	90 38       	cpi	r25, 0x80	; 128
     ec0:	41 f4       	brne	.+16     	; 0xed2 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x9c>
     ec2:	8f 73       	andi	r24, 0x3F	; 63
     ec4:	30 e1       	ldi	r19, 0x10	; 16
     ec6:	83 9f       	mul	r24, r19
     ec8:	c0 01       	movw	r24, r0
     eca:	11 24       	eor	r1, r1
     ecc:	80 5c       	subi	r24, 0xC0	; 192
     ece:	9e 4f       	sbci	r25, 0xFE	; 254
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xa0>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 0e 01 	sts	0x010E, r25
     eda:	80 93 0d 01 	sts	0x010D, r24
     ede:	cc cf       	rjmp	.-104    	; 0xe78 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x42>
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     ee0:	e1 30       	cpi	r30, 0x01	; 1
     ee2:	f8 f4       	brcc	.+62     	; 0xf22 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xec>
    {
    case IoLink::PAGE_MASTER_CMD:
        switch (value)
     ee4:	28 39       	cpi	r18, 0x98	; 152
     ee6:	a1 f0       	breq	.+40     	; 0xf10 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xda>
     ee8:	28 f4       	brcc	.+10     	; 0xef4 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xbe>
     eea:	2a 35       	cpi	r18, 0x5A	; 90
     eec:	b1 f0       	breq	.+44     	; 0xf1a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xe4>
     eee:	27 39       	cpi	r18, 0x97	; 151
     ef0:	31 f0       	breq	.+12     	; 0xefe <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xc8>
     ef2:	08 95       	ret
     ef4:	29 39       	cpi	r18, 0x99	; 153
     ef6:	49 f0       	breq	.+18     	; 0xf0a <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xd4>
     ef8:	2a 39       	cpi	r18, 0x9A	; 154
     efa:	19 f0       	breq	.+6      	; 0xf02 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xcc>
     efc:	08 95       	ret
        {
        case IoLink::MCMD_DEVICE_STARTUP:   
            _ddlMode = IoLink::DDL_MODE_STARTUP;  
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_DEVICE_PREOPERATE:
            _ddlMode = IoLink::DDL_MODE_PREOPERATE; 
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	80 93 01 01 	sts	0x0101, r24
     f08:	08 95       	ret
            break;
        case IoLink::MCMD_DEVICE_OPERATE:   
            _processDataOut.isValid = false;
     f0a:	10 92 07 01 	sts	0x0107, r1
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xe0>
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
            break;
        case IoLink::MCMD_PD_OUT_OPERATE:   // Process output data valid
            _processDataOut.isValid = true;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 07 01 	sts	0x0107, r24
            _ddlMode = IoLink::DDL_MODE_OPERATE; 
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	f5 cf       	rjmp	.-22     	; 0xf04 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xce>
            break;
        case IoLink::MCMD_FALLBACK:
            // switch to SIO mode after 3 cycles
            _fallbackCounter = 3;
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	80 93 13 01 	sts	0x0113, r24
     f20:	08 95       	ret
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::parameterWrite(uint8_t address, uint8_t value)
{
    // write to direct parameter page channel
    switch (address)
     f22:	e4 30       	cpi	r30, 0x04	; 4
     f24:	09 f4       	brne	.+2      	; 0xf28 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xf2>
     f26:	a3 cf       	rjmp	.-186    	; 0xe6e <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x38>
     f28:	08 95       	ret
     f2a:	81 ef       	ldi	r24, 0xF1	; 241
     f2c:	8e 0f       	add	r24, r30
     f2e:	81 31       	cpi	r24, 0x11	; 17
     f30:	08 f4       	brcc	.+2      	; 0xf34 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0xfe>
     f32:	a2 cf       	rjmp	.-188    	; 0xe78 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x42>
     f34:	08 95       	ret

00000f36 <_ZN7DemoApp11elapsed10msEv>:
}

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
     f36:	b9 9b       	sbis	0x17, 1	; 23
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <_ZN7DemoApp11elapsed10msEv+0xc>
        return false;

    TIFR2 = _BV(OCF2A);
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	87 bb       	out	0x17, r24	; 23
    return true;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	08 95       	ret

//------------------------------------------------------------------------------
bool DemoApp::elapsed10ms()
{
    if (!(TIFR2 & _BV(OCF2A)))
        return false;
     f42:	80 e0       	ldi	r24, 0x00	; 0

    TIFR2 = _BV(OCF2A);
    return true;
}
     f44:	08 95       	ret

00000f46 <_ZN7DemoApp22updateProcessInputDataEv>:
    }
}

//------------------------------------------------------------------------------
void DemoApp::updateProcessInputData()
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
    if (elapsed10ms())
     f4c:	f4 df       	rcall	.-24     	; 0xf36 <_ZN7DemoApp11elapsed10msEv>
     f4e:	88 23       	and	r24, r24
     f50:	61 f1       	breq	.+88     	; 0xfaa <_ZN7DemoApp22updateProcessInputDataEv+0x64>
     f52:	88 81       	ld	r24, Y
    {
        // the green LED cycles if IO-Link comms are up, red if not
        ++_ctr;
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	88 83       	st	Y, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t level = ((_ctr >> 3) & 0x0f);
     f5a:	23 e0       	ldi	r18, 0x03	; 3
     f5c:	95 95       	asr	r25
     f5e:	87 95       	ror	r24
     f60:	2a 95       	dec	r18
     f62:	e1 f7       	brne	.-8      	; 0xf5c <_ZN7DemoApp22updateProcessInputDataEv+0x16>
     f64:	98 2f       	mov	r25, r24
     f66:	9f 70       	andi	r25, 0x0F	; 15
     f68:	83 ff       	sbrs	r24, 3
        if (level & 0x8) level = ((~level) & 0x7);
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <_ZN7DemoApp22updateProcessInputDataEv+0x2a>
     f6c:	90 95       	com	r25
     f6e:	97 70       	andi	r25, 0x07	; 7
     f70:	80 91 08 01 	lds	r24, 0x0108

        if (Stack::instance.masterLost())
     f74:	85 30       	cpi	r24, 0x05	; 5
     f76:	18 f0       	brcs	.+6      	; 0xf7e <_ZN7DemoApp22updateProcessInputDataEv+0x38>
     f78:	19 82       	std	Y+1, r1	; 0x01
            {
                // flash the red LED
                _ledLevel1 = Stack::LED_LEVEL_OFF;
     f7a:	9a 83       	std	Y+2, r25	; 0x02
                _ledLevel2 = (Stack::LedLevel)(level);
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <_ZN7DemoApp22updateProcessInputDataEv+0x3c>
     f7e:	99 83       	std	Y+1, r25	; 0x01
            }
            else
            {
                // flash the green LED
                _ledLevel1 = (Stack::LedLevel)(level);
     f80:	1a 82       	std	Y+2, r1	; 0x02
                _ledLevel2 = Stack::LED_LEVEL_OFF;
     f82:	1f 99       	sbic	0x03, 7	; 3
            };

        // the red LED is over-ridden if the push-button is pressed
        if (isDigitalButtonPressed())
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <_ZN7DemoApp22updateProcessInputDataEv+0x44>
     f86:	8f e0       	ldi	r24, 0x0F	; 15
        {
            _ledLevel2 = (Stack::LedLevel)(0xf);
     f88:	8a 83       	std	Y+2, r24	; 0x02
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
        _ledRegister |= (level << 4);
     f8c:	20 e1       	ldi	r18, 0x10	; 16
     f8e:	82 9f       	mul	r24, r18
     f90:	c0 01       	movw	r24, r0
     f92:	11 24       	eor	r1, r1
     f94:	90 91 12 01 	lds	r25, 0x0112
void StackBase<T, PDI, PDO, SpiSsHndlr>::setLedLevel(Led led, typename Phy::LedLevel level)
{
    switch (led)
    {
    case LED_1:
        _ledRegister &= 0x0f;
     f98:	9f 70       	andi	r25, 0x0F	; 15
     f9a:	89 2b       	or	r24, r25
        _ledRegister |= (level << 4);
     f9c:	80 93 12 01 	sts	0x0112, r24
     fa0:	80 7f       	andi	r24, 0xF0	; 240
        break;

    case LED_2:
        _ledRegister &= 0xf0;
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
        _ledRegister |= level;
     fa4:	89 2b       	or	r24, r25
     fa6:	80 93 12 01 	sts	0x0112, r24
     faa:	82 e1       	ldi	r24, 0x12	; 18
        Stack::instance.setLedLevel(Stack::LED_1, _ledLevel1);
        Stack::instance.setLedLevel(Stack::LED_2, _ledLevel2);
    }

	// set default values for testing on oscilloscope
	Stack::instance.processInputData().buffer[1] = 0x12;
     fac:	80 93 03 01 	sts	0x0103, r24
     fb0:	84 e3       	ldi	r24, 0x34	; 52
	Stack::instance.processInputData().buffer[2] = 0x34;
     fb2:	80 93 04 01 	sts	0x0104, r24
     fb6:	86 e5       	ldi	r24, 0x56	; 86
	Stack::instance.processInputData().buffer[3] = 0x56;
     fb8:	80 93 05 01 	sts	0x0105, r24
     fbc:	80 91 39 01 	lds	r24, 0x0139
	
    switch (Stack::instance.parameterRead(VendorParamPidMode))
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <_ZN7DemoApp22updateProcessInputDataEv+0x9a>
     fc4:	38 f0       	brcs	.+14     	; 0xfd4 <_ZN7DemoApp22updateProcessInputDataEv+0x8e>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	09 f1       	breq	.+66     	; 0x100c <_ZN7DemoApp22updateProcessInputDataEv+0xc6>
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	31 f5       	brne	.+76     	; 0x101a <_ZN7DemoApp22updateProcessInputDataEv+0xd4>
     fce:	10 92 02 01 	sts	0x0102, r1
        Stack::instance.processInputData().buffer[0] = _ctr;
        Stack::instance.processInputData().isValid = true;
        break;
	
	case PidSensors:
		Stack::instance.processInputData().buffer[0] = 0x00;
     fd2:	1f c0       	rjmp	.+62     	; 0x1012 <_ZN7DemoApp22updateProcessInputDataEv+0xcc>
     fd4:	83 b1       	in	r24, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
     fd6:	80 95       	com	r24
	
    switch (Stack::instance.parameterRead(VendorParamPidMode))
    {
    case PidDigitalInput:
        // check digital sensor 
        Stack::instance.processInputData().buffer[0] = isDigitalButtonPressed() ? 0x01 : 0x00;
     fd8:	88 1f       	adc	r24, r24
     fda:	88 27       	eor	r24, r24
     fdc:	88 1f       	adc	r24, r24
     fde:	17 c0       	rjmp	.+46     	; 0x100e <_ZN7DemoApp22updateProcessInputDataEv+0xc8>
     fe0:	90 91 7a 00 	lds	r25, 0x007A
        Stack::instance.processInputData().isValid = true;
        break;

    case PidAnalogInput:
        // check analog sensor
        if (!(ADCSRA & _BV(ADSC)))
     fe4:	96 fd       	sbrc	r25, 6
     fe6:	1b c0       	rjmp	.+54     	; 0x101e <_ZN7DemoApp22updateProcessInputDataEv+0xd8>
     fe8:	20 91 78 00 	lds	r18, 0x0078
        {
            uint16_t sensorValue = ADC;
     fec:	30 91 79 00 	lds	r19, 0x0079
     ff0:	36 95       	lsr	r19

            Stack::instance.processInputData().buffer[0] = sensorValue >> 2;
     ff2:	27 95       	ror	r18
     ff4:	36 95       	lsr	r19
     ff6:	27 95       	ror	r18
     ff8:	20 93 02 01 	sts	0x0102, r18
     ffc:	80 93 06 01 	sts	0x0106, r24
            Stack::instance.processInputData().isValid = true;
    1000:	80 91 7a 00 	lds	r24, 0x007A

            // restart sampling
            ADCSRA |= _BV(ADSC);
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	80 93 7a 00 	sts	0x007A, r24
    100a:	09 c0       	rjmp	.+18     	; 0x101e <_ZN7DemoApp22updateProcessInputDataEv+0xd8>
    100c:	88 81       	ld	r24, Y
        }
        break;

    case PidSawtooth:
        // copy counter to process input data
        Stack::instance.processInputData().buffer[0] = _ctr;
    100e:	80 93 02 01 	sts	0x0102, r24
    1012:	81 e0       	ldi	r24, 0x01	; 1
	case PidSensors:
		Stack::instance.processInputData().buffer[0] = 0x00;
		Stack::instance.processInputData().buffer[1] = 0x12;
		Stack::instance.processInputData().buffer[2] = 0x34;
		Stack::instance.processInputData().buffer[3] = 0x56;
		Stack::instance.processInputData().isValid = true;
    1014:	80 93 06 01 	sts	0x0106, r24
    1018:	02 c0       	rjmp	.+4      	; 0x101e <_ZN7DemoApp22updateProcessInputDataEv+0xd8>
		break;
    101a:	10 92 06 01 	sts	0x0106, r1

    default:
        Stack::instance.processInputData().isValid = false;
    101e:	df 91       	pop	r29
        break;
    }
}
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE>:
    1024:	cf 93       	push	r28
    DDRB &= ~_BV(DDB7);
}

//------------------------------------------------------------------------------
void DemoApp::run(const Stack::Parameter* param)
{
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
    // check for write access to direct parameter page
    if (param)
    102a:	61 15       	cp	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	11 f0       	breq	.+4      	; 0x1034 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x10>
    {
        handleParameterWrite(param);
    1030:	02 df       	rcall	.-508    	; 0xe36 <_ZN7DemoApp20handleParameterWriteEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE>
    1032:	27 c0       	rjmp	.+78     	; 0x1082 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x5e>
    1034:	80 91 01 01 	lds	r24, 0x0101
    }
    else if (Stack::instance.stackMode() == Stack::STACK_MODE_SIO)
    1038:	81 11       	cpse	r24, r1
    103a:	23 c0       	rjmp	.+70     	; 0x1082 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x5e>
    103c:	93 b1       	in	r25, 0x03	; 3
}

//------------------------------------------------------------------------------
bool DemoApp::isDigitalButtonPressed()
{
    return !(PINB & _BV(PINB7));
    103e:	90 95       	com	r25
    1040:	99 1f       	adc	r25, r25
    1042:	99 27       	eor	r25, r25
    1044:	99 1f       	adc	r25, r25
    1046:	80 91 0a 01 	lds	r24, 0x010A

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::setSioLevel(bool active)
{
    _sioLevel = active;
    104a:	90 fb       	bst	r25, 0
    104c:	80 f9       	bld	r24, 0
    104e:	80 93 0a 01 	sts	0x010A, r24
    1052:	91 11       	cpse	r25, r1
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
    1054:	02 c0       	rjmp	.+4      	; 0x105a <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x36>
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	01 c0       	rjmp	.+2      	; 0x105c <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x38>
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
    105e:	80 93 09 01 	sts	0x0109, r24
    1062:	81 e0       	ldi	r24, 0x01	; 1
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
    1064:	80 93 00 01 	sts	0x0100, r24
    1068:	9c 60       	ori	r25, 0x0C	; 12
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
    106a:	2a 98       	cbi	0x05, 2	; 5
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
    106c:	82 e8       	ldi	r24, 0x82	; 130
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    106e:	8e bd       	out	0x2e, r24	; 46
    1070:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    1072:	07 fe       	sbrs	r0, 7
    1074:	fd cf       	rjmp	.-6      	; 0x1070 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x4c>
    1076:	8e b5       	in	r24, 0x2e	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
    1078:	9e bd       	out	0x2e, r25	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    107a:	0d b4       	in	r0, 0x2d	; 45
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    107c:	07 fe       	sbrs	r0, 7
    107e:	fd cf       	rjmp	.-6      	; 0x107a <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE+0x56>
    1080:	2a 9a       	sbi	0x05, 2	; 5
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
    1082:	ce 01       	movw	r24, r28
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    1084:	df 91       	pop	r29
}
    1086:	cf 91       	pop	r28
    1088:	5e cf       	rjmp	.-324    	; 0xf46 <_ZN7DemoApp22updateProcessInputDataEv>

0000108a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv>:
        // when in SIOActive mode, use digital input to control CQ line
    	Stack::instance.setSioLevel(isDigitalButtonPressed());
    }

    // update process data
    updateProcessInputData();
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    return StackBase::registerRead(Phy::REG_TEMP);
}

//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::configure()
    108e:	ec 01       	movw	r28, r24
    
    inline static void configure()
    {
      /* Data direction in the SPI bits, PB2/SS, PB5/SCK
      and PB3/MOSI are outputs.  Drive SS high in advance */
      PORTB |= _BV(PORTB2) | _BV(PORTB5);
    1090:	85 b1       	in	r24, 0x05	; 5
    1092:	84 62       	ori	r24, 0x24	; 36
    1094:	85 b9       	out	0x05, r24	; 5
      PORTB &= ~(_BV(PORTB3)); 
    1096:	2b 98       	cbi	0x05, 3	; 5
      DDRB  |= _BV(DDB5) | _BV(DDB3) | _BV(DDB2);
    1098:	84 b1       	in	r24, 0x04	; 4
    109a:	8c 62       	ori	r24, 0x2C	; 44
    109c:	84 b9       	out	0x04, r24	; 4
      DDRB  &= ~(_BV(DDB4));
    109e:	24 98       	cbi	0x04, 4	; 4
      DORD   = 1'b0   - MSB first
      MSTR   = 1'b1   - Master
      CPOL   = 1'b1   - clock idles high
      CPHA   = 1'b1   - sample on trailing edge
      SPR    = 2'b00  - fosc/2 */
      SPCR = _BV(SPE) | _BV(MSTR) | _BV(CPOL) | _BV(CPHA);
    10a0:	8c e5       	ldi	r24, 0x5C	; 92
    10a2:	8c bd       	out	0x2c, r24	; 44

      /* and the SPI2X bit to speed it up */
      SPSR = _BV(SPI2X);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	8d bd       	out	0x2d, r24	; 45
        HIBYTE(StackT::DEVICE_ID),                      // PAGE_DEVICE_ID_2
        LOBYTE(StackT::DEVICE_ID)                       // PAGE_DEVICE_ID_3
    };

    // copy the default parameters from flash to RAM
    (void)memcpy_P(directParameter, directDefaultConfig, sizeof(directDefaultConfig));
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	60 eb       	ldi	r22, 0xB0	; 176
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	87 e2       	ldi	r24, 0x27	; 39
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	eb d0       	rcall	.+470    	; 0x128c <memcpy_P>
    10b6:	18 82       	st	Y, r1

    // stack initial state is STACK_MODE_SIO operation
    _ddlMode = IoLink::DDL_MODE_IDLE;
    10b8:	1d 82       	std	Y+5, r1	; 0x05

    // set up the process data buffers and default process data
    _processDataIn.isValid = false;
    10ba:	1e 82       	std	Y+6, r1	; 0x06
    _processDataOut.isValid = false;
    10bc:	80 91 68 00 	lds	r24, 0x0068
{
    // Configure and enable interrupt
    // 
    // Only pin change interrupts are available, so the routine must check
    // the level before returning
    PCICR  |= _BV(PCIE1);
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	80 93 68 00 	sts	0x0068, r24
    10c6:	80 91 6c 00 	lds	r24, 0x006C
    PCMSK1 |= _BV(PCINT8);
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 93 6c 00 	sts	0x006C, r24
    10d0:	ee dd       	rcall	.-1060   	; 0xcae <__vector_4>

    // call ISR handler
    PCINT1_vect();
    10d2:	1f 82       	std	Y+7, r1	; 0x07
    10d4:	15 bc       	out	0x25, r1	; 37
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::startCallbackTimer(uint8_t delay)
{
    // reset dead cycle timer
    _deadCycleCtr = 0;
    10d6:	16 bc       	out	0x26, r1	; 38

    // disable timer
    TCCR0B = 0;
    10d8:	85 b3       	in	r24, 0x15	; 21
    TCNT0 = 0;
    10da:	87 60       	ori	r24, 0x07	; 7

    // clear any outstanding interrupt requests
    TIFR0 |= _BV(OCF0B) | _BV(OCF0A) | _BV(TOV0);
    10dc:	85 bb       	out	0x15, r24	; 21
    10de:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    
    // check if we need to force recalculation of cycle period
    if (_cyclePeriod == 0)
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	49 f5       	brne	.+82     	; 0x113a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xb0>
    10e8:	88 81       	ld	r24, Y
    10ea:	84 30       	cpi	r24, 0x04	; 4
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::updateCyclePeriod()
{
    // get period
    uint8_t cycleParam = 0;
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x6c>
    10ee:	80 91 28 01 	lds	r24, 0x0128
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    10f2:	81 11       	cpse	r24, r1
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x70>
    if (_ddlMode == IoLink::DDL_MODE_OPERATE)
    {
        cycleParam = parameterRead(IoLink::PAGE_MASTER_CYCLE_TIME);
    }

    if (cycleParam == 0)
    10f6:	80 91 29 01 	lds	r24, 0x0129
     * 
     * \param address   Parameter index
     * \return          Read value
     * 
     */
    uint8_t             parameterRead(uint8_t address) const { return directParameter[address]; }
    10fa:	84 30       	cpi	r24, 0x04	; 4
    10fc:	e0 f0       	brcs	.+56     	; 0x1136 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xac>
        // MasterCycleTime hasn't been set yet => use MinCycleTime
        cycleParam = parameterRead(IoLink::PAGE_MIN_CYCLE_TIME);
    }

    // decode parameter into 1/10ms
    _cyclePeriod = DECODE_CYCLE_TIME(cycleParam);
    10fe:	80 34       	cpi	r24, 0x40	; 64
    1100:	18 f4       	brcc	.+6      	; 0x1108 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x7e>
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	17 c0       	rjmp	.+46     	; 0x1136 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xac>
    1108:	98 2f       	mov	r25, r24
    110a:	90 7c       	andi	r25, 0xC0	; 192
    110c:	90 34       	cpi	r25, 0x40	; 64
    110e:	49 f4       	brne	.+18     	; 0x1122 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x98>
    1110:	24 e0       	ldi	r18, 0x04	; 4
    1112:	82 9f       	mul	r24, r18
    1114:	c0 01       	movw	r24, r0
    1116:	11 24       	eor	r1, r1
    1118:	99 27       	eor	r25, r25
    111a:	9c 01       	movw	r18, r24
    111c:	20 5c       	subi	r18, 0xC0	; 192
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	0a c0       	rjmp	.+20     	; 0x1136 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xac>
    1122:	90 38       	cpi	r25, 0x80	; 128
    1124:	41 f4       	brne	.+16     	; 0x1136 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xac>
    1126:	8f 73       	andi	r24, 0x3F	; 63
    1128:	20 e1       	ldi	r18, 0x10	; 16
    112a:	82 9f       	mul	r24, r18
    112c:	c0 01       	movw	r24, r0
    112e:	11 24       	eor	r1, r1
    1130:	9c 01       	movw	r18, r24
    1132:	20 5c       	subi	r18, 0xC0	; 192
    1134:	3e 4f       	sbci	r19, 0xFE	; 254
    1136:	3d 87       	std	Y+13, r19	; 0x0d
    1138:	2c 87       	std	Y+12, r18	; 0x0c
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    {
        updateCyclePeriod();
    }

    // initialize cycle timer
    _cycleTimer = delay + 1;
    113e:	9f 87       	std	Y+15, r25	; 0x0f
    1140:	8e 87       	std	Y+14, r24	; 0x0e
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	80 93 6e 00 	sts	0x006E, r24

    if (_cycleTimer > 0)
    {      
        // Timer/Counter0 Output Compare Match B Interrupt Enable
        TIMSK0 = _BV(OCIE0B);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	84 bd       	out	0x24, r24	; 36

        // clear Timer on Compare Match A
        TCCR0A = _BV(WGM01);
    114c:	94 e6       	ldi	r25, 0x64	; 100
    114e:	97 bd       	out	0x27, r25	; 39

        // generate 0.1ms cycles
#if F_CPU < 20000000
        OCR0B = OCR0A = F_CPU / 80000;
    1150:	98 bd       	out	0x28, r25	; 40
    1152:	85 bd       	out	0x25, r24	; 37
    1154:	9f b7       	in	r25, 0x3f	; 63
        TCCR0B = _BV(CS01);             // pre-scaler clkIO/8
    1156:	f8 94       	cli
# error Unsupported CPU frequency
#endif
    }

    if (delay == 0)
      ATOMIC_BLOCK( ATOMIC_RESTORESTATE)
    1158:	88 85       	ldd	r24, Y+8	; 0x08
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    115a:	87 fd       	sbrc	r24, 7
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
void StackBase<T, PDI, PDO, SpiSsHndlr>::onTimer0CompBInterrupt()
{
    // decrement hiZ timer
    if (_hiZCounter >= 0 && --_hiZCounter < 0)
    115c:	1a c0       	rjmp	.+52     	; 0x1192 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x108>
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	88 87       	std	Y+8, r24	; 0x08
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	b1 f4       	brne	.+44     	; 0x1192 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x108>
    1166:	89 85       	ldd	r24, Y+9	; 0x09
    1168:	80 fd       	sbrc	r24, 0
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
    116a:	20 c0       	rjmp	.+64     	; 0x11ac <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x122>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	2f ef       	ldi	r18, 0xFF	; 255
    1170:	28 87       	std	Y+8, r18	; 0x08
    bool driven = (hslsBits != 0);

    // we need to switch to IO-Link mode after 1ms to detect a wake-up
    if (driven)
    {
        _hiZCounter = -1;
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	20 93 00 01 	sts	0x0100, r18
    else if (wasDriven)  
    {
        _hiZCounter = 10;
    }

    wasDriven = driven;
    1178:	8c 60       	ori	r24, 0x0C	; 12
    117a:	2a 98       	cbi	0x05, 2	; 5
    uint8_t sioBit = (!driven && (_hiZCounter < 0)) 
        ? Phy::CTL_IOLINK_MODE 
        : Phy::CTL_SIO_MODE;

    return StackBase::registerWrite(Phy::REG_CTL, 
        StackT::PHY_CTL_SCT | StackT::PHY_CTL_MODE | sioBit | hslsBits);
    117c:	22 e8       	ldi	r18, 0x82	; 130
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
    117e:	2e bd       	out	0x2e, r18	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    1180:	0d b4       	in	r0, 0x2d	; 45
    1182:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    1184:	fd cf       	rjmp	.-6      	; 0x1180 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xf6>
    1186:	2e b5       	in	r18, 0x2e	; 46
    1188:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
    118a:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    118c:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    118e:	fd cf       	rjmp	.-6      	; 0x118a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x100>
    1190:	2a 9a       	sbi	0x05, 2	; 5
    1192:	2e 85       	ldd	r18, Y+14	; 0x0e
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
    1194:	3f 85       	ldd	r19, Y+15	; 0x0f
    {
        stack().setSioActive();
    }

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
    1196:	8b 89       	ldd	r24, Y+19	; 0x13
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	49 f0       	breq	.+18     	; 0x11b0 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x126>
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	31 09       	sbc	r19, r1
    11a2:	3f 87       	std	Y+15, r19	; 0x0f
    11a4:	2e 87       	std	Y+14, r18	; 0x0e
    11a6:	23 2b       	or	r18, r19
    11a8:	49 f0       	breq	.+18     	; 0x11bc <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x132>
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x126>
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	df cf       	rjmp	.-66     	; 0x116e <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0xe4>
uint8_t StackBase<T, PDI, PDO, SpiSsHndlr>::driveModeBits() const
{
    switch (StackT::SIO_DRIVE_MODE)
    {
    case DRIVE_MODE_PUSH_PULL:
        return _sioLevel ? Phy::CTL_HS : Phy::CTL_LS;
    11b0:	8e 7f       	andi	r24, 0xFE	; 254
    11b2:	8b 8b       	std	Y+19, r24	; 0x13
        }
    }
    else
    {
        // too late for user code
        _runUserCode = false;
    11b4:	9f bf       	out	0x3f, r25	; 63
    11b6:	df 91       	pop	r29
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b8:	cf 91       	pop	r28

    Phy::configure();

    // start timer responsible for calling the application "main loop"
    startCallbackTimer();
};
    11ba:	08 95       	ret
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	8b 8b       	std	Y+19, r24	; 0x13

    // check if cycle timer elapsed
    if (_cycleTimer > 0 && --_cycleTimer == 0)
    {
        // user code may run
        _runUserCode = true;
    11c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c2:	3d 85       	ldd	r19, Y+13	; 0x0d

        // restart cycle timer
        _cycleTimer = _cyclePeriod;
    11c4:	3f 87       	std	Y+15, r19	; 0x0f
    11c6:	2e 87       	std	Y+14, r18	; 0x0e
    11c8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ca:	8f 3f       	cpi	r24, 0xFF	; 255

        // advance the count of dead cycles
        if (_deadCycleCtr != 0xff)
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x148>
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	8f 83       	std	Y+7, r24	; 0x07
        {
            ++_deadCycleCtr;
    11d2:	8a 89       	ldd	r24, Y+18	; 0x12
    11d4:	88 23       	and	r24, r24
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x156>
    11d8:	81 50       	subi	r24, 0x01	; 1
    11da:	8a 8b       	std	Y+18, r24	; 0x12
    11dc:	88 23       	and	r24, r24
    11de:	91 f0       	breq	.+36     	; 0x1204 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x17a>
    11e0:	89 89       	ldd	r24, Y+17	; 0x11
    11e2:	28 89       	ldd	r18, Y+16	; 0x10
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
        }

        // update LED register if necessary
        if (_savedLedRegister != _ledRegister)
    11e4:	28 17       	cp	r18, r24
    11e6:	31 f3       	breq	.-52     	; 0x11b4 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x12a>
    11e8:	88 8b       	std	Y+16, r24	; 0x10
    11ea:	2a 98       	cbi	0x05, 2	; 5
        {
            _savedLedRegister = _ledRegister;
    11ec:	26 e8       	ldi	r18, 0x86	; 134
    /**
     * Assert SS/ to begin SPI communication
     */
    static void         assert() __attribute__((always_inline))
    {
        PORTB &= ~ _BV(PORTB2);
    11ee:	2e bd       	out	0x2e, r18	; 46
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    11f0:	0d b4       	in	r0, 0x2d	; 45
    11f2:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    11f4:	fd cf       	rjmp	.-6      	; 0x11f0 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x166>
    11f6:	2e b5       	in	r18, 0x2e	; 46
    11f8:	8e bd       	out	0x2e, r24	; 46
    static uint8_t      rx() __attribute__((always_inline))
    {
        wait();

        // get received data from buffer
        return SPDR;
    11fa:	0d b4       	in	r0, 0x2d	; 45
     * \param data  Byte to send
     */
    static void         tx(uint8_t data)  __attribute__((always_inline))
    {
        // put data into buffer, sends the data
        SPDR = data;
    11fc:	07 fe       	sbrs	r0, 7
    /**
     * Waits until SPI transmission / reception complete
     */
    static void         wait()  __attribute__((always_inline))
    {        
        loop_until_bit_is_set(SPSR, SPIF);
    11fe:	fd cf       	rjmp	.-6      	; 0x11fa <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x170>
    1200:	2a 9a       	sbi	0x05, 2	; 5
    1202:	d8 cf       	rjmp	.-80     	; 0x11b4 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x12a>
    /**
     * Deassert SS/ to terminate SPI communication
     */
    static void         deassert() __attribute__((always_inline))
    {
        PORTB |= _BV(PORTB2);
    1204:	18 82       	st	Y, r1
    1206:	ec cf       	rjmp	.-40     	; 0x11e0 <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv+0x156>

00001208 <main>:
        }

        // check if we need to switch to SIO mode
        if (_fallbackCounter > 0 && --_fallbackCounter == 0)
        {
            _ddlMode = IoLink::DDL_MODE_IDLE;
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120c:	94 e0       	ldi	r25, 0x04	; 4
    120e:	21 50       	subi	r18, 0x01	; 1
    1210:	80 40       	sbci	r24, 0x00	; 0
    1212:	90 40       	sbci	r25, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <main+0x6>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <main+0x10>
    1218:	00 00       	nop
public:
    //! setup the HW configuration
    static void configure()
    {
        // Port PD4 and PD5 as output
        DDRD  |= _BV(DDD4) | _BV(DDD5);
    121a:	8a b1       	in	r24, 0x0a	; 10
    121c:	80 63       	ori	r24, 0x30	; 48
    121e:	8a b9       	out	0x0a, r24	; 10
        {
            PORTD |= _BV(PORTD4);
        }
        else
        {
            PORTD &= ~(_BV(PORTD4));
    1220:	5c 98       	cbi	0x0b, 4	; 11
    // instantiate DemoApp
    DemoApp& theApp = DemoApp::instance;

    // configure all software modules
    DebugPin::configure();
    DemoApp::configure();   
    1222:	fe dd       	rcall	.-1028   	; 0xe20 <_ZN7DemoApp9configureEv>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    Stack::instance.configure();
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	30 df       	rcall	.-416    	; 0x108a <_ZN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9configureEv>
    122a:	78 94       	sei
    122c:	83 b7       	in	r24, 0x33	; 51

    // enable interrupts
    sei();
    122e:	81 7f       	andi	r24, 0xF1	; 241

    // select sleep mode
    set_sleep_mode(SLEEP_MODE_IDLE);
    1230:	83 bf       	out	0x33, r24	; 51
    1232:	83 b7       	in	r24, 0x33	; 51
    1234:	81 60       	ori	r24, 0x01	; 1

    // enter infinite loop: processing is interrupt controlled from now on
    for (;;)
    {
        // enter sleep until interrupt wakes us up
        sleep_mode();
    1236:	83 bf       	out	0x33, r24	; 51
    1238:	88 95       	sleep
    123a:	83 b7       	in	r24, 0x33	; 51
    123c:	8e 7f       	andi	r24, 0xFE	; 254
    123e:	83 bf       	out	0x33, r24	; 51
    1240:	80 91 14 01 	lds	r24, 0x0114
//------------------------------------------------------------------------------
template <class T, int PDI, int PDO, class SpiSsHndlr>
bool StackBase<T, PDI, PDO, SpiSsHndlr>::canRunUserCode(const Parameter*& lastWrittenParameter)
{
    // allow execution of user code?
    if (!_runUserCode)
    1244:	80 ff       	sbrs	r24, 0
    1246:	f5 cf       	rjmp	.-22     	; 0x1232 <main+0x2a>
    1248:	8e 7f       	andi	r24, 0xFE	; 254
    124a:	80 93 14 01 	sts	0x0114, r24
        return false;

    // reset flag
    _runUserCode = false;
    124e:	81 ff       	sbrs	r24, 1
    1250:	06 c0       	rjmp	.+12     	; 0x125e <main+0x56>

    // test for parameter write access
    if (_prmWriteAvailable)
    1252:	8d 7f       	andi	r24, 0xFD	; 253
    1254:	80 93 14 01 	sts	0x0114, r24
    {
        lastWrittenParameter = &_parameterWrite;

        // reset write access
        _prmWriteAvailable = false;
    1258:	6b e0       	ldi	r22, 0x0B	; 11
    125a:	71 e0       	ldi	r23, 0x01	; 1
    _runUserCode = false;

    // test for parameter write access
    if (_prmWriteAvailable)
    {
        lastWrittenParameter = &_parameterWrite;
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <main+0x5a>
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	70 e0       	ldi	r23, 0x00	; 0
        // reset write access
        _prmWriteAvailable = false;
    }
    else
    {
        lastWrittenParameter = NULL;
    1262:	80 91 6c 00 	lds	r24, 0x006C

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::stopInterrupt()
{
    PCMSK1 &= ~(_BV(PCINT8));
    1266:	8e 7f       	andi	r24, 0xFE	; 254
    1268:	80 93 6c 00 	sts	0x006C, r24
    126c:	87 e4       	ldi	r24, 0x47	; 71
    126e:	91 e0       	ldi	r25, 0x01	; 1
        // check if it's time to run user code
        const Stack::Parameter* paramWrite;
        if (Stack::instance.canRunUserCode(paramWrite))
        {
            Stack::instance.stopInterrupt();
            theApp.run(paramWrite);
    1270:	d9 de       	rcall	.-590    	; 0x1024 <_ZN7DemoApp3runEPKN9StackBaseI15StackSingleByteLi4ELi0E16DefaultSsHandlerE9ParameterE>
    1272:	80 91 6c 00 	lds	r24, 0x006C
    1276:	81 60       	ori	r24, 0x01	; 1

//------------------------------------------------------------------------------
template <class SpiSsHndlr>
void PhyDriver<SpiSsHndlr>::restartInterrupt()
{
    PCMSK1 |= _BV(PCINT8);
    1278:	80 93 6c 00 	sts	0x006C, r24
    127c:	18 dd       	rcall	.-1488   	; 0xcae <__vector_4>
    127e:	d9 cf       	rjmp	.-78     	; 0x1232 <main+0x2a>

00001280 <__tablejump2__>:
    1280:	ee 0f       	add	r30, r30

    // call ISR handler
    PCINT1_vect();
    1282:	ff 1f       	adc	r31, r31
    1284:	05 90       	lpm	r0, Z+
    1286:	f4 91       	lpm	r31, Z
    1288:	e0 2d       	mov	r30, r0
    128a:	09 94       	ijmp

0000128c <memcpy_P>:
    128c:	fb 01       	movw	r30, r22
    128e:	dc 01       	movw	r26, r24
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <memcpy_P+0xa>
    1292:	05 90       	lpm	r0, Z+
    1294:	0d 92       	st	X+, r0
    1296:	41 50       	subi	r20, 0x01	; 1
    1298:	50 40       	sbci	r21, 0x00	; 0
    129a:	d8 f7       	brcc	.-10     	; 0x1292 <memcpy_P+0x6>
    129c:	08 95       	ret

0000129e <_exit>:
    129e:	f8 94       	cli

000012a0 <__stop_program>:
    12a0:	ff cf       	rjmp	.-2      	; 0x12a0 <__stop_program>
